use crate::{
    CryptoKeystoreResult, MissingKeyErrorKind,
    connection::{DatabaseConnection, KeystoreDatabaseConnection, TransactionWrapper},
    entities::{Entity, EntityBase, EntityFindParams, EntityTransactionExt, MlsPendingMessage, StringEntityId},
};

impl MlsPendingMessage {
    pub async fn find_all_by_conversation_id(
        conn: &mut <Self as EntityBase>::ConnectionType,
        conversation_id: &[u8],
        params: EntityFindParams,
    ) -> crate::CryptoKeystoreResult<Vec<Self>> {
        let mut conn = conn.conn().await;
        let transaction = conn.transaction()?;
        let query: String = format!(
            "SELECT rowid FROM mls_pending_messages WHERE id = ? {}",
            params.to_sql()
        );

        let mut stmt = transaction.prepare_cached(&query)?;
        let rows = stmt.query_map([conversation_id], |r| r.get(0))?;
        rows.map(|rowid_result| {
            let rowid = rowid_result?;
            use std::io::Read as _;

            let mut blob = transaction.blob_open(rusqlite::MAIN_DB, "mls_pending_messages", "id", rowid, true)?;
            let mut conversation_id = vec![];
            blob.read_to_end(&mut conversation_id)?;
            blob.close()?;

            let mut blob = transaction.blob_open(rusqlite::MAIN_DB, "mls_pending_messages", "message", rowid, true)?;
            let mut message = vec![];
            blob.read_to_end(&mut message)?;
            blob.close()?;

            Ok(Self {
                foreign_id: conversation_id,
                message,
            })
        })
        .collect()
    }
}

#[async_trait::async_trait]
impl Entity for MlsPendingMessage {
    fn id_raw(&self) -> &[u8] {
        self.foreign_id.as_slice()
    }

    fn merge_key(&self) -> Vec<u8> {
        // Use this as a merge key because the `id` is not used as a primary key
        // but  as a foreign key: it's the ID of the PersistedMlsPendingGroup.
        self.message.clone()
    }

    async fn find_one(_: &mut Self::ConnectionType, _: &StringEntityId) -> crate::CryptoKeystoreResult<Option<Self>> {
        panic!("Must not be called. The intended usage is to call MlsPendingMessage::find_all_by_conversation_id().")
    }

    async fn find_all(
        conn: &mut Self::ConnectionType,
        params: EntityFindParams,
    ) -> crate::CryptoKeystoreResult<Vec<Self>> {
        let mut conn = conn.conn().await;
        let transaction = conn.transaction()?;
        let query: String = format!("SELECT rowid FROM mls_pending_messages {}", params.to_sql());

        let mut stmt = transaction.prepare_cached(&query)?;
        let mut rows = stmt.query_map([], |r| r.get(0))?;
        let entities = rows.try_fold(Vec::new(), |mut acc, rowid_result| {
            use std::io::Read as _;
            let rowid = rowid_result?;

            let mut blob = transaction.blob_open(rusqlite::MAIN_DB, "mls_pending_messages", "id", rowid, true)?;
            let mut id = vec![];
            blob.read_to_end(&mut id)?;
            blob.close()?;

            let mut blob = transaction.blob_open(rusqlite::MAIN_DB, "mls_pending_messages", "message", rowid, true)?;
            let mut message = vec![];
            blob.read_to_end(&mut message)?;
            blob.close()?;

            acc.push(Self {
                foreign_id: id,
                message,
            });
            crate::CryptoKeystoreResult::Ok(acc)
        })?;

        Ok(entities)
    }

    async fn find_many(
        _conn: &mut Self::ConnectionType,
        _ids: &[StringEntityId],
    ) -> crate::CryptoKeystoreResult<Vec<Self>> {
        unreachable!()
    }

    async fn count(conn: &mut Self::ConnectionType) -> crate::CryptoKeystoreResult<usize> {
        let conn = conn.conn().await;
        conn.query_row("SELECT COUNT(*) FROM mls_pending_messages", [], |r| r.get(0))
            .map_err(Into::into)
    }
}

#[async_trait::async_trait]
impl EntityBase for MlsPendingMessage {
    type ConnectionType = KeystoreDatabaseConnection;
    type AutoGeneratedFields = ();
    const COLLECTION_NAME: &'static str = "mls_pending_messages";

    fn to_missing_key_err_kind() -> MissingKeyErrorKind {
        MissingKeyErrorKind::MlsPendingMessages
    }

    fn to_transaction_entity(self) -> crate::transaction::dynamic_dispatch::Entity {
        crate::transaction::dynamic_dispatch::Entity::MlsPendingMessage(self)
    }
}

#[async_trait::async_trait]
impl EntityTransactionExt for MlsPendingMessage {
    async fn save(&self, transaction: &TransactionWrapper<'_>) -> CryptoKeystoreResult<()> {
        Self::ConnectionType::check_buffer_size(self.foreign_id.len())?;
        Self::ConnectionType::check_buffer_size(self.message.len())?;

        let zid = rusqlite::blob::ZeroBlob(self.foreign_id.len() as i32);
        let zmsg = rusqlite::blob::ZeroBlob(self.message.len() as i32);

        let id_bytes = &self.foreign_id;

        use rusqlite::ToSql as _;
        transaction.execute(
            "INSERT INTO mls_pending_messages (id, message) VALUES(?, ?)",
            [&zid.to_sql()?, &zmsg.to_sql()?],
        )?;
        let rowid = transaction.last_insert_rowid();

        let mut blob = transaction.blob_open(rusqlite::MAIN_DB, "mls_pending_messages", "id", rowid, false)?;
        use std::io::Write as _;
        blob.write_all(id_bytes)?;
        blob.close()?;

        let mut blob = transaction.blob_open(rusqlite::MAIN_DB, "mls_pending_messages", "message", rowid, false)?;
        blob.write_all(&self.message)?;
        blob.close()?;

        Ok(())
    }

    async fn delete_fail_on_missing_id(
        transaction: &TransactionWrapper<'_>,
        id: StringEntityId<'_>,
    ) -> CryptoKeystoreResult<()> {
        let updated = transaction.execute("DELETE FROM mls_pending_messages WHERE id = ?", [id.as_slice()])?;

        if updated > 0 {
            Ok(())
        } else {
            Err(Self::to_missing_key_err_kind().into())
        }
    }
}
