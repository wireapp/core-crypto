// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package com.wire.crypto;

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the detils of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.ptr.ByReference
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.locks.ReentrantLock
import kotlin.concurrent.withLock

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    @JvmField var capacity: Int = 0
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : RustBuffer(), Structure.ByValue
    class ByReference : RustBuffer(), Structure.ByReference

    companion object {
        internal fun alloc(size: Int = 0) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_CoreCrypto_24ee_rustbuffer_alloc(size, status).also {
                if(it.data == null) {
                   throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
               }
            }
        }

        internal fun free(buf: RustBuffer.ByValue) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_CoreCrypto_24ee_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setInt(0, value.capacity)
        pointer.setInt(4, value.len)
        pointer.setPointer(8, value.data)
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): Int

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity.toLong()).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
@Structure.FieldOrder("code", "error_buf")
internal open class RustCallStatus : Structure() {
    @JvmField var code: Int = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    fun isSuccess(): Boolean {
        return code == 0
    }

    fun isError(): Boolean {
        return code == 1
    }

    fun isPanic(): Boolean {
        return code == 2
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface CallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: Exception> rustCallWithError(errorHandler: CallStatusErrorHandler<E>, callback: (RustCallStatus) -> U): U {
    var status = RustCallStatus();
    val return_value = callback(status)
    if (status.isSuccess()) {
        return return_value
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// CallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object NullCallStatusErrorHandler: CallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> rustCall(callback: (RustCallStatus) -> U): U {
    return rustCallWithError(NullCallStatusErrorHandler, callback);
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "core_crypto_ffi"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface _UniFFILib : Library {
    companion object {
        internal val INSTANCE: _UniFFILib by lazy {
            loadIndirect<_UniFFILib>(componentName = "CoreCrypto")
            .also { lib: _UniFFILib ->
                FfiConverterTypeCoreCryptoCallbacks.register(lib)
                }
            
        }
    }

    fun ffi_CoreCrypto_24ee_CoreCrypto_object_free(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun CoreCrypto_24ee_CoreCrypto_new(`path`: RustBuffer.ByValue,`key`: RustBuffer.ByValue,`clientId`: RustBuffer.ByValue,`entropySeed`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Pointer

    fun CoreCrypto_24ee_CoreCrypto_set_callbacks(`ptr`: Pointer,`callbacks`: Long,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun CoreCrypto_24ee_CoreCrypto_client_public_key(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_24ee_CoreCrypto_client_keypackages(`ptr`: Pointer,`amountRequested`: Int,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_24ee_CoreCrypto_client_valid_keypackages_count(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Long

    fun CoreCrypto_24ee_CoreCrypto_create_conversation(`ptr`: Pointer,`conversationId`: RustBuffer.ByValue,`config`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun CoreCrypto_24ee_CoreCrypto_conversation_epoch(`ptr`: Pointer,`conversationId`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Long

    fun CoreCrypto_24ee_CoreCrypto_conversation_exists(`ptr`: Pointer,`conversationId`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Byte

    fun CoreCrypto_24ee_CoreCrypto_process_welcome_message(`ptr`: Pointer,`welcomeMessage`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_24ee_CoreCrypto_add_clients_to_conversation(`ptr`: Pointer,`conversationId`: RustBuffer.ByValue,`clients`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_24ee_CoreCrypto_remove_clients_from_conversation(`ptr`: Pointer,`conversationId`: RustBuffer.ByValue,`clients`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_24ee_CoreCrypto_update_keying_material(`ptr`: Pointer,`conversationId`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_24ee_CoreCrypto_commit_pending_proposals(`ptr`: Pointer,`conversationId`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_24ee_CoreCrypto_final_add_clients_to_conversation(`ptr`: Pointer,`conversationId`: RustBuffer.ByValue,`clients`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_24ee_CoreCrypto_final_remove_clients_from_conversation(`ptr`: Pointer,`conversationId`: RustBuffer.ByValue,`clients`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_24ee_CoreCrypto_final_update_keying_material(`ptr`: Pointer,`conversationId`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_24ee_CoreCrypto_final_commit_pending_proposals(`ptr`: Pointer,`conversationId`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_24ee_CoreCrypto_wipe_conversation(`ptr`: Pointer,`conversationId`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun CoreCrypto_24ee_CoreCrypto_decrypt_message(`ptr`: Pointer,`conversationId`: RustBuffer.ByValue,`payload`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_24ee_CoreCrypto_encrypt_message(`ptr`: Pointer,`conversationId`: RustBuffer.ByValue,`message`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_24ee_CoreCrypto_new_add_proposal(`ptr`: Pointer,`conversationId`: RustBuffer.ByValue,`keyPackage`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_24ee_CoreCrypto_new_update_proposal(`ptr`: Pointer,`conversationId`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_24ee_CoreCrypto_new_remove_proposal(`ptr`: Pointer,`conversationId`: RustBuffer.ByValue,`clientId`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_24ee_CoreCrypto_new_external_add_proposal(`ptr`: Pointer,`conversationId`: RustBuffer.ByValue,`epoch`: Long,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_24ee_CoreCrypto_new_external_remove_proposal(`ptr`: Pointer,`conversationId`: RustBuffer.ByValue,`epoch`: Long,`keyPackageRef`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_24ee_CoreCrypto_join_by_external_commit(`ptr`: Pointer,`publicGroupState`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_24ee_CoreCrypto_export_group_state(`ptr`: Pointer,`conversationId`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_24ee_CoreCrypto_merge_pending_group_from_external_commit(`ptr`: Pointer,`conversationId`: RustBuffer.ByValue,`config`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun CoreCrypto_24ee_CoreCrypto_clear_pending_group_from_external_commit(`ptr`: Pointer,`conversationId`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun CoreCrypto_24ee_CoreCrypto_random_bytes(`ptr`: Pointer,`length`: Int,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_24ee_CoreCrypto_reseed_rng(`ptr`: Pointer,`seed`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun CoreCrypto_24ee_CoreCrypto_commit_accepted(`ptr`: Pointer,`conversationId`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun CoreCrypto_24ee_CoreCrypto_clear_pending_proposal(`ptr`: Pointer,`conversationId`: RustBuffer.ByValue,`proposalRef`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun CoreCrypto_24ee_CoreCrypto_clear_pending_commit(`ptr`: Pointer,`conversationId`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun CoreCrypto_24ee_CoreCrypto_proteus_init(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun CoreCrypto_24ee_CoreCrypto_proteus_session_from_prekey(`ptr`: Pointer,`sessionId`: RustBuffer.ByValue,`prekey`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun CoreCrypto_24ee_CoreCrypto_proteus_session_from_message(`ptr`: Pointer,`sessionId`: RustBuffer.ByValue,`envelope`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_24ee_CoreCrypto_proteus_session_save(`ptr`: Pointer,`sessionId`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun CoreCrypto_24ee_CoreCrypto_proteus_session_delete(`ptr`: Pointer,`sessionId`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun CoreCrypto_24ee_CoreCrypto_proteus_decrypt(`ptr`: Pointer,`sessionId`: RustBuffer.ByValue,`ciphertext`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_24ee_CoreCrypto_proteus_encrypt(`ptr`: Pointer,`sessionId`: RustBuffer.ByValue,`plaintext`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_24ee_CoreCrypto_proteus_encrypt_batched(`ptr`: Pointer,`sessionId`: RustBuffer.ByValue,`plaintext`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_24ee_CoreCrypto_proteus_new_prekey(`ptr`: Pointer,`prekeyId`: Short,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_24ee_CoreCrypto_proteus_fingerprint(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_24ee_CoreCrypto_proteus_cryptobox_migrate(`ptr`: Pointer,`path`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun ffi_CoreCrypto_24ee_CoreCryptoCallbacks_init_callback(`callbackStub`: ForeignCallback,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun CoreCrypto_24ee_init_with_path_and_key(`path`: RustBuffer.ByValue,`key`: RustBuffer.ByValue,`clientId`: RustBuffer.ByValue,`entropySeed`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Pointer

    fun CoreCrypto_24ee_version(
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_CoreCrypto_24ee_rustbuffer_alloc(`size`: Int,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_CoreCrypto_24ee_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_CoreCrypto_24ee_rustbuffer_free(`buf`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun ffi_CoreCrypto_24ee_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Int,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    
}

// Public interface members begin here.


public object FfiConverterUByte: FfiConverter<UByte, Byte> {
    override fun lift(value: Byte): UByte {
        return value.toUByte()
    }

    override fun read(buf: ByteBuffer): UByte {
        return lift(buf.get())
    }

    override fun lower(value: UByte): Byte {
        return value.toByte()
    }

    override fun allocationSize(value: UByte) = 1

    override fun write(value: UByte, buf: ByteBuffer) {
        buf.put(value.toByte())
    }
}

public object FfiConverterUShort: FfiConverter<UShort, Short> {
    override fun lift(value: Short): UShort {
        return value.toUShort()
    }

    override fun read(buf: ByteBuffer): UShort {
        return lift(buf.getShort())
    }

    override fun lower(value: UShort): Short {
        return value.toShort()
    }

    override fun allocationSize(value: UShort) = 2

    override fun write(value: UShort, buf: ByteBuffer) {
        buf.putShort(value.toShort())
    }
}

public object FfiConverterUInt: FfiConverter<UInt, Int> {
    override fun lift(value: Int): UInt {
        return value.toUInt()
    }

    override fun read(buf: ByteBuffer): UInt {
        return lift(buf.getInt())
    }

    override fun lower(value: UInt): Int {
        return value.toInt()
    }

    override fun allocationSize(value: UInt) = 4

    override fun write(value: UInt, buf: ByteBuffer) {
        buf.putInt(value.toInt())
    }
}

public object FfiConverterULong: FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8

    override fun write(value: ULong, buf: ByteBuffer) {
        buf.putLong(value.toLong())
    }
}

public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len)
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteArr.size)
        rbuf.asByteBuffer()!!.put(byteArr)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per unicode codepoint which will always be
    // enough.
    override fun allocationSize(value: String): Int {
        val sizeForLength = 4
        val sizeForString = value.length * 3
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        buf.putInt(byteArr.size)
        buf.put(byteArr)
    }
}


public object FfiConverterDuration: FfiConverterRustBuffer<java.time.Duration> {
    override fun read(buf: ByteBuffer): java.time.Duration {
        // Type mismatch (should be u64) but we check for overflow/underflow below
        val seconds = buf.getLong()
        // Type mismatch (should be u32) but we check for overflow/underflow below
        val nanoseconds = buf.getInt().toLong()
        if (seconds < 0) {
            throw java.time.DateTimeException("Duration exceeds minimum or maximum value supported by uniffi")
        }
        if (nanoseconds < 0) {
            throw java.time.DateTimeException("Duration nanoseconds exceed minimum or maximum supported by uniffi")
        }
        return java.time.Duration.ofSeconds(seconds, nanoseconds)
    }

    // 8 bytes for seconds, 4 bytes for nanoseconds
    override fun allocationSize(value: java.time.Duration) = 12

    override fun write(value: java.time.Duration, buf: ByteBuffer) {
        if (value.seconds < 0) {
            // Rust does not support negative Durations
            throw IllegalArgumentException("Invalid duration, must be non-negative")
        }

        if (value.nano < 0) {
            // Java docs provide guarantee that nano will always be positive, so this should be impossible
            // See: https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html
            throw IllegalArgumentException("Invalid duration, nano value must be non-negative")
        }

        // Type mismatch (should be u64) but since Rust doesn't support negative durations we should be OK
        buf.putLong(value.seconds)
        // Type mismatch (should be u32) but since values will always be between 0 and 999,999,999 it should be OK
        buf.putInt(value.nano)
    }
}


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

// The base class for all UniFFI Object types.
//
// This class provides core operations for working with the Rust `Arc<T>` pointer to
// the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// the Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each `FFIObject` instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an `FFIObject` is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an `FFIObject` instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so will
//     leak the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each `FFIObject` an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// In the future we may be able to replace some of this with automatic finalization logic, such as using
// the new "Cleaner" functionaility in Java 9. The above scheme has been designed to work even if `destroy` is
// invoked by garbage-collection machinery rather than by calling code (which by the way, it's apparently also
// possible for the JVM to finalize an object while there is an in-flight call to one of its methods [1],
// so there would still be some complexity here).
//
// Sigh...all of this for want of a robust finalization mechanism.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//
abstract class FFIObject(
    protected val pointer: Pointer
): Disposable, AutoCloseable {

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    open protected fun freeRustArcPtr() {
        // To be overridden in subclasses.
    }

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.pointer)
        } finally {
            // This decrement aways matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }
}

public interface CoreCryptoInterface {
    
    @Throws(CryptoException::class)
    fun `setCallbacks`(`callbacks`: CoreCryptoCallbacks)
    
    @Throws(CryptoException::class)
    fun `clientPublicKey`(): List<UByte>
    
    @Throws(CryptoException::class)
    fun `clientKeypackages`(`amountRequested`: UInt): List<List<UByte>>
    
    @Throws(CryptoException::class)
    fun `clientValidKeypackagesCount`(): ULong
    
    @Throws(CryptoException::class)
    fun `createConversation`(`conversationId`: ConversationId, `config`: ConversationConfiguration)
    
    @Throws(CryptoException::class)
    fun `conversationEpoch`(`conversationId`: ConversationId): ULong
    
    fun `conversationExists`(`conversationId`: ConversationId): Boolean
    
    @Throws(CryptoException::class)
    fun `processWelcomeMessage`(`welcomeMessage`: List<UByte>): ConversationId
    
    @Throws(CryptoException::class)
    fun `addClientsToConversation`(`conversationId`: ConversationId, `clients`: List<Invitee>): MemberAddedMessages
    
    @Throws(CryptoException::class)
    fun `removeClientsFromConversation`(`conversationId`: ConversationId, `clients`: List<ClientId>): CommitBundle
    
    @Throws(CryptoException::class)
    fun `updateKeyingMaterial`(`conversationId`: ConversationId): CommitBundle
    
    @Throws(CryptoException::class)
    fun `commitPendingProposals`(`conversationId`: ConversationId): CommitBundle?
    
    @Throws(CryptoException::class)
    fun `finalAddClientsToConversation`(`conversationId`: ConversationId, `clients`: List<Invitee>): TlsCommitBundle
    
    @Throws(CryptoException::class)
    fun `finalRemoveClientsFromConversation`(`conversationId`: ConversationId, `clients`: List<ClientId>): TlsCommitBundle
    
    @Throws(CryptoException::class)
    fun `finalUpdateKeyingMaterial`(`conversationId`: ConversationId): TlsCommitBundle
    
    @Throws(CryptoException::class)
    fun `finalCommitPendingProposals`(`conversationId`: ConversationId): TlsCommitBundle?
    
    @Throws(CryptoException::class)
    fun `wipeConversation`(`conversationId`: ConversationId)
    
    @Throws(CryptoException::class)
    fun `decryptMessage`(`conversationId`: ConversationId, `payload`: List<UByte>): DecryptedMessage
    
    @Throws(CryptoException::class)
    fun `encryptMessage`(`conversationId`: ConversationId, `message`: List<UByte>): List<UByte>
    
    @Throws(CryptoException::class)
    fun `newAddProposal`(`conversationId`: ConversationId, `keyPackage`: List<UByte>): ProposalBundle
    
    @Throws(CryptoException::class)
    fun `newUpdateProposal`(`conversationId`: ConversationId): ProposalBundle
    
    @Throws(CryptoException::class)
    fun `newRemoveProposal`(`conversationId`: ConversationId, `clientId`: ClientId): ProposalBundle
    
    @Throws(CryptoException::class)
    fun `newExternalAddProposal`(`conversationId`: ConversationId, `epoch`: ULong): List<UByte>
    
    @Throws(CryptoException::class)
    fun `newExternalRemoveProposal`(`conversationId`: ConversationId, `epoch`: ULong, `keyPackageRef`: List<UByte>): List<UByte>
    
    @Throws(CryptoException::class)
    fun `joinByExternalCommit`(`publicGroupState`: List<UByte>): ConversationInitBundle
    
    @Throws(CryptoException::class)
    fun `exportGroupState`(`conversationId`: ConversationId): List<UByte>
    
    @Throws(CryptoException::class)
    fun `mergePendingGroupFromExternalCommit`(`conversationId`: ConversationId, `config`: ConversationConfiguration)
    
    @Throws(CryptoException::class)
    fun `clearPendingGroupFromExternalCommit`(`conversationId`: ConversationId)
    
    @Throws(CryptoException::class)
    fun `randomBytes`(`length`: UInt): List<UByte>
    
    @Throws(CryptoException::class)
    fun `reseedRng`(`seed`: List<UByte>)
    
    @Throws(CryptoException::class)
    fun `commitAccepted`(`conversationId`: ConversationId)
    
    @Throws(CryptoException::class)
    fun `clearPendingProposal`(`conversationId`: ConversationId, `proposalRef`: List<UByte>)
    
    @Throws(CryptoException::class)
    fun `clearPendingCommit`(`conversationId`: ConversationId)
    
    @Throws(CryptoException::class)
    fun `proteusInit`()
    
    @Throws(CryptoException::class)
    fun `proteusSessionFromPrekey`(`sessionId`: String, `prekey`: List<UByte>)
    
    @Throws(CryptoException::class)
    fun `proteusSessionFromMessage`(`sessionId`: String, `envelope`: List<UByte>): List<UByte>
    
    @Throws(CryptoException::class)
    fun `proteusSessionSave`(`sessionId`: String)
    
    @Throws(CryptoException::class)
    fun `proteusSessionDelete`(`sessionId`: String)
    
    @Throws(CryptoException::class)
    fun `proteusDecrypt`(`sessionId`: String, `ciphertext`: List<UByte>): List<UByte>
    
    @Throws(CryptoException::class)
    fun `proteusEncrypt`(`sessionId`: String, `plaintext`: List<UByte>): List<UByte>
    
    @Throws(CryptoException::class)
    fun `proteusEncryptBatched`(`sessionId`: List<String>, `plaintext`: List<UByte>): Map<String, List<UByte>>
    
    @Throws(CryptoException::class)
    fun `proteusNewPrekey`(`prekeyId`: UShort): List<UByte>
    
    @Throws(CryptoException::class)
    fun `proteusFingerprint`(): String
    
    @Throws(CryptoException::class)
    fun `proteusCryptoboxMigrate`(`path`: String)
    
}

class CoreCrypto(
    pointer: Pointer
) : FFIObject(pointer), CoreCryptoInterface {
    constructor(`path`: String, `key`: String, `clientId`: String, `entropySeed`: List<UByte>?) :
        this(
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_new(FfiConverterString.lower(`path`), FfiConverterString.lower(`key`), FfiConverterString.lower(`clientId`), FfiConverterOptionalSequenceUByte.lower(`entropySeed`), _status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_CoreCrypto_24ee_CoreCrypto_object_free(this.pointer, status)
        }
    }

    
    @Throws(CryptoException::class)override fun `setCallbacks`(`callbacks`: CoreCryptoCallbacks) =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_set_callbacks(it, FfiConverterTypeCoreCryptoCallbacks.lower(`callbacks`),  _status)
}
        }
    
    
    @Throws(CryptoException::class)override fun `clientPublicKey`(): List<UByte> =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_client_public_key(it,  _status)
}
        }.let {
            FfiConverterSequenceUByte.lift(it)
        }
    
    @Throws(CryptoException::class)override fun `clientKeypackages`(`amountRequested`: UInt): List<List<UByte>> =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_client_keypackages(it, FfiConverterUInt.lower(`amountRequested`),  _status)
}
        }.let {
            FfiConverterSequenceSequenceUByte.lift(it)
        }
    
    @Throws(CryptoException::class)override fun `clientValidKeypackagesCount`(): ULong =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_client_valid_keypackages_count(it,  _status)
}
        }.let {
            FfiConverterULong.lift(it)
        }
    
    @Throws(CryptoException::class)override fun `createConversation`(`conversationId`: ConversationId, `config`: ConversationConfiguration) =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_create_conversation(it, FfiConverterTypeConversationId.lower(`conversationId`), FfiConverterTypeConversationConfiguration.lower(`config`),  _status)
}
        }
    
    
    @Throws(CryptoException::class)override fun `conversationEpoch`(`conversationId`: ConversationId): ULong =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_conversation_epoch(it, FfiConverterTypeConversationId.lower(`conversationId`),  _status)
}
        }.let {
            FfiConverterULong.lift(it)
        }
    override fun `conversationExists`(`conversationId`: ConversationId): Boolean =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_conversation_exists(it, FfiConverterTypeConversationId.lower(`conversationId`),  _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    
    @Throws(CryptoException::class)override fun `processWelcomeMessage`(`welcomeMessage`: List<UByte>): ConversationId =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_process_welcome_message(it, FfiConverterSequenceUByte.lower(`welcomeMessage`),  _status)
}
        }.let {
            FfiConverterTypeConversationId.lift(it)
        }
    
    @Throws(CryptoException::class)override fun `addClientsToConversation`(`conversationId`: ConversationId, `clients`: List<Invitee>): MemberAddedMessages =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_add_clients_to_conversation(it, FfiConverterTypeConversationId.lower(`conversationId`), FfiConverterSequenceTypeInvitee.lower(`clients`),  _status)
}
        }.let {
            FfiConverterTypeMemberAddedMessages.lift(it)
        }
    
    @Throws(CryptoException::class)override fun `removeClientsFromConversation`(`conversationId`: ConversationId, `clients`: List<ClientId>): CommitBundle =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_remove_clients_from_conversation(it, FfiConverterTypeConversationId.lower(`conversationId`), FfiConverterSequenceTypeClientId.lower(`clients`),  _status)
}
        }.let {
            FfiConverterTypeCommitBundle.lift(it)
        }
    
    @Throws(CryptoException::class)override fun `updateKeyingMaterial`(`conversationId`: ConversationId): CommitBundle =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_update_keying_material(it, FfiConverterTypeConversationId.lower(`conversationId`),  _status)
}
        }.let {
            FfiConverterTypeCommitBundle.lift(it)
        }
    
    @Throws(CryptoException::class)override fun `commitPendingProposals`(`conversationId`: ConversationId): CommitBundle? =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_commit_pending_proposals(it, FfiConverterTypeConversationId.lower(`conversationId`),  _status)
}
        }.let {
            FfiConverterOptionalTypeCommitBundle.lift(it)
        }
    
    @Throws(CryptoException::class)override fun `finalAddClientsToConversation`(`conversationId`: ConversationId, `clients`: List<Invitee>): TlsCommitBundle =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_final_add_clients_to_conversation(it, FfiConverterTypeConversationId.lower(`conversationId`), FfiConverterSequenceTypeInvitee.lower(`clients`),  _status)
}
        }.let {
            FfiConverterTypeTlsCommitBundle.lift(it)
        }
    
    @Throws(CryptoException::class)override fun `finalRemoveClientsFromConversation`(`conversationId`: ConversationId, `clients`: List<ClientId>): TlsCommitBundle =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_final_remove_clients_from_conversation(it, FfiConverterTypeConversationId.lower(`conversationId`), FfiConverterSequenceTypeClientId.lower(`clients`),  _status)
}
        }.let {
            FfiConverterTypeTlsCommitBundle.lift(it)
        }
    
    @Throws(CryptoException::class)override fun `finalUpdateKeyingMaterial`(`conversationId`: ConversationId): TlsCommitBundle =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_final_update_keying_material(it, FfiConverterTypeConversationId.lower(`conversationId`),  _status)
}
        }.let {
            FfiConverterTypeTlsCommitBundle.lift(it)
        }
    
    @Throws(CryptoException::class)override fun `finalCommitPendingProposals`(`conversationId`: ConversationId): TlsCommitBundle? =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_final_commit_pending_proposals(it, FfiConverterTypeConversationId.lower(`conversationId`),  _status)
}
        }.let {
            FfiConverterOptionalTypeTlsCommitBundle.lift(it)
        }
    
    @Throws(CryptoException::class)override fun `wipeConversation`(`conversationId`: ConversationId) =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_wipe_conversation(it, FfiConverterTypeConversationId.lower(`conversationId`),  _status)
}
        }
    
    
    @Throws(CryptoException::class)override fun `decryptMessage`(`conversationId`: ConversationId, `payload`: List<UByte>): DecryptedMessage =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_decrypt_message(it, FfiConverterTypeConversationId.lower(`conversationId`), FfiConverterSequenceUByte.lower(`payload`),  _status)
}
        }.let {
            FfiConverterTypeDecryptedMessage.lift(it)
        }
    
    @Throws(CryptoException::class)override fun `encryptMessage`(`conversationId`: ConversationId, `message`: List<UByte>): List<UByte> =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_encrypt_message(it, FfiConverterTypeConversationId.lower(`conversationId`), FfiConverterSequenceUByte.lower(`message`),  _status)
}
        }.let {
            FfiConverterSequenceUByte.lift(it)
        }
    
    @Throws(CryptoException::class)override fun `newAddProposal`(`conversationId`: ConversationId, `keyPackage`: List<UByte>): ProposalBundle =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_new_add_proposal(it, FfiConverterTypeConversationId.lower(`conversationId`), FfiConverterSequenceUByte.lower(`keyPackage`),  _status)
}
        }.let {
            FfiConverterTypeProposalBundle.lift(it)
        }
    
    @Throws(CryptoException::class)override fun `newUpdateProposal`(`conversationId`: ConversationId): ProposalBundle =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_new_update_proposal(it, FfiConverterTypeConversationId.lower(`conversationId`),  _status)
}
        }.let {
            FfiConverterTypeProposalBundle.lift(it)
        }
    
    @Throws(CryptoException::class)override fun `newRemoveProposal`(`conversationId`: ConversationId, `clientId`: ClientId): ProposalBundle =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_new_remove_proposal(it, FfiConverterTypeConversationId.lower(`conversationId`), FfiConverterTypeClientId.lower(`clientId`),  _status)
}
        }.let {
            FfiConverterTypeProposalBundle.lift(it)
        }
    
    @Throws(CryptoException::class)override fun `newExternalAddProposal`(`conversationId`: ConversationId, `epoch`: ULong): List<UByte> =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_new_external_add_proposal(it, FfiConverterTypeConversationId.lower(`conversationId`), FfiConverterULong.lower(`epoch`),  _status)
}
        }.let {
            FfiConverterSequenceUByte.lift(it)
        }
    
    @Throws(CryptoException::class)override fun `newExternalRemoveProposal`(`conversationId`: ConversationId, `epoch`: ULong, `keyPackageRef`: List<UByte>): List<UByte> =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_new_external_remove_proposal(it, FfiConverterTypeConversationId.lower(`conversationId`), FfiConverterULong.lower(`epoch`), FfiConverterSequenceUByte.lower(`keyPackageRef`),  _status)
}
        }.let {
            FfiConverterSequenceUByte.lift(it)
        }
    
    @Throws(CryptoException::class)override fun `joinByExternalCommit`(`publicGroupState`: List<UByte>): ConversationInitBundle =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_join_by_external_commit(it, FfiConverterSequenceUByte.lower(`publicGroupState`),  _status)
}
        }.let {
            FfiConverterTypeConversationInitBundle.lift(it)
        }
    
    @Throws(CryptoException::class)override fun `exportGroupState`(`conversationId`: ConversationId): List<UByte> =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_export_group_state(it, FfiConverterTypeConversationId.lower(`conversationId`),  _status)
}
        }.let {
            FfiConverterSequenceUByte.lift(it)
        }
    
    @Throws(CryptoException::class)override fun `mergePendingGroupFromExternalCommit`(`conversationId`: ConversationId, `config`: ConversationConfiguration) =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_merge_pending_group_from_external_commit(it, FfiConverterTypeConversationId.lower(`conversationId`), FfiConverterTypeConversationConfiguration.lower(`config`),  _status)
}
        }
    
    
    @Throws(CryptoException::class)override fun `clearPendingGroupFromExternalCommit`(`conversationId`: ConversationId) =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_clear_pending_group_from_external_commit(it, FfiConverterTypeConversationId.lower(`conversationId`),  _status)
}
        }
    
    
    @Throws(CryptoException::class)override fun `randomBytes`(`length`: UInt): List<UByte> =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_random_bytes(it, FfiConverterUInt.lower(`length`),  _status)
}
        }.let {
            FfiConverterSequenceUByte.lift(it)
        }
    
    @Throws(CryptoException::class)override fun `reseedRng`(`seed`: List<UByte>) =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_reseed_rng(it, FfiConverterSequenceUByte.lower(`seed`),  _status)
}
        }
    
    
    @Throws(CryptoException::class)override fun `commitAccepted`(`conversationId`: ConversationId) =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_commit_accepted(it, FfiConverterTypeConversationId.lower(`conversationId`),  _status)
}
        }
    
    
    @Throws(CryptoException::class)override fun `clearPendingProposal`(`conversationId`: ConversationId, `proposalRef`: List<UByte>) =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_clear_pending_proposal(it, FfiConverterTypeConversationId.lower(`conversationId`), FfiConverterSequenceUByte.lower(`proposalRef`),  _status)
}
        }
    
    
    @Throws(CryptoException::class)override fun `clearPendingCommit`(`conversationId`: ConversationId) =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_clear_pending_commit(it, FfiConverterTypeConversationId.lower(`conversationId`),  _status)
}
        }
    
    
    @Throws(CryptoException::class)override fun `proteusInit`() =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_proteus_init(it,  _status)
}
        }
    
    
    @Throws(CryptoException::class)override fun `proteusSessionFromPrekey`(`sessionId`: String, `prekey`: List<UByte>) =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_proteus_session_from_prekey(it, FfiConverterString.lower(`sessionId`), FfiConverterSequenceUByte.lower(`prekey`),  _status)
}
        }
    
    
    @Throws(CryptoException::class)override fun `proteusSessionFromMessage`(`sessionId`: String, `envelope`: List<UByte>): List<UByte> =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_proteus_session_from_message(it, FfiConverterString.lower(`sessionId`), FfiConverterSequenceUByte.lower(`envelope`),  _status)
}
        }.let {
            FfiConverterSequenceUByte.lift(it)
        }
    
    @Throws(CryptoException::class)override fun `proteusSessionSave`(`sessionId`: String) =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_proteus_session_save(it, FfiConverterString.lower(`sessionId`),  _status)
}
        }
    
    
    @Throws(CryptoException::class)override fun `proteusSessionDelete`(`sessionId`: String) =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_proteus_session_delete(it, FfiConverterString.lower(`sessionId`),  _status)
}
        }
    
    
    @Throws(CryptoException::class)override fun `proteusDecrypt`(`sessionId`: String, `ciphertext`: List<UByte>): List<UByte> =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_proteus_decrypt(it, FfiConverterString.lower(`sessionId`), FfiConverterSequenceUByte.lower(`ciphertext`),  _status)
}
        }.let {
            FfiConverterSequenceUByte.lift(it)
        }
    
    @Throws(CryptoException::class)override fun `proteusEncrypt`(`sessionId`: String, `plaintext`: List<UByte>): List<UByte> =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_proteus_encrypt(it, FfiConverterString.lower(`sessionId`), FfiConverterSequenceUByte.lower(`plaintext`),  _status)
}
        }.let {
            FfiConverterSequenceUByte.lift(it)
        }
    
    @Throws(CryptoException::class)override fun `proteusEncryptBatched`(`sessionId`: List<String>, `plaintext`: List<UByte>): Map<String, List<UByte>> =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_proteus_encrypt_batched(it, FfiConverterSequenceString.lower(`sessionId`), FfiConverterSequenceUByte.lower(`plaintext`),  _status)
}
        }.let {
            FfiConverterMapStringListUByte.lift(it)
        }
    
    @Throws(CryptoException::class)override fun `proteusNewPrekey`(`prekeyId`: UShort): List<UByte> =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_proteus_new_prekey(it, FfiConverterUShort.lower(`prekeyId`),  _status)
}
        }.let {
            FfiConverterSequenceUByte.lift(it)
        }
    
    @Throws(CryptoException::class)override fun `proteusFingerprint`(): String =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_proteus_fingerprint(it,  _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    @Throws(CryptoException::class)override fun `proteusCryptoboxMigrate`(`path`: String) =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_CoreCrypto_proteus_cryptobox_migrate(it, FfiConverterString.lower(`path`),  _status)
}
        }
    
    

    
}

public object FfiConverterTypeCoreCrypto: FfiConverter<CoreCrypto, Pointer> {
    override fun lower(value: CoreCrypto): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): CoreCrypto {
        return CoreCrypto(value)
    }

    override fun read(buf: ByteBuffer): CoreCrypto {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: CoreCrypto) = 8

    override fun write(value: CoreCrypto, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




data class CommitBundle (
    var `welcome`: List<UByte>?, 
    var `commit`: List<UByte>, 
    var `publicGroupState`: List<UByte>
) {
    
}

public object FfiConverterTypeCommitBundle: FfiConverterRustBuffer<CommitBundle> {
    override fun read(buf: ByteBuffer): CommitBundle {
        return CommitBundle(
            FfiConverterOptionalSequenceUByte.read(buf),
            FfiConverterSequenceUByte.read(buf),
            FfiConverterSequenceUByte.read(buf),
        )
    }

    override fun allocationSize(value: CommitBundle) = (
            FfiConverterOptionalSequenceUByte.allocationSize(value.`welcome`) +
            FfiConverterSequenceUByte.allocationSize(value.`commit`) +
            FfiConverterSequenceUByte.allocationSize(value.`publicGroupState`)
    )

    override fun write(value: CommitBundle, buf: ByteBuffer) {
            FfiConverterOptionalSequenceUByte.write(value.`welcome`, buf)
            FfiConverterSequenceUByte.write(value.`commit`, buf)
            FfiConverterSequenceUByte.write(value.`publicGroupState`, buf)
    }
}




data class ConversationConfiguration (
    var `admins`: List<MemberId>, 
    var `ciphersuite`: CiphersuiteName?, 
    var `keyRotationSpan`: java.time.Duration?, 
    var `externalSenders`: List<List<UByte>>
) {
    
}

public object FfiConverterTypeConversationConfiguration: FfiConverterRustBuffer<ConversationConfiguration> {
    override fun read(buf: ByteBuffer): ConversationConfiguration {
        return ConversationConfiguration(
            FfiConverterSequenceTypeMemberId.read(buf),
            FfiConverterOptionalTypeCiphersuiteName.read(buf),
            FfiConverterOptionalDuration.read(buf),
            FfiConverterSequenceSequenceUByte.read(buf),
        )
    }

    override fun allocationSize(value: ConversationConfiguration) = (
            FfiConverterSequenceTypeMemberId.allocationSize(value.`admins`) +
            FfiConverterOptionalTypeCiphersuiteName.allocationSize(value.`ciphersuite`) +
            FfiConverterOptionalDuration.allocationSize(value.`keyRotationSpan`) +
            FfiConverterSequenceSequenceUByte.allocationSize(value.`externalSenders`)
    )

    override fun write(value: ConversationConfiguration, buf: ByteBuffer) {
            FfiConverterSequenceTypeMemberId.write(value.`admins`, buf)
            FfiConverterOptionalTypeCiphersuiteName.write(value.`ciphersuite`, buf)
            FfiConverterOptionalDuration.write(value.`keyRotationSpan`, buf)
            FfiConverterSequenceSequenceUByte.write(value.`externalSenders`, buf)
    }
}




data class ConversationInitBundle (
    var `conversationId`: List<UByte>, 
    var `commit`: List<UByte>, 
    var `publicGroupState`: List<UByte>
) {
    
}

public object FfiConverterTypeConversationInitBundle: FfiConverterRustBuffer<ConversationInitBundle> {
    override fun read(buf: ByteBuffer): ConversationInitBundle {
        return ConversationInitBundle(
            FfiConverterSequenceUByte.read(buf),
            FfiConverterSequenceUByte.read(buf),
            FfiConverterSequenceUByte.read(buf),
        )
    }

    override fun allocationSize(value: ConversationInitBundle) = (
            FfiConverterSequenceUByte.allocationSize(value.`conversationId`) +
            FfiConverterSequenceUByte.allocationSize(value.`commit`) +
            FfiConverterSequenceUByte.allocationSize(value.`publicGroupState`)
    )

    override fun write(value: ConversationInitBundle, buf: ByteBuffer) {
            FfiConverterSequenceUByte.write(value.`conversationId`, buf)
            FfiConverterSequenceUByte.write(value.`commit`, buf)
            FfiConverterSequenceUByte.write(value.`publicGroupState`, buf)
    }
}




data class DecryptedMessage (
    var `message`: List<UByte>?, 
    var `proposals`: List<ProposalBundle>, 
    var `isActive`: Boolean, 
    var `commitDelay`: ULong?, 
    var `senderClientId`: ClientId?
) {
    
}

public object FfiConverterTypeDecryptedMessage: FfiConverterRustBuffer<DecryptedMessage> {
    override fun read(buf: ByteBuffer): DecryptedMessage {
        return DecryptedMessage(
            FfiConverterOptionalSequenceUByte.read(buf),
            FfiConverterSequenceTypeProposalBundle.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalTypeClientId.read(buf),
        )
    }

    override fun allocationSize(value: DecryptedMessage) = (
            FfiConverterOptionalSequenceUByte.allocationSize(value.`message`) +
            FfiConverterSequenceTypeProposalBundle.allocationSize(value.`proposals`) +
            FfiConverterBoolean.allocationSize(value.`isActive`) +
            FfiConverterOptionalULong.allocationSize(value.`commitDelay`) +
            FfiConverterOptionalTypeClientId.allocationSize(value.`senderClientId`)
    )

    override fun write(value: DecryptedMessage, buf: ByteBuffer) {
            FfiConverterOptionalSequenceUByte.write(value.`message`, buf)
            FfiConverterSequenceTypeProposalBundle.write(value.`proposals`, buf)
            FfiConverterBoolean.write(value.`isActive`, buf)
            FfiConverterOptionalULong.write(value.`commitDelay`, buf)
            FfiConverterOptionalTypeClientId.write(value.`senderClientId`, buf)
    }
}




data class Invitee (
    var `id`: ClientId, 
    var `kp`: List<UByte>
) {
    
}

public object FfiConverterTypeInvitee: FfiConverterRustBuffer<Invitee> {
    override fun read(buf: ByteBuffer): Invitee {
        return Invitee(
            FfiConverterTypeClientId.read(buf),
            FfiConverterSequenceUByte.read(buf),
        )
    }

    override fun allocationSize(value: Invitee) = (
            FfiConverterTypeClientId.allocationSize(value.`id`) +
            FfiConverterSequenceUByte.allocationSize(value.`kp`)
    )

    override fun write(value: Invitee, buf: ByteBuffer) {
            FfiConverterTypeClientId.write(value.`id`, buf)
            FfiConverterSequenceUByte.write(value.`kp`, buf)
    }
}




data class MemberAddedMessages (
    var `commit`: List<UByte>, 
    var `welcome`: List<UByte>, 
    var `publicGroupState`: List<UByte>
) {
    
}

public object FfiConverterTypeMemberAddedMessages: FfiConverterRustBuffer<MemberAddedMessages> {
    override fun read(buf: ByteBuffer): MemberAddedMessages {
        return MemberAddedMessages(
            FfiConverterSequenceUByte.read(buf),
            FfiConverterSequenceUByte.read(buf),
            FfiConverterSequenceUByte.read(buf),
        )
    }

    override fun allocationSize(value: MemberAddedMessages) = (
            FfiConverterSequenceUByte.allocationSize(value.`commit`) +
            FfiConverterSequenceUByte.allocationSize(value.`welcome`) +
            FfiConverterSequenceUByte.allocationSize(value.`publicGroupState`)
    )

    override fun write(value: MemberAddedMessages, buf: ByteBuffer) {
            FfiConverterSequenceUByte.write(value.`commit`, buf)
            FfiConverterSequenceUByte.write(value.`welcome`, buf)
            FfiConverterSequenceUByte.write(value.`publicGroupState`, buf)
    }
}




data class ProposalBundle (
    var `proposal`: List<UByte>, 
    var `proposalRef`: List<UByte>
) {
    
}

public object FfiConverterTypeProposalBundle: FfiConverterRustBuffer<ProposalBundle> {
    override fun read(buf: ByteBuffer): ProposalBundle {
        return ProposalBundle(
            FfiConverterSequenceUByte.read(buf),
            FfiConverterSequenceUByte.read(buf),
        )
    }

    override fun allocationSize(value: ProposalBundle) = (
            FfiConverterSequenceUByte.allocationSize(value.`proposal`) +
            FfiConverterSequenceUByte.allocationSize(value.`proposalRef`)
    )

    override fun write(value: ProposalBundle, buf: ByteBuffer) {
            FfiConverterSequenceUByte.write(value.`proposal`, buf)
            FfiConverterSequenceUByte.write(value.`proposalRef`, buf)
    }
}




enum class CiphersuiteName {
    MLS_128_DHKEMX25519_AES128GCM_SHA256_ED25519,MLS_128_DHKEMP256_AES128GCM_SHA256_P256,MLS_128_DHKEMX25519_CHACHA20POLY1305_SHA256_ED25519,MLS_256_DHKEMX448_AES256GCM_SHA512_ED448,MLS_256_DHKEMP521_AES256GCM_SHA512_P521,MLS_256_DHKEMX448_CHACHA20POLY1305_SHA512_ED448,MLS_256_DHKEMP384_AES256GCM_SHA384_P384;
}

public object FfiConverterTypeCiphersuiteName: FfiConverterRustBuffer<CiphersuiteName> {
    override fun read(buf: ByteBuffer) = try {
        CiphersuiteName.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: CiphersuiteName) = 4

    override fun write(value: CiphersuiteName, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}







sealed class CryptoException(message: String): Exception(message) {
        // Each variant is a nested class
        // Flat enums carries a string error message, so no special implementation is necessary.
        class ConversationNotFound(message: String) : CryptoException(message)
        class ClientNotFound(message: String) : CryptoException(message)
        class PendingProposalNotFound(message: String) : CryptoException(message)
        class PendingCommitNotFound(message: String) : CryptoException(message)
        class MalformedIdentifier(message: String) : CryptoException(message)
        class ClientSignatureNotFound(message: String) : CryptoException(message)
        class ClientSignatureMismatch(message: String) : CryptoException(message)
        class LockPoisonException(message: String) : CryptoException(message)
        class ImplementationException(message: String) : CryptoException(message)
        class OutOfKeyPackage(message: String) : CryptoException(message)
        class MlsProviderException(message: String) : CryptoException(message)
        class KeyStoreException(message: String) : CryptoException(message)
        class MlsException(message: String) : CryptoException(message)
        class Utf8Exception(message: String) : CryptoException(message)
        class StringUtf8Exception(message: String) : CryptoException(message)
        class ParseIntException(message: String) : CryptoException(message)
        class ConvertIntException(message: String) : CryptoException(message)
        class InvalidByteArrayException(message: String) : CryptoException(message)
        class IoException(message: String) : CryptoException(message)
        class Unauthorized(message: String) : CryptoException(message)
        class CallbacksNotSet(message: String) : CryptoException(message)
        class UnauthorizedExternalAddProposal(message: String) : CryptoException(message)
        class UnauthorizedExternalCommit(message: String) : CryptoException(message)
        class InvalidHashReference(message: String) : CryptoException(message)
        class GenerationOutOfBound(message: String) : CryptoException(message)
        class HexDecodeException(message: String) : CryptoException(message)
        class ProteusException(message: String) : CryptoException(message)
        class CryptoboxMigrationException(message: String) : CryptoException(message)
        class ProteusNotInitialized(message: String) : CryptoException(message)
        class ProteusSupportNotEnabled(message: String) : CryptoException(message)
        

    companion object ErrorHandler : CallStatusErrorHandler<CryptoException> {
        override fun lift(error_buf: RustBuffer.ByValue): CryptoException = FfiConverterTypeCryptoError.lift(error_buf)
    }
}

public object FfiConverterTypeCryptoError : FfiConverterRustBuffer<CryptoException> {
    override fun read(buf: ByteBuffer): CryptoException {
        
            return when(buf.getInt()) {
            1 -> CryptoException.ConversationNotFound(FfiConverterString.read(buf))
            2 -> CryptoException.ClientNotFound(FfiConverterString.read(buf))
            3 -> CryptoException.PendingProposalNotFound(FfiConverterString.read(buf))
            4 -> CryptoException.PendingCommitNotFound(FfiConverterString.read(buf))
            5 -> CryptoException.MalformedIdentifier(FfiConverterString.read(buf))
            6 -> CryptoException.ClientSignatureNotFound(FfiConverterString.read(buf))
            7 -> CryptoException.ClientSignatureMismatch(FfiConverterString.read(buf))
            8 -> CryptoException.LockPoisonException(FfiConverterString.read(buf))
            9 -> CryptoException.ImplementationException(FfiConverterString.read(buf))
            10 -> CryptoException.OutOfKeyPackage(FfiConverterString.read(buf))
            11 -> CryptoException.MlsProviderException(FfiConverterString.read(buf))
            12 -> CryptoException.KeyStoreException(FfiConverterString.read(buf))
            13 -> CryptoException.MlsException(FfiConverterString.read(buf))
            14 -> CryptoException.Utf8Exception(FfiConverterString.read(buf))
            15 -> CryptoException.StringUtf8Exception(FfiConverterString.read(buf))
            16 -> CryptoException.ParseIntException(FfiConverterString.read(buf))
            17 -> CryptoException.ConvertIntException(FfiConverterString.read(buf))
            18 -> CryptoException.InvalidByteArrayException(FfiConverterString.read(buf))
            19 -> CryptoException.IoException(FfiConverterString.read(buf))
            20 -> CryptoException.Unauthorized(FfiConverterString.read(buf))
            21 -> CryptoException.CallbacksNotSet(FfiConverterString.read(buf))
            22 -> CryptoException.UnauthorizedExternalAddProposal(FfiConverterString.read(buf))
            23 -> CryptoException.UnauthorizedExternalCommit(FfiConverterString.read(buf))
            24 -> CryptoException.InvalidHashReference(FfiConverterString.read(buf))
            25 -> CryptoException.GenerationOutOfBound(FfiConverterString.read(buf))
            26 -> CryptoException.HexDecodeException(FfiConverterString.read(buf))
            27 -> CryptoException.ProteusException(FfiConverterString.read(buf))
            28 -> CryptoException.CryptoboxMigrationException(FfiConverterString.read(buf))
            29 -> CryptoException.ProteusNotInitialized(FfiConverterString.read(buf))
            30 -> CryptoException.ProteusSupportNotEnabled(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
        
    }

    @Suppress("UNUSED_PARAMETER")
    override fun allocationSize(value: CryptoException): Int {
        throw RuntimeException("Writing Errors is not supported")
    }

    @Suppress("UNUSED_PARAMETER")
    override fun write(value: CryptoException, buf: ByteBuffer) {
        throw RuntimeException("Writing Errors is not supported")
    }

}




internal typealias Handle = Long
internal class ConcurrentHandleMap<T>(
    private val leftMap: MutableMap<Handle, T> = mutableMapOf(),
    private val rightMap: MutableMap<T, Handle> = mutableMapOf()
) {
    private val lock = java.util.concurrent.locks.ReentrantLock()
    private val currentHandle = AtomicLong(0L)
    private val stride = 1L

    fun insert(obj: T): Handle =
        lock.withLock {
            rightMap[obj] ?:
                currentHandle.getAndAdd(stride)
                    .also { handle ->
                        leftMap[handle] = obj
                        rightMap[obj] = handle
                    }
            }

    fun get(handle: Handle) = lock.withLock {
        leftMap[handle]
    }

    fun delete(handle: Handle) {
        this.remove(handle)
    }

    fun remove(handle: Handle): T? =
        lock.withLock {
            leftMap.remove(handle)?.let { obj ->
                rightMap.remove(obj)
                obj
            }
        }
}

interface ForeignCallback : com.sun.jna.Callback {
    public fun invoke(handle: Handle, method: Int, args: RustBuffer.ByValue, outBuf: RustBufferByReference): Int
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
internal const val IDX_CALLBACK_FREE = 0

public abstract class FfiConverterCallbackInterface<CallbackInterface>(
    protected val foreignCallback: ForeignCallback
): FfiConverter<CallbackInterface, Handle> {
    private val handleMap = ConcurrentHandleMap<CallbackInterface>()

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal abstract fun register(lib: _UniFFILib)

    fun drop(handle: Handle): RustBuffer.ByValue {
        return handleMap.remove(handle).let { RustBuffer.ByValue() }
    }

    override fun lift(value: Handle): CallbackInterface {
        return handleMap.get(value) ?: throw InternalException("No callback in handlemap; this is a Uniffi bug")
    }

    override fun read(buf: ByteBuffer) = lift(buf.getLong())

    override fun lower(value: CallbackInterface) =
        handleMap.insert(value).also {
            assert(handleMap.get(it) === value) { "Handle map is not returning the object we just placed there. This is a bug in the HandleMap." }
        }

    override fun allocationSize(value: CallbackInterface) = 8

    override fun write(value: CallbackInterface, buf: ByteBuffer) {
        buf.putLong(lower(value))
    }
}

// Declaration and FfiConverters for CoreCryptoCallbacks Callback Interface

public interface CoreCryptoCallbacks {
    fun `authorize`(`conversationId`: ConversationId, `clientId`: ClientId): Boolean
    fun `userAuthorize`(`conversationId`: ConversationId, `externalClientId`: ClientId, `existingClients`: List<ClientId>): Boolean
    fun `clientIsExistingGroupUser`(`clientId`: ClientId, `existingClients`: List<ClientId>): Boolean
    
}

// The ForeignCallback that is passed to Rust.
internal class ForeignCallbackTypeCoreCryptoCallbacks : ForeignCallback {
    @Suppress("TooGenericExceptionCaught")
    override fun invoke(handle: Handle, method: Int, args: RustBuffer.ByValue, outBuf: RustBufferByReference): Int {
        val cb = FfiConverterTypeCoreCryptoCallbacks.lift(handle)
        return when (method) {
            IDX_CALLBACK_FREE -> {
                FfiConverterTypeCoreCryptoCallbacks.drop(handle)
                // No return value.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                0
            }
            1 -> {
                val buffer = this.`invokeAuthorize`(cb, args)
                outBuf.setValue(buffer)
                // Value written to out buffer.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                1
            }
            2 -> {
                val buffer = this.`invokeUserAuthorize`(cb, args)
                outBuf.setValue(buffer)
                // Value written to out buffer.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                1
            }
            3 -> {
                val buffer = this.`invokeClientIsExistingGroupUser`(cb, args)
                outBuf.setValue(buffer)
                // Value written to out buffer.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                1
            }
            
            // This should never happen, because an out of bounds method index won't
            // ever be used. Once we can catch errors, we should return an InternalException.
            // https://github.com/mozilla/uniffi-rs/issues/351
            else -> {
                // An unexpected error happened.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                -1
            }
        }
    }

    
    private fun `invokeAuthorize`(kotlinCallbackInterface: CoreCryptoCallbacks, args: RustBuffer.ByValue): RustBuffer.ByValue =
        try {
            val buf = args.asByteBuffer() ?: throw InternalException("No ByteBuffer in RustBuffer; this is a Uniffi bug")
            kotlinCallbackInterface.`authorize`(
                    FfiConverterTypeConversationId.read(buf), 
                    FfiConverterTypeClientId.read(buf)
                    )
            .let {
                    FfiConverterBoolean.lowerIntoRustBuffer(it)
                }// TODO catch errors and report them back to Rust.
                // https://github.com/mozilla/uniffi-rs/issues/351
        } finally {
            RustBuffer.free(args)
        }

    
    private fun `invokeUserAuthorize`(kotlinCallbackInterface: CoreCryptoCallbacks, args: RustBuffer.ByValue): RustBuffer.ByValue =
        try {
            val buf = args.asByteBuffer() ?: throw InternalException("No ByteBuffer in RustBuffer; this is a Uniffi bug")
            kotlinCallbackInterface.`userAuthorize`(
                    FfiConverterTypeConversationId.read(buf), 
                    FfiConverterTypeClientId.read(buf), 
                    FfiConverterSequenceTypeClientId.read(buf)
                    )
            .let {
                    FfiConverterBoolean.lowerIntoRustBuffer(it)
                }// TODO catch errors and report them back to Rust.
                // https://github.com/mozilla/uniffi-rs/issues/351
        } finally {
            RustBuffer.free(args)
        }

    
    private fun `invokeClientIsExistingGroupUser`(kotlinCallbackInterface: CoreCryptoCallbacks, args: RustBuffer.ByValue): RustBuffer.ByValue =
        try {
            val buf = args.asByteBuffer() ?: throw InternalException("No ByteBuffer in RustBuffer; this is a Uniffi bug")
            kotlinCallbackInterface.`clientIsExistingGroupUser`(
                    FfiConverterTypeClientId.read(buf), 
                    FfiConverterSequenceTypeClientId.read(buf)
                    )
            .let {
                    FfiConverterBoolean.lowerIntoRustBuffer(it)
                }// TODO catch errors and report them back to Rust.
                // https://github.com/mozilla/uniffi-rs/issues/351
        } finally {
            RustBuffer.free(args)
        }

    
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
public object FfiConverterTypeCoreCryptoCallbacks: FfiConverterCallbackInterface<CoreCryptoCallbacks>(
    foreignCallback = ForeignCallbackTypeCoreCryptoCallbacks()
) {
    override fun register(lib: _UniFFILib) {
        rustCall() { status ->
            lib.ffi_CoreCrypto_24ee_CoreCryptoCallbacks_init_callback(this.foreignCallback, status)
        }
    }
}




public object FfiConverterOptionalULong: FfiConverterRustBuffer<ULong?> {
    override fun read(buf: ByteBuffer): ULong? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterULong.read(buf)
    }

    override fun allocationSize(value: ULong?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterULong.allocationSize(value)
        }
    }

    override fun write(value: ULong?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterULong.write(value, buf)
        }
    }
}




public object FfiConverterOptionalDuration: FfiConverterRustBuffer<java.time.Duration?> {
    override fun read(buf: ByteBuffer): java.time.Duration? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterDuration.read(buf)
    }

    override fun allocationSize(value: java.time.Duration?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterDuration.allocationSize(value)
        }
    }

    override fun write(value: java.time.Duration?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterDuration.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeCommitBundle: FfiConverterRustBuffer<CommitBundle?> {
    override fun read(buf: ByteBuffer): CommitBundle? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeCommitBundle.read(buf)
    }

    override fun allocationSize(value: CommitBundle?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeCommitBundle.allocationSize(value)
        }
    }

    override fun write(value: CommitBundle?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeCommitBundle.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeCiphersuiteName: FfiConverterRustBuffer<CiphersuiteName?> {
    override fun read(buf: ByteBuffer): CiphersuiteName? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeCiphersuiteName.read(buf)
    }

    override fun allocationSize(value: CiphersuiteName?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeCiphersuiteName.allocationSize(value)
        }
    }

    override fun write(value: CiphersuiteName?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeCiphersuiteName.write(value, buf)
        }
    }
}




public object FfiConverterOptionalSequenceUByte: FfiConverterRustBuffer<List<UByte>?> {
    override fun read(buf: ByteBuffer): List<UByte>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceUByte.read(buf)
    }

    override fun allocationSize(value: List<UByte>?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterSequenceUByte.allocationSize(value)
        }
    }

    override fun write(value: List<UByte>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceUByte.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeClientId: FfiConverterRustBuffer<ClientId?> {
    override fun read(buf: ByteBuffer): ClientId? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeClientId.read(buf)
    }

    override fun allocationSize(value: ClientId?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeClientId.allocationSize(value)
        }
    }

    override fun write(value: ClientId?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeClientId.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeTlsCommitBundle: FfiConverterRustBuffer<TlsCommitBundle?> {
    override fun read(buf: ByteBuffer): TlsCommitBundle? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeTlsCommitBundle.read(buf)
    }

    override fun allocationSize(value: TlsCommitBundle?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeTlsCommitBundle.allocationSize(value)
        }
    }

    override fun write(value: TlsCommitBundle?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeTlsCommitBundle.write(value, buf)
        }
    }
}




public object FfiConverterSequenceUByte: FfiConverterRustBuffer<List<UByte>> {
    override fun read(buf: ByteBuffer): List<UByte> {
        val len = buf.getInt()
        return List<UByte>(len) {
            FfiConverterUByte.read(buf)
        }
    }

    override fun allocationSize(value: List<UByte>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterUByte.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<UByte>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterUByte.write(it, buf)
        }
    }
}




public object FfiConverterSequenceString: FfiConverterRustBuffer<List<String>> {
    override fun read(buf: ByteBuffer): List<String> {
        val len = buf.getInt()
        return List<String>(len) {
            FfiConverterString.read(buf)
        }
    }

    override fun allocationSize(value: List<String>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterString.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterString.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeInvitee: FfiConverterRustBuffer<List<Invitee>> {
    override fun read(buf: ByteBuffer): List<Invitee> {
        val len = buf.getInt()
        return List<Invitee>(len) {
            FfiConverterTypeInvitee.read(buf)
        }
    }

    override fun allocationSize(value: List<Invitee>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeInvitee.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Invitee>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeInvitee.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeProposalBundle: FfiConverterRustBuffer<List<ProposalBundle>> {
    override fun read(buf: ByteBuffer): List<ProposalBundle> {
        val len = buf.getInt()
        return List<ProposalBundle>(len) {
            FfiConverterTypeProposalBundle.read(buf)
        }
    }

    override fun allocationSize(value: List<ProposalBundle>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeProposalBundle.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<ProposalBundle>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeProposalBundle.write(it, buf)
        }
    }
}




public object FfiConverterSequenceSequenceUByte: FfiConverterRustBuffer<List<List<UByte>>> {
    override fun read(buf: ByteBuffer): List<List<UByte>> {
        val len = buf.getInt()
        return List<List<UByte>>(len) {
            FfiConverterSequenceUByte.read(buf)
        }
    }

    override fun allocationSize(value: List<List<UByte>>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterSequenceUByte.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<List<UByte>>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterSequenceUByte.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeClientId: FfiConverterRustBuffer<List<ClientId>> {
    override fun read(buf: ByteBuffer): List<ClientId> {
        val len = buf.getInt()
        return List<ClientId>(len) {
            FfiConverterTypeClientId.read(buf)
        }
    }

    override fun allocationSize(value: List<ClientId>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeClientId.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<ClientId>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeClientId.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeMemberId: FfiConverterRustBuffer<List<MemberId>> {
    override fun read(buf: ByteBuffer): List<MemberId> {
        val len = buf.getInt()
        return List<MemberId>(len) {
            FfiConverterTypeMemberId.read(buf)
        }
    }

    override fun allocationSize(value: List<MemberId>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeMemberId.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<MemberId>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeMemberId.write(it, buf)
        }
    }
}



public object FfiConverterMapStringListUByte: FfiConverterRustBuffer<Map<String, List<UByte>>> {
    override fun read(buf: ByteBuffer): Map<String, List<UByte>> {
        // TODO: Once Kotlin's `buildMap` API is stabilized we should use it here.
        val items : MutableMap<String, List<UByte>> = mutableMapOf()
        val len = buf.getInt()
        repeat(len) {
            val k = FfiConverterString.read(buf)
            val v = FfiConverterSequenceUByte.read(buf)
            items[k] = v
        }
        return items
    }

    override fun allocationSize(value: Map<String, List<UByte>>): Int {
        val spaceForMapSize = 4
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
            FfiConverterSequenceUByte.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<String, List<UByte>>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterSequenceUByte.write(v, buf)
        }
    }
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 * It's also what we have an external type that references a custom type.
 */
public typealias ClientId = List<UByte>
public typealias FfiConverterTypeClientId = FfiConverterSequenceUByte



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 * It's also what we have an external type that references a custom type.
 */
public typealias ConversationId = List<UByte>
public typealias FfiConverterTypeConversationId = FfiConverterSequenceUByte



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 * It's also what we have an external type that references a custom type.
 */
public typealias MemberId = List<UByte>
public typealias FfiConverterTypeMemberId = FfiConverterSequenceUByte



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 * It's also what we have an external type that references a custom type.
 */
public typealias TlsCommitBundle = List<UByte>
public typealias FfiConverterTypeTlsCommitBundle = FfiConverterSequenceUByte
@Throws(CryptoException::class)

fun `initWithPathAndKey`(`path`: String, `key`: String, `clientId`: String, `entropySeed`: List<UByte>?): CoreCrypto {
    return FfiConverterTypeCoreCrypto.lift(
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_init_with_path_and_key(FfiConverterString.lower(`path`), FfiConverterString.lower(`key`), FfiConverterString.lower(`clientId`), FfiConverterOptionalSequenceUByte.lower(`entropySeed`), _status)
})
}



fun `version`(): String {
    return FfiConverterString.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_24ee_version( _status)
})
}




