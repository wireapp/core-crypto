[Custom]
typedef sequence<u8> ConversationId;

[Custom]
typedef sequence<u8> MemberId;

[Custom]
typedef sequence<u8> ClientId;

enum CiphersuiteName {
    "MLS_128_DHKEMX25519_AES128GCM_SHA256_Ed25519",
    "MLS_128_DHKEMP256_AES128GCM_SHA256_P256",
    "MLS_128_DHKEMX25519_CHACHA20POLY1305_SHA256_Ed25519",
    "MLS_256_DHKEMX448_AES256GCM_SHA512_Ed448",
    "MLS_256_DHKEMP521_AES256GCM_SHA512_P521",
    "MLS_256_DHKEMX448_CHACHA20POLY1305_SHA512_Ed448",
    "MLS_256_DHKEMP384_AES256GCM_SHA384_P384"
};

[Error]
enum CryptoError {
    "ConversationNotFound",
    "ClientNotFound",
    "MalformedIdentifier",
    "KeyStoreError",
    "ClientSignatureNotFound",
    "OutOfKeyPackage",
    "LockPoisonError",
    "ConversationConfigurationError",
    "CentralConfigurationError",
    "MlsError",
    "UuidError",
    "Utf8Error",
    "StringUtf8Error",
    "ParseIntError",
    "IoError",
    "Unauthorized",
    "Other"
};

dictionary MemberAddedMessages {
    sequence<u8> message;
    sequence<u8> welcome;
};

dictionary Invitee {
    ClientId id;
    sequence<u8> kp;
};

dictionary ConversationConfiguration {
    sequence<Invitee> extra_members;
    sequence<MemberId> admins;
    CiphersuiteName? ciphersuite;
    duration? key_rotation_span;
};

callback interface CoreCryptoCallbacks {
    boolean authorize([ByRef] sequence<u8> conversation_id, [ByRef] string client_id);
};

interface CoreCrypto {
    [Throws=CryptoError, Name=new]
    constructor([ByRef] string path, [ByRef] string key, [ByRef] string client_id);

    [Throws=CryptoError]
    void set_callbacks(CoreCryptoCallbacks callbacks);

    [Throws=CryptoError]
    sequence<u8> client_public_key();

    [Throws=CryptoError]
    sequence<sequence<u8>> client_keypackages(u32 amount_requested);

    [Throws=CryptoError]
    MemberAddedMessages? create_conversation(ConversationId conversation_id, ConversationConfiguration config);

    boolean conversation_exists(ConversationId conversation_id);

    [Throws=CryptoError]
    ConversationId process_welcome_message([ByRef] sequence<u8> welcome_message, ConversationConfiguration config);

    [Throws=CryptoError]
    MemberAddedMessages? add_clients_to_conversation(ConversationId conversation_id, sequence<Invitee> clients);

    [Throws=CryptoError]
    sequence<u8>? remove_clients_from_conversation(ConversationId conversation_id, sequence<Invitee> clients);

    [Throws=CryptoError]
    sequence<u8>? decrypt_message(ConversationId conversation_id, [ByRef] sequence<u8> payload);

    [Throws=CryptoError]
    sequence<u8> encrypt_message(ConversationId conversation_id, [ByRef] sequence<u8> message);

    [Throws=CryptoError]
    sequence<u8> new_add_proposal(ConversationId conversation_id, sequence<u8> key_package);

    [Throws=CryptoError]
    sequence<u8> new_update_proposal(ConversationId conversation_id);

    [Throws=CryptoError]
    sequence<u8> new_remove_proposal(ConversationId conversation_id, ClientId client_id);
};

namespace CoreCrypto {
    [Throws=CryptoError]
    CoreCrypto init_with_path_and_key([ByRef] string path, [ByRef] string key, [ByRef] string client_id);

    string version();
};
