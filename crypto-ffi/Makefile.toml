[tasks.clean]
command = "cargo"
args = ["clean"]

[tasks.test]
command = "cargo"
args = ["test"]
dependencies = ["clean"]

[tasks.check]
command = "cargo"
args = ["check"]

##################################### DOCS ####################################

[tasks.docs-rust-generic]
command = "cargo"
args = ["doc", "--no-deps"]

# [tasks.docs-kotlin]
# TODO:

[tasks.docs-rust-wasm]
command = "cargo"
args = ["doc", "--no-deps", "--target=wasm32-unknown-unknown"]

[tasks.npm-deps]
command = "npm"
args = ["install"]

[tasks.docs-ts]
dependencies = ["npm-deps"]
command = "npx"
args = [
    "-y", "typedoc",
    "--basePath", "./bindings/js",
    "--entryPoints", "./bindings/js/CoreCrypto.ts",
    "--tsconfig", "./bindings/js/tsconfig.json",
    "--out", "../target/doc/core_crypto_ffi/bindings/typescript"
]

# TODO: create docs for WASM AND Generic

##################################### WASM ####################################

[tasks.wasm-build]
command = "wasm-pack"
args = [
    "build",
    "--out-dir", "bindings/js/wasm",
    "--out-name", "core-crypto-ffi",
    "--mode", "normal", "${@}"
]

[tasks.wasm]
dependencies = ["wasm-build"]
command = "npm"
args = ["run", "build"]

##################################### iOS #####################################

[tasks.ios-env]
plugin = "detect-release"

[tasks.ios-device]
command = "cargo"
args = ["build", "--target", "aarch64-apple-ios", "--features", "mobile", "--release"]

[tasks.ios-simulator-x86]
command = "cargo"
args = ["build", "--target", "x86_64-apple-ios", "--features", "mobile", "--release"]

[tasks.ios-simulator-arm]
command = "cargo"
args = ["build", "--target", "aarch64-apple-ios-sim", "--features", "mobile", "--release"]

[tasks.ios]
dependencies = ["ios-device", "ios-simulator-x86"]

[tasks.ios-test-sim-build]
script = '''
    cd bindings/swift

    swift build
'''
dependencies = ["create-swift-package"]

[tasks.create-swift-package]
script = '''
    cd bindings/swift

    lipo -create -output ./lib/libcore_crypto_ffi.a \
        ../../../target/x86_64-apple-ios/release/libcore_crypto_ffi.a \
        ../../../target/aarch64-apple-ios/release/libcore_crypto_ffi.a
'''
dependencies = ["ios"]

################################### Android ###################################

[tasks.android-env]
plugin = "android-env"

[tasks.android-armv7]
command = "cargo"
args = ["build", "--target", "armv7-linux-androideabi", "--features", "mobile", "--release", "${@}"]
dependencies = ["android-env"]

[tasks.android-armv8]
command = "cargo"
args = ["build", "--target", "aarch64-linux-android", "--features", "mobile", "--release", "${@}"]
dependencies = ["android-env"]

[tasks.android-x86]
command = "cargo"
args = ["build", "--target", "x86_64-linux-android", "--features", "mobile", "--release", "${@}"]
dependencies = ["android-env"]

[tasks.android-i686]
command = "cargo"
args = ["build", "--target", "i686-linux-android", "--features", "mobile", "--release", "${@}"]
dependencies = ["android-env"]

[tasks.android]
dependencies = ["android-armv7", "android-armv8", "android-x86", "android-i686"]

[tasks.setup-sample-project]
dependencies = ["android"]
script_runner = "@duckscript"
script = '''
handle = map
map_put ${handle} "i686-linux-android" "x86"
map_put ${handle} "x86_64-linux-android" "x86_64"
map_put ${handle} "aarch64-linux-android" "arm64-v8a"
map_put ${handle} "armv7-linux-androideabi" "armeabi-v7a"
keys = map_keys ${handle}
libname = set "libcore_crypto_ffi.so"
for rust_target in ${keys}
    android_target = map_get ${handle} ${rust_target}
    println -c bright_blue "cp rust-${rust_target}/${libname} -> android-jniLibs/${android_target}/${libname}"
    from = canonicalize "../target/${rust_target}/debug/${libname}"
    to = canonicalize "../sample-projects/android/CoreCryptoTestApp/app/src/main/jniLibs/${android_target}/${libname}"
    mkdir dirname ${to}
    cp ${from} ${to}
end

println -c bright_blue "cp ./bindings/kt/com/wire/crypto/CoreCrypto.kt -> ../sample-projects/android/CoreCryptoTestApp/app/src/main/java/com/wire/core/CoreCrypto.kt"
from = canonicalize "./bindings/kt/com/wire/crypto/CoreCrypto.kt"
to = canonicalize "../sample-projects/android/CoreCryptoTestApp/app/src/main/java/com/wire/crypto/CoreCrypto.kt"
cp ${from} ${to}
'''

[tasks.copy-android-resources]
dependencies = ["android"]
script_runner = "@duckscript"
script = '''
handle = map
map_put ${handle} "i686-linux-android" "x86"
map_put ${handle} "x86_64-linux-android" "x86_64"
map_put ${handle} "aarch64-linux-android" "arm64-v8a"
map_put ${handle} "armv7-linux-androideabi" "armeabi-v7a"
keys = map_keys ${handle}
libname = set "libcore_crypto_ffi.so"
for rust_target in ${keys}
    android_target = map_get ${handle} ${rust_target}
    println -c bright_blue "cp rust-${rust_target}/${libname} -> android-jniLibs/${android_target}/${libname}"
    from = canonicalize "../target/${rust_target}/release/${libname}"
    to = canonicalize "../kotlin/android/src/main/jniLibs/${android_target}/${libname}"
    mkdir dirname ${to}
    cp ${from} ${to}
end

println -c bright_blue "cp ./bindings/kt/com/wire/crypto/CoreCrypto.kt -> ../kotlin/android/src/main/java/com/wire/crypto/CoreCrypto.kt"
from = canonicalize "./bindings/kt/com/wire/crypto/CoreCrypto.kt"
to = canonicalize "../kotlin/android/src/main/kotlin/com/wire/crypto/CoreCrypto.kt"
cp ${from} ${to}
'''

####################################  JVM  ####################################

[tasks.jvm-x86-darwin]
command = "cargo"
args = ["build", "--target", "x86_64-apple-darwin", "--features", "mobile", "--release", "${@}"]

[tasks.jvm-aarch64-darwin]
command = "cargo"
args = ["build", "--target", "aarch64-apple-darwin", "--features", "mobile", "--release", "${@}"]

[tasks.jvm-x86-linux]
command = "cargo"
args = ["build", "--target", "x86_64-unknown-linux-gnu", "--features", "mobile", "--release", "${@}"]

[tasks.jvm]
dependencies = ["jvm-aarch64-darwin", "jvm-x86-darwin", "jvm-x86-linux"]

[tasks.copy-jvm-resources]
dependencies = ["jvm"]
script_runner = "@duckscript"
script = '''
handle = map
map_put ${handle} "x86_64-apple-darwin" "darwin-x86-64"
map_put ${handle} "aarch64-apple-darwin" "darwin-aarch64"
map_put ${handle} "x86_64-unknown-linux-gnu" "linux-x86-64"
lib_handle = map
map_put ${lib_handle} "x86_64-apple-darwin" "libcore_crypto_ffi.dylib"
map_put ${lib_handle} "aarch64-apple-darwin" "libcore_crypto_ffi.dylib"
map_put ${lib_handle} "x86_64-unknown-linux-gnu" "libcore_crypto_ffi.so"
keys = map_keys ${handle}
for rust_target in ${keys}
    jvm_target = map_get ${handle} ${rust_target}
    libname = map_get ${lib_handle} ${rust_target}
    println -c bright_blue "cp rust-${rust_target}/${libname} -> resources/${jvm_target}/${libname}"
    from = canonicalize "../target/${rust_target}/release/${libname}"
    to = canonicalize "../kotlin/jvm/src/main/resources/${jvm_target}/${libname}"
    mkdir dirname ${to}
    cp ${from} ${to}
end

println -c bright_blue "cp ./bindings/kt/com/wire/crypto/CoreCrypto.kt -> ../kotlin/jvm/src/main/kotlin/com/wire/crypto/CoreCrypto.kt"
from = canonicalize "./bindings/kt/com/wire/crypto/CoreCrypto.kt"
to = canonicalize "../kotlin/jvm/src/main/kotlin/com/wire/crypto/CoreCrypto.kt"
cp ${from} ${to}
'''

#################################### Mobile ###################################
[tasks.mobile]
dependencies = ["android", "ios"]

####################################  all  ####################################
[tasks.all]
dependencies = ["mobile", "wasm"]

################################### Plugins ###################################
[plugins.impl.detect-release]
script = '''
index = array_contains ${task.args} "--release"
if index
    set_env IS_RELEASE_BUILD "release"
    println -c bright_blue "Release mode detected!"
end

release_path = set IS_RELEASE_BUILD or "debug"

# index_target = array_contains ${task.args} "--target"
# if index_target
#     target = array_get ${task.args} ${${index_target} + 1}
#     set_env CORECRYPTO_TARGET_FOLDER "../target/${target}/${release_path}"
# else
#     set_env CORECRYPTO_TARGET_FOLDER "../target/${release_path}"
# end
'''

[plugins.impl.android-env]
script = '''
exit_on_error true

fn update_android_env
    platform = os_family
    if eq ${platform} "windows"
        platform_dir = set "windows-x86_64"
    elseif eq ${platform} "linux"
        platform_dir = set "linux-x86_64"
    elseif eq ${platform} "mac"
        platform_dir = set "darwin-x86_64"
    else
        trigger_error "Unsupported host platform"
    end

    android_ndk_path = set "${1}/toolchains/llvm/prebuilt/${platform_dir}/bin"
    new_path = set "${PATH}:${android_ndk_path}"
    print -c bright_blue "Updating PATH to include ${android_ndk_path}\n"
    set_env PATH "${new_path}"
end

fn autodetect_android_env
    if not is_empty ${ANDROID_NDK_HOME}
        return ${ANDROID_NDK_HOME}
    elseif not is_empty ${NDK_HOME}
        return ${NDK_HOME}
    else
        platform = os_family
        if eq ${platform} "windows"
            platform_dir = set "${get_home_dir}/AppData/Local"
        elseif eq ${platform} "linux"
            platform_dir = get_home_dir
        elseif eq ${platform} "mac"
            platform_dir = set "${get_home_dir}/Library"
        else
            trigger_error "Unsupported host platform"
        end

        ndk_versions_hwnd = glob_array "${platform_dir}/Android/Sdk/ndk/*"
        for path in ${ndk_versions_hwnd}
            ndk_latest_version = set ${path}
        end
        print -c bright_blue "Autodetected NDK: host:${platform} @ v${ndk_latest_version}\n"
        return ${ndk_latest_version}
    end
end

if starts_with ${task.name} "android"
    ndk_home_dir = autodetect_android_env
    print -c bright_blue "NDK Home Dir: ${ndk_home_dir}\n"
    if is_empty ${ndk_home_dir}
        trigger_error "$ANDROID_NDK_HOME/$NDK_HOME haven't been set and/or NDK couldn't be found in the Android Studio directories.\nPlease set it correctly to target your NDK installation"
    else
        update_android_env ${ndk_home_dir}
    end
end
'''
