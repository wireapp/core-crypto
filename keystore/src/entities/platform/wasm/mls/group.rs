use crate::{
    CryptoKeystoreResult, MissingKeyErrorKind,
    connection::KeystoreDatabaseConnection,
    entities::{
        Entity, EntityBase, EntityFindParams, EntityTransactionExt, PersistedMlsGroup, PersistedMlsGroupExt,
        PersistedMlsPendingGroup, StringEntityId,
    },
    transaction::dynamic_dispatch::EntityId,
};

#[async_trait::async_trait(?Send)]
impl PersistedMlsGroupExt for PersistedMlsGroup {
    fn parent_id(&self) -> Option<&[u8]> {
        self.parent_id.as_deref()
    }
}

#[async_trait::async_trait(?Send)]
impl EntityBase for PersistedMlsPendingGroup {
    type ConnectionType = KeystoreDatabaseConnection;
    type AutoGeneratedFields = ();
    const COLLECTION_NAME: &'static str = "mls_pending_groups";

    fn to_missing_key_err_kind() -> MissingKeyErrorKind {
        MissingKeyErrorKind::MlsPendingGroup
    }

    fn to_transaction_entity(self) -> crate::transaction::dynamic_dispatch::Entity {
        crate::transaction::dynamic_dispatch::Entity::PersistedMlsPendingGroup(self)
    }
}

#[async_trait::async_trait(?Send)]
impl EntityTransactionExt for PersistedMlsPendingGroup {}

#[async_trait::async_trait(?Send)]
impl Entity for PersistedMlsPendingGroup {
    fn id_raw(&self) -> impl std::convert::AsRef<[u8]> {
        self.id.as_slice()
    }

    async fn find_all(conn: &mut Self::ConnectionType, params: EntityFindParams) -> CryptoKeystoreResult<Vec<Self>> {
        let storage = conn.storage();
        storage.get_all(Self::COLLECTION_NAME, Some(params)).await
    }

    async fn find_one(conn: &mut Self::ConnectionType, id: &EntityId) -> crate::CryptoKeystoreResult<Option<Self>> {
        conn.storage().get(id.collection_name(), id.as_id().to_bytes()).await
    }

    async fn find_many(conn: &mut Self::ConnectionType, _ids: &[EntityId]) -> crate::CryptoKeystoreResult<Vec<Self>> {
        // Plot twist: we always select ALL the persisted groups. Unsure if we want to make it a real API with selection
        conn.storage().get_all(Self::COLLECTION_NAME, None).await
    }

    async fn count(conn: &mut Self::ConnectionType) -> crate::CryptoKeystoreResult<usize> {
        conn.storage().count(Self::COLLECTION_NAME).await
    }

    fn id(&self) -> CryptoKeystoreResult<wasm_bindgen::JsValue> {
        Ok(js_sys::Uint8Array::from(self.id.as_slice()).into())
    }

    fn encrypt(&mut self, cipher: &aes_gcm::Aes256Gcm) -> CryptoKeystoreResult<()> {
        self.state = self.encrypt_data(cipher, self.state.as_slice())?;

        Ok(())
    }

    fn decrypt(&mut self, cipher: &aes_gcm::Aes256Gcm) -> CryptoKeystoreResult<()> {
        self.state = self.decrypt_data(cipher, self.state.as_slice())?;

        Ok(())
    }
}
