# FIXME: This breaks rust-analyzer
# [registries.crates-io]
# protocol = "sparse"

[env]
# Android build flags
# ? RANLIB flags are now needed because this https://github.com/alexcrichton/openssl-src-rs/pull/180 breaks everything
CC_armv7-linux-androideabi = "armv7a-linux-androideabi24-clang"
CXX_armv7-linux-androideabi = "armv7a-linux-androideabi24-clang++"
AR_armv7-linux-androideabi = "llvm-ar"
RANLIB_armv7-linux-androideabi = "llvm-ranlib"
CC_aarch64-linux-android = "aarch64-linux-android24-clang"
CXX_aarch64-linux-android = "aarch64-linux-android24-clang++"
AR_aarch64-linux-android = "llvm-ar"
RANLIB_aarch64-linux-android = "llvm-ranlib"
CC_x86_64-linux-android = "x86_64-linux-android24-clang"
CXX_x86_64-linux-android = "x86_64-linux-android24-clang++"
AR_x86_64-linux-android = "llvm-ar"
RANLIB_x86_64-linux-android = "llvm-ranlib"
CC_i686-linux-android = "i686-linux-android24-clang"
CXX_i686-linux-android = "i686-linux-android24-clang++"
AR_i686-linux-android = "llvm-ar"
RANLIB_i686-linux-android = "llvm-ranlib"
# ? Ring treats warnings as errors during local development by detecting
# ? the presence of a `.git` folder
# ? With us having a git dependency to ring, this triggers this local development behavior, preventing
# ? release builds on certain platforms. Gotta love build systems that are "UB as a service"
# TODO: Remove this once we target a crates.io version of ring. Probably never!
CFLAGS="-Wno-error=inline"

[unstable]
build-std = ["std", "panic_abort"]

[alias]
xtask = "run --manifest-path ./xtask/Cargo.toml --"

[target.wasm32-unknown-unknown]
runner = [
    "cargo", "run",
    "--bin", "wasm-browser-test-runner",
    "--manifest-path", "../extras/wasm-browser-test-runner/Cargo.toml",
    "--",
    "--no-bidi",
    "--webdriver=chrome",
    "--timeout=600"
]
# rustflags = "-C target-feature=+atomics,+bulk-memory,+mutable-globals"

# Android linkage
[target.armv7-linux-androideabi]
ar = "llvm-ar"
linker = "armv7a-linux-androideabi24-clang"
rustflags = [
    "-C", "link-args=-Lsupport/android",
    "-C", "target_feature=+neon"
]

[target.aarch64-linux-android]
ar = "llvm-ar"
linker = "aarch64-linux-android24-clang"
rustflags = [
    "-C", "link-args=-Lsupport/android"
]

[target.x86_64-linux-android]
ar = "llvm-ar"
linker = "x86_64-linux-android24-clang"
rustflags = [
    "-C", "link-args=-Lsupport/android"
]

[target.i686-linux-android]
ar = "llvm-ar"
linker = "i686-linux-android24-clang"
rustflags = [
    "-C", "link-args=-Lsupport/android"
]
