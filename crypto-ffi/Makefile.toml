[env]
ANDROID_NDK_PREFER_VERSION = "25.2"
LIBRARY_EXTENSION = { source = "${CARGO_MAKE_RUST_TARGET_OS}", mapping = { "linux" = "so", "macos" = "dylib" } }

##################################### DOCS ####################################

[tasks.docs-rust-generic]
command = "cargo"
args = ["doc", "--no-deps"]

[tasks.docs-kotlin]
dependencies = [
    { name = "jvm-darwin", condition = { platforms = ["mac"] } },
    { name = "jvm-linux", condition = { platforms = ["linux"] } }
]
script = '''
  cd bindings
  ./gradlew android:dokkaHtml
  cd -
  mkdir -p ../target/doc/core_crypto_ffi/bindings/kotlin
  cp -R bindings/android/build/dokka/html/ ../target/doc/core_crypto_ffi/bindings/kotlin
'''

[tasks.docs-rust-wasm]
command = "cargo"
args = ["doc", "--no-deps", "--target=wasm32-unknown-unknown"]

[tasks.bun-deps]
command = "bun"
args = ["install", "--cwd", "bindings/js"]

[tasks.docs-ts]
dependencies = ["wasm", "bun-deps"]
command = "bunx"
args = [
    "typedoc",
    "--basePath", "./bindings/js",
    "--entryPoints", "./bindings/js/src/CoreCrypto.ts",
    "--tsconfig", "./bindings/js/tsconfig.json",
    "--out", "../target/doc/core_crypto_ffi/bindings/typescript"
]

##################################### WASM ####################################

[tasks.wasm-build]
command = "wasm-pack"
args = [
    "build",
    "--locked",
    "--no-pack",
    "--out-dir", "bindings/js/src",
    "--out-name", "core-crypto-ffi",
    "--mode", "normal",
    "--target", "web",
    "${@}"
]

[tasks.wasm]
dependencies = ["wasm-build", "bun-deps"]
command = "bun"
args = ["run", "--cwd", "bindings/js", "build"]

##################################### FFI #####################################

[tasks.bindings-swift]
command = "cargo"
args = [
    "run",
    "--locked",
    "--release",
    "--features", "uniffi/cli",
    "--bin", "uniffi-bindgen",
    "generate",
    "--language", "swift",
    "--out-dir", "./bindings/swift/WireCoreCryptoUniffi/WireCoreCryptoUniffi",
    "--library", "../target/release/deps/libcore_crypto_ffi.${LIBRARY_EXTENSION}"
]

[tasks.bindings-kotlin-android]
command = "cargo"
args = [
    "run",
    "--locked",
    "--release",
    "--features", "uniffi/cli",
    "--bin", "uniffi-bindgen",
    "generate",
    "--config", "uniffi-android.toml",
    "--language", "kotlin",
    "--out-dir", "./bindings/uniffi-android/src/main/kotlin/",
    "--library", "../target/release/deps/libcore_crypto_ffi.${LIBRARY_EXTENSION}"
]

[tasks.bindings-kotlin-jvm]
command = "cargo"
args = [
    "run",
    "--locked",
    "--release",
    "--features", "uniffi/cli",
    "--bin", "uniffi-bindgen",
    "generate",
    "--language", "kotlin",
    "--out-dir", "./bindings/uniffi-jvm/src/main/kotlin/",
    "--library", "../target/release/deps/libcore_crypto_ffi.${LIBRARY_EXTENSION}"
]

[tasks.bindings-kotlin]
dependencies = ["bindings-kotlin-android", "bindings-kotlin-jvm"]

[tasks.bindings]
dependencies = ["bindings-swift", "bindings-kotlin"]

##################################### iOS #####################################
[tasks.ios-device]
dependencies = ["bindings-swift"]
env = { "IPHONEOS_DEPLOYMENT_TARGET"="16.0" }
condition = { platforms = ["mac"] }
command = "cargo"
args = [
    "rustc",
    "--locked",
    "--target", "aarch64-apple-ios",
    "--crate-type=cdylib",
    "--crate-type=staticlib",
    "--release",
    "--",
    "-C", "strip=symbols"
]

[tasks.ios-simulator-x86]
dependencies = ["bindings-swift"]
condition = { platforms = ["mac"] }
command = "cargo"
args = [
    "rustc",
    "--locked",
    "--target", "x86_64-apple-ios",
    "--crate-type=cdylib",
    "--crate-type=staticlib",
    "--release",
    "--",
    "-C", "strip=symbols"
]

[tasks.ios-simulator-arm]
dependencies = ["bindings-swift"]
# override CFLAGS to fix ring compilation
env = { "CRATE_CC_NO_DEFAULTS" = 1, "TARGET_CFLAGS" = { script = ["echo \"--target=arm64-apple-ios14.0.0-simulator -mios-simulator-version-min=14.0 -isysroot `xcrun --show-sdk-path --sdk iphonesimulator`\""] } }
condition = { platforms = ["mac"] }
command = "cargo"
args = [
    "rustc",
    "--locked",
    "--target", "aarch64-apple-ios-sim",
    "--crate-type=cdylib",
    "--crate-type=staticlib",
    "--release",
    "--",
    "-C", "strip=symbols"
]

[tasks.ios]
condition = { platforms = ["mac"] }
dependencies = ["ios-device", "ios-simulator-x86", "ios-simulator-arm"]

[tasks.ios-create-xcframework]
condition = { platforms = ["mac"] }
script = '''
    cd bindings/swift

    ./build-xcframework.sh
'''
dependencies = ["ios"]

################################### Android ###################################

[tasks.android-env]
plugin = "android-env"

[tasks.android-armv7]
command = "cargo"
args = [
    "rustc",
    "--locked",
    "--target", "armv7-linux-androideabi",
    "--crate-type=cdylib",
    "--crate-type=staticlib",
    "--release",
    "--",
    "-C", "strip=symbols"
]
dependencies = ["android-env"]

[tasks.android-armv8]
command = "cargo"
args = [
    "rustc",
    "--locked",
    "--target", "aarch64-linux-android",
    "--crate-type=cdylib",
    "--crate-type=staticlib",
    "--release",
    "--",
    "-C", "strip=symbols"
]
dependencies = ["android-env"]

[tasks.android-x86]
command = "cargo"
args = [
    "rustc",
    "--locked",
    "--target", "x86_64-linux-android",
    "--crate-type=cdylib",
    "--crate-type=staticlib",
    "--release",
    "--",
    "-C", "strip=symbols",
    "-l", "static=clang_rt.builtins-x86_64-android",
    "-L", "${CLANG_RT_DIR}"
]
dependencies = ["android-env"]

[tasks.android]
dependencies = ["android-armv7", "android-armv8", "android-x86"]

####################################  JVM  ####################################

[tasks.jvm-x86-darwin]
command = "cargo"
args = [
    "rustc",
    "--locked",
    "--target", "x86_64-apple-darwin",
    "--crate-type=cdylib",
    "--crate-type=staticlib",
    "--release",
    "--",
    "-C", "strip=symbols"
]
dependencies = ["bindings-kotlin-jvm"]
condition = { platforms = ["mac"] }

[tasks.jvm-aarch64-darwin]
command = "cargo"
args = [
    "rustc",
    "--locked",
    "--target", "aarch64-apple-darwin",
    "--crate-type=cdylib",
    "--crate-type=staticlib",
    "--release",
    "--",
    "-C", "strip=symbols"
]
dependencies = ["bindings-kotlin-jvm"]
condition = { platforms = ["mac"] }

[tasks.jvm-linux]
command = "cargo"
args = [
    "rustc",
    "--locked",
    "--target", "x86_64-unknown-linux-gnu",
    "--crate-type=cdylib",
    "--crate-type=staticlib",
    "--release",
    "--",
    "-C", "strip=symbols"
]
dependencies = ["bindings-kotlin-jvm"]
condition = { platforms = ["linux"] }

[tasks.jvm-darwin]
dependencies = ["jvm-aarch64-darwin", "jvm-x86-darwin"]

[tasks.jvm]
dependencies = ["jvm-darwin", "jvm-linux"]

#################################### Mobile ###################################
[tasks.mobile]
dependencies = ["android", "ios"]

####################################  all  ####################################
[tasks.all]
dependencies = ["mobile", "wasm"]

################################### Plugins ###################################
[plugins.impl.android-env]
script = '''
exit_on_error true

fn update_android_env
    platform = os_family
    if eq ${platform} "linux"
        platform_dir = set "linux-x86_64"
    elseif eq ${platform} "mac"
        platform_dir = set "darwin-x86_64"
    else
        trigger_error "Unsupported host platform"
    end

    base_ndk_path = set "${1}/toolchains/llvm/prebuilt/${platform_dir}"
    android_ndk_path = set "${base_ndk_path}/bin"
    new_path = set "${PATH}:${android_ndk_path}"
    print -c bright_blue "Updating PATH to include ${android_ndk_path}\n"
    set_env PATH "${new_path}"

    set_env ANDROID_NDK_HOME "${base_ndk_path}"
    set_env NDK_HOME "${base_ndk_path}"

    # Determine the clang runtime lib dir so we can statically link
    # clang_rt.builtins-x86_64-android on x86_64 Android.
    output = exec ${base_ndk_path}/bin/clang --print-runtime-dir
    clang_rt_dir = trim_end ${output.stdout}
    clang_rt_dir = dirname ${clang_rt_dir}
    clang_rt_dir = join_path ${clang_rt_dir} linux
    set_env CLANG_RT_DIR "${clang_rt_dir}"

    set_env CARGO_TARGET_ARMV7_LINUX_ANDROIDEABI_ANDROID_NDK "${base_ndk_path}"
    set_env CARGO_TARGET_AARCH64_LINUX_ANDROID_ANDROID_NDK "${base_ndk_path}"
    set_env CARGO_TARGET_X86_64_LINUX_ANDROID_ANDROID_NDK "${base_ndk_path}"
end

fn autodetect_android_env
    if not is_empty ${ANDROID_NDK_HOME}
        return ${ANDROID_NDK_HOME}
    elseif not is_empty ${NDK_HOME}
        return ${NDK_HOME}
    else
        platform = os_family
        sdk_folder = set "Sdk"

        if eq ${platform} "linux"
            platform_dir = get_home_dir
        elseif eq ${platform} "mac"
            platform_dir = get_home_dir
            platform_dir = set "${platform_dir}/Library"
            sdk_folder = set "sdk"
        else
            trigger_error "Unsupported host platform"
        end

        preferred_hwnd = split ${ANDROID_NDK_PREFER_VERSION} .
        prefer_minor_version = array_pop ${preferred_hwnd}
        prefer_major_version = array_pop ${preferred_hwnd}
        print -c bright_blue "NDK Preferred version is ${prefer_major_version}.${prefer_minor_version}.xxxx\n"
        print -c bright_blue "Platform home dir is ${platform_dir}\n"
        release ${preferred_hwnd}

        ndk_versions_hwnd = glob_array "${platform_dir}/Android/${sdk_folder}/ndk/*"
        for path in ${ndk_versions_hwnd}
            print -c bright_blue "Found NDK path: ${path}\n"
            ndk_latest_version_path = set ${path}

            split_path_hwnd = split ${path} "/"
            ndk_version = array_pop ${split_path_hwnd}
            release ${split_path_hwnd}
            ndk_version_components_hwnd = split ${ndk_version} "."
            ndk_build_version = array_pop ${ndk_version_components_hwnd}
            ndk_minor_version = array_pop ${ndk_version_components_hwnd}
            ndk_major_version = array_pop ${ndk_version_components_hwnd}
            release ${ndk_version_components_hwnd}

            major_version_matches = eq ${prefer_major_version} ${ndk_major_version}
            minor_version_matches = eq ${prefer_minor_version} ${ndk_minor_version}

            if ${major_version_matches} and ${minor_version_matches}
                print -c bright_blue "Found preferred NDK version [${ANDROID_NDK_PREFER_VERSION}] => ${ndk_major_version}.${ndk_minor_version}.${ndk_build_version}. Exiting autodetect!\n"
                goto :autodetect_end
            end
        end

        :autodetect_end noop
        print -c bright_blue "Autodetected NDK: host:${platform} @ v${ndk_version} [${ndk_latest_version_path}]\n"
        return ${ndk_latest_version_path}
    end
end

if starts_with ${task.name} "android"
    ndk_home_dir = autodetect_android_env
    print -c bright_blue "NDK Home Dir: ${ndk_home_dir}\n"
    if is_empty ${ndk_home_dir}
        trigger_error "$ANDROID_NDK_HOME/$NDK_HOME haven't been set and/or NDK couldn't be found in the Android Studio directories.\nPlease set it correctly to target your NDK installation"
    else
        update_android_env ${ndk_home_dir}
    end
end
'''
