name: Build bindings

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

on:
  push:
    branches:
      - main
  pull_request:

env:
  CARGO_TERM_COLOR: always
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse

jobs:
  build-android:
    if: github.repository == 'wireapp/core-crypto'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "adopt"
      - name: Gradle Setup
        uses: gradle/actions/setup-gradle@v4
      - name: Validate Gradle wrapper
        uses: gradle/actions/wrapper-validation@v4
      - name: "Setup rust"
        uses: actions-rust-lang/setup-rust-toolchain@v1  # this implicitly caches Rust tools and build artifacts
        with:
          rustflags: ''
          target: "armv7-linux-androideabi,aarch64-linux-android,x86_64-linux-android"
      - name: Setup cargo-make
        uses: davidB/rust-cargo-make@v1
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
      - name: Install NDK 25
        run: echo "y" | sdkmanager --install "ndk;25.2.9519653"
      - name: Build Android package
        env:
          ANDROID_NDK_HOME: /usr/local/lib/android/sdk/ndk/25.2.9519653
        run: |
          cd crypto-ffi
          cargo make android
      - name: Build package
        run: |
          cd crypto-ffi/bindings
          ./gradlew android:build -x lint -x lintRelease

  build-and-test-jvm:
    if: github.repository == 'wireapp/core-crypto'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "adopt"
      - name: Gradle Setup
        uses: gradle/actions/setup-gradle@v4
      - name: Validate Gradle wrapper
        uses: gradle/actions/wrapper-validation@v4
      - name: "Setup rust"
        uses: actions-rust-lang/setup-rust-toolchain@v1  # this implicitly caches Rust tools and build artifacts
      - name: Setup cargo-make
        uses: davidB/rust-cargo-make@v1
      - name: Build JVM rust binaries
        run: |
          cd crypto-ffi
          cargo make jvm-linux
      - name: Build and test JVM package
        run: |
          cd crypto-ffi/bindings
          ./gradlew jvm:build -x lint -x lintRelease

  build-swift:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1  # this implicitly caches Rust tools and build artifacts
        with:
          rustflags: ''
          target: "aarch64-apple-ios,x86_64-apple-ios,aarch64-apple-ios-sim"
      - name: Setup cargo-make
        uses: davidB/rust-cargo-make@v1
      - name: Build Swift package
        run: |
          cd crypto-ffi
          cargo make ios-create-xcframework

  build-and-test-wasm:
    runs-on: ubuntu-latest
    env:
      # ensures we have same flags as when publishing
      RUSTFLAGS: "-D warnings -W unreachable-pub"
    steps:
      - uses: actions/checkout@v4
      - uses: browser-actions/setup-chrome@latest
        id: setup-chrome
        with:
          chrome-version: stable
      - uses: actions-rust-lang/setup-rust-toolchain@v1  # this implicitly caches Rust tools and build artifacts
        with:
          rustflags: ''
          target: wasm32-unknown-unknown
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Setup cargo-make
        uses: davidB/rust-cargo-make@v1
      - name: Install wasm-pack
        uses: jetli/wasm-pack-action@v0.4.0
        with:
          version: "latest"
      - name: Build & test WASM / JS package
        run: |
          cd crypto-ffi
          bun install
          cargo make wasm
          bun run wdio
          cd bindings/js
          bun eslint . --max-warnings=0
