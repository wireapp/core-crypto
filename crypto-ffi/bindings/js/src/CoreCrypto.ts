// Wire
// Copyright (C) 2022 Wire Swiss GmbH

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see http://www.gnu.org/licenses/.

export type { ConversationConfiguration } from "./ConversationConfiguration";
export {
    CoreCryptoError,
    ErrorType,
    MlsErrorType,
    ProteusErrorType,
    type ErrorContext,
    type ErrorTypeWithContext,
    type MlsErrorContext,
    type ProteusErrorContext,
    isCcError,
    isE2eiError,
    isOtherError,
    isTransactionFailedError,
    isMlsError,
    isMlsBufferedCommitError,
    isMlsBufferedFutureMessageError,
    isMlsConversationAlreadyExistsError,
    isMlsDuplicateMessageError,
    isMlsMessageRejectedError,
    isMlsOrphanWelcomeError,
    isMlsOtherError,
    isMlsSelfCommitIgnoredError,
    isMlsStaleCommitError,
    isMlsStaleProposalError,
    isMlsUnmergedPendingGroupError,
    isMlsWrongEpochError,
    isProteusError,
    isProteusDuplicateMessageError,
    isProteusOtherError,
    isProteusRemoteIdentityChangedError,
    isProteusSessionNotFoundError,
} from "./CoreCryptoError";

export { CoreCryptoContext } from "./CoreCryptoContext";

export {
    BuildMetadata,
    WireIdentity,
    X509Identity,
    CoreCryptoLogLevel,
    CoreCrypto,
} from "./CoreCryptoInstance";

export {
    CredentialType,
    WirePolicy,
    GroupInfoEncryptionType,
    RatchetTreeType,
    DeviceStatus,
    WelcomeBundle,
} from "./CoreCryptoMLS";
export type {
    ProposalRef,
    MlsTransportResponse,
    MlsTransport,
} from "./CoreCryptoMLS";

export { E2eiEnrollment, E2eiConversationState } from "./CoreCryptoE2EI";
export type {
    CRLRegistration,
    AcmeDirectory,
    NewCrlDistributionPoints,
} from "./CoreCryptoE2EI";

export {
    AcmeChallenge,
    Ciphersuite,
    ciphersuiteFromU16,
    ciphersuiteDefault,
    ClientId,
    CustomConfiguration,
    openDatabase,
    Database,
    DatabaseKey,
    type MlsTransportData,
    migrateDatabaseKeyTypeToBytes,
    updateDatabaseKey,
    NewAcmeAuthz,
    NewAcmeOrder,
    ExternalSenderKey,
    GroupInfo,
    ConversationId,
    Welcome,
    SecretKey,
    setMaxLogLevel,
    buildMetadata,
    setLogger,
    version,
    type CoreCryptoLogger,
    type EpochObserver,
    type HistoryObserver,
    type CommitBundle,
    type GroupInfoBundle,
    type HistorySecret,
} from "./autogenerated/core_crypto_ffi";
import * as  core_crypto_ffi from "./autogenerated/core_crypto_ffi";
import initWasm from "./autogenerated/wasm-bindgen/index";

/**
 * Initialises the wasm module necessary for running core crypto.
 *
 * @param location path where the wasm module is located. If omitted the module is assumed be located at the root of the core crypto module.
 */
export async function initWasmModule(location: string | undefined = undefined) {
    if (typeof window !== "undefined") {
        if (typeof location === "string") {
            const path = `${location}index_bg.wasm`;
            await initWasm({ module_or_path: path });
        } else {
            await initWasm({});
        }
    } else {
        // non-browser context, load WASM module from file
        const fs = await import("fs/promises");
        const path = new URL(
            `${location}index_bg.wasm`,
            import.meta.url
        );
        const file = await fs.open(path);
        const buffer = await file.readFile();
        const module = new WebAssembly.Module(new Uint8Array(buffer));
        await initWasm({ module_or_path: module });
    }
    // URBN initialization
    // Initialize the generated bindings: mostly checksums, but also callbacks.
    // - the boolean flag ensures this loads exactly once, even if the JS code
    //   is reloaded (e.g. during development with metro).
    core_crypto_ffi.default.initialize();
}
