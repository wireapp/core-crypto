// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package com.wire.crypto;

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the detils of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.ptr.ByReference
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.locks.ReentrantLock
import kotlin.concurrent.withLock

// The Rust Buffer and 3 templated methods (alloc, free, reserve).
// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    @JvmField var capacity: Int = 0
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : RustBuffer(), Structure.ByValue
    class ByReference : RustBuffer(), Structure.ByReference

    companion object {
        internal fun alloc(size: Int = 0) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_CoreCrypto_3b48_rustbuffer_alloc(size, status).also {
                if(it.data == null) {
                   throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
               }
            }
        }

        internal fun free(buf: RustBuffer.ByValue) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_CoreCrypto_3b48_rustbuffer_free(buf, status)
        }

        internal fun reserve(buf: RustBuffer.ByValue, additional: Int) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_CoreCrypto_3b48_rustbuffer_reserve(buf, additional, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setInt(0, value.capacity)
        pointer.setInt(4, value.len)
        pointer.setPointer(8, value.data)
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}


// A helper for structured writing of data into a `RustBuffer`.
// This is very similar to `java.nio.ByteBuffer` but it knows how to grow
// the underlying `RustBuffer` on demand.
//
// TODO: we should benchmark writing things into a `RustBuffer` versus building
// up a bytearray and then copying it across.

class RustBufferBuilder() {
    var rbuf = RustBuffer.ByValue()
    var bbuf: ByteBuffer? = null

    init {
        val rbuf = RustBuffer.alloc(16) // Totally arbitrary initial size
        rbuf.writeField("len", 0)
        this.setRustBuffer(rbuf)
    }

    internal fun setRustBuffer(rbuf: RustBuffer.ByValue) {
        this.rbuf = rbuf
        this.bbuf = this.rbuf.data?.getByteBuffer(0, this.rbuf.capacity.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
            it.position(rbuf.len)
        }
    }

    fun finalize() : RustBuffer.ByValue {
        val rbuf = this.rbuf
        // Ensure that the JVM-level field is written through to native memory
        // before turning the buffer, in case its recipient uses it in a context
        // JNA doesn't apply its automatic synchronization logic.
        rbuf.writeField("len", this.bbuf!!.position())
        this.setRustBuffer(RustBuffer.ByValue())
        return rbuf
    }

    fun discard() {
        if(this.rbuf.data != null) {
            // Free the current `RustBuffer`
            RustBuffer.free(this.rbuf)
            // Replace it with an empty RustBuffer.
            this.setRustBuffer(RustBuffer.ByValue())
        }
    }

    internal fun reserve(size: Int, write: (ByteBuffer) -> Unit) {
        // TODO: this will perform two checks to ensure we're not overflowing the buffer:
        // one here where we check if it needs to grow, and another when we call a write
        // method on the ByteBuffer. It might be cheaper to use exception-driven control-flow
        // here, trying the write and growing if it throws a `BufferOverflowException`.
        // Benchmarking needed.
        if (this.bbuf!!.position() + size > this.rbuf.capacity) {
            rbuf.writeField("len", this.bbuf!!.position())
            this.setRustBuffer(RustBuffer.reserve(this.rbuf, size))
        }
        write(this.bbuf!!)
    }

    fun putByte(v: Byte) {
        this.reserve(1) { bbuf ->
            bbuf.put(v)
        }
    }

    fun putShort(v: Short) {
        this.reserve(2) { bbuf ->
            bbuf.putShort(v)
        }
    }

    fun putInt(v: Int) {
        this.reserve(4) { bbuf ->
            bbuf.putInt(v)
        }
    }

    fun putLong(v: Long) {
        this.reserve(8) { bbuf ->
            bbuf.putLong(v)
        }
    }

    fun putFloat(v: Float) {
        this.reserve(4) { bbuf ->
            bbuf.putFloat(v)
        }
    }

    fun putDouble(v: Double) {
        this.reserve(8) { bbuf ->
            bbuf.putDouble(v)
        }
    }

    fun put(v: ByteArray) {
        this.reserve(v.size) { bbuf ->
            bbuf.put(v)
        }
    }
}

// Helpers for reading primitive data types from a bytebuffer.
internal fun<T> liftFromRustBuffer(rbuf: RustBuffer.ByValue, readItem: (ByteBuffer) -> T): T {
    val buf = rbuf.asByteBuffer()!!
    try {
       val item = readItem(buf)
       if (buf.hasRemaining()) {
           throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
       }
       return item
    } finally {
        RustBuffer.free(rbuf)
    }
}

internal fun<T> lowerIntoRustBuffer(v: T, writeItem: (T, RustBufferBuilder) -> Unit): RustBuffer.ByValue {
    // TODO: maybe we can calculate some sort of initial size hint?
    val buf = RustBufferBuilder()
    try {
        writeItem(v, buf)
        return buf.finalize()
    } catch (e: Throwable) {
        buf.discard()
        throw e
    }
}

// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
@Structure.FieldOrder("code", "error_buf")
internal open class RustCallStatus : Structure() {
    @JvmField var code: Int = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    fun isSuccess(): Boolean {
        return code == 0
    }

    fun isError(): Boolean {
        return code == 1
    }

    fun isPanic(): Boolean {
        return code == 2
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface CallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: Exception> rustCallWithError(errorHandler: CallStatusErrorHandler<E>, callback: (RustCallStatus) -> U): U {
    var status = RustCallStatus();
    val return_value = callback(status)
    if (status.isSuccess()) {
        return return_value
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// CallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object NullCallStatusErrorHandler: CallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> rustCall(callback: (RustCallStatus) -> U): U {
    return rustCallWithError(NullCallStatusErrorHandler, callback);
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "core_crypto_ffi"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface _UniFFILib : Library {
    companion object {
        internal val INSTANCE: _UniFFILib by lazy {
            loadIndirect<_UniFFILib>(componentName = "CoreCrypto")
            .also { lib: _UniFFILib ->
                FfiConverterTypeCoreCryptoCallbacks.register(lib)
                }
            
        }
    }

    fun ffi_CoreCrypto_3b48_CoreCrypto_object_free(ptr: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun CoreCrypto_3b48_CoreCrypto_new(path: RustBuffer.ByValue,key: RustBuffer.ByValue,client_id: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Pointer

    fun CoreCrypto_3b48_CoreCrypto_set_callbacks(ptr: Pointer,callbacks: Long,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun CoreCrypto_3b48_CoreCrypto_client_public_key(ptr: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_3b48_CoreCrypto_client_keypackages(ptr: Pointer,amount_requested: Int,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_3b48_CoreCrypto_create_conversation(ptr: Pointer,conversation_id: RustBuffer.ByValue,config: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_3b48_CoreCrypto_conversation_exists(ptr: Pointer,conversation_id: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Byte

    fun CoreCrypto_3b48_CoreCrypto_process_welcome_message(ptr: Pointer,welcome_message: RustBuffer.ByValue,config: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_3b48_CoreCrypto_add_clients_to_conversation(ptr: Pointer,conversation_id: RustBuffer.ByValue,clients: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_3b48_CoreCrypto_remove_clients_from_conversation(ptr: Pointer,conversation_id: RustBuffer.ByValue,clients: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_3b48_CoreCrypto_leave_conversation(ptr: Pointer,conversation_id: RustBuffer.ByValue,other_clients: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_3b48_CoreCrypto_decrypt_message(ptr: Pointer,conversation_id: RustBuffer.ByValue,payload: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_3b48_CoreCrypto_encrypt_message(ptr: Pointer,conversation_id: RustBuffer.ByValue,message: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_3b48_CoreCrypto_new_add_proposal(ptr: Pointer,conversation_id: RustBuffer.ByValue,key_package: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_3b48_CoreCrypto_new_update_proposal(ptr: Pointer,conversation_id: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun CoreCrypto_3b48_CoreCrypto_new_remove_proposal(ptr: Pointer,conversation_id: RustBuffer.ByValue,client_id: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_CoreCrypto_3b48_CoreCryptoCallbacks_init_callback(callback_stub: ForeignCallback,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun CoreCrypto_3b48_init_with_path_and_key(path: RustBuffer.ByValue,key: RustBuffer.ByValue,client_id: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Pointer

    fun CoreCrypto_3b48_version(
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_CoreCrypto_3b48_rustbuffer_alloc(size: Int,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_CoreCrypto_3b48_rustbuffer_from_bytes(bytes: ForeignBytes.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_CoreCrypto_3b48_rustbuffer_free(buf: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun ffi_CoreCrypto_3b48_rustbuffer_reserve(buf: RustBuffer.ByValue,additional: Int,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    
}

// Public interface members begin here.

// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

// The base class for all UniFFI Object types.
//
// This class provides core operations for working with the Rust `Arc<T>` pointer to
// the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// the Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each `FFIObject` instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an `FFIObject` is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an `FFIObject` instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so will
//     leak the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each `FFIObject` an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// In the future we may be able to replace some of this with automatic finalization logic, such as using
// the new "Cleaner" functionaility in Java 9. The above scheme has been designed to work even if `destroy` is
// invoked by garbage-collection machinery rather than by calling code (which by the way, it's apparently also
// possible for the JVM to finalize an object while there is an in-flight call to one of its methods [1],
// so there would still be some complexity here).
//
// Sigh...all of this for want of a robust finalization mechanism.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//
abstract class FFIObject(
    protected val pointer: Pointer
): Disposable, AutoCloseable {

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    open protected fun freeRustArcPtr() {
        // To be overridden in subclasses.
    }

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.pointer)
        } finally {
            // This decrement aways matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }
}
internal typealias Handle = Long
internal class ConcurrentHandleMap<T>(
    private val leftMap: MutableMap<Handle, T> = mutableMapOf(),
    private val rightMap: MutableMap<T, Handle> = mutableMapOf()
) {
    private val lock = java.util.concurrent.locks.ReentrantLock()
    private val currentHandle = AtomicLong(0L)
    private val stride = 1L

    fun insert(obj: T): Handle =
        lock.withLock {
            rightMap[obj] ?:
                currentHandle.getAndAdd(stride)
                    .also { handle ->
                        leftMap[handle] = obj
                        rightMap[obj] = handle
                    }
            }

    fun get(handle: Handle) = lock.withLock {
        leftMap[handle]
    }

    fun delete(handle: Handle) {
        this.remove(handle)
    }

    fun remove(handle: Handle): T? =
        lock.withLock {
            leftMap.remove(handle)?.let { obj ->
                rightMap.remove(obj)
                obj
            }
        }
}

interface ForeignCallback : com.sun.jna.Callback {
    public fun invoke(handle: Handle, method: Int, args: RustBuffer.ByValue, outBuf: RustBufferByReference): Int
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
internal const val IDX_CALLBACK_FREE = 0

internal abstract class FfiConverterCallbackInterface<CallbackInterface>(
    protected val foreignCallback: ForeignCallback
) {
    val handleMap = ConcurrentHandleMap<CallbackInterface>()

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    abstract fun register(lib: _UniFFILib)

    fun drop(handle: Handle): RustBuffer.ByValue {
        return handleMap.remove(handle).let { RustBuffer.ByValue() }
    }

    fun lift(n: Handle) = handleMap.get(n)

    fun read(buf: ByteBuffer) = lift(buf.getLong())

    fun lower(v: CallbackInterface) =
        handleMap.insert(v).also {
            assert(handleMap.get(it) === v) { "Handle map is not returning the object we just placed there. This is a bug in the HandleMap." }
        }

    fun write(v: CallbackInterface, buf: RustBufferBuilder) =
        buf.putLong(lower(v))
}



enum class CiphersuiteName {
    MLS_128_DHKEMX25519_AES128GCM_SHA256_ED25519,MLS_128_DHKEMP256_AES128GCM_SHA256_P256,MLS_128_DHKEMX25519_CHACHA20POLY1305_SHA256_ED25519,MLS_256_DHKEMX448_AES256GCM_SHA512_ED448,MLS_256_DHKEMP521_AES256GCM_SHA512_P521,MLS_256_DHKEMX448_CHACHA20POLY1305_SHA512_ED448,MLS_256_DHKEMP384_AES256GCM_SHA384_P384;
}

internal object FfiConverterTypeCiphersuiteName {
    fun lift(rbuf: RustBuffer.ByValue): CiphersuiteName {
        return liftFromRustBuffer(rbuf) { buf -> read(buf) }
    }

    fun read(buf: ByteBuffer) = try {
        CiphersuiteName.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    fun lower(value: CiphersuiteName): RustBuffer.ByValue {
        return lowerIntoRustBuffer(value, {v, buf -> write(v, buf)})
    }

    fun write(value: CiphersuiteName, buf: RustBufferBuilder) {
        buf.putInt(value.ordinal + 1)
    }
}



@Throws(CryptoException::class)

fun initWithPathAndKey(path: String, key: String, clientId: String ): CoreCrypto {
    return FfiConverterTypeCoreCrypto.lift(
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_3b48_init_with_path_and_key(FfiConverterString.lower(path), FfiConverterString.lower(key), FfiConverterString.lower(clientId) , _status)
})
}



fun version(): String {
    return FfiConverterString.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_3b48_version( _status)
})
}

public interface CoreCryptoInterface {
    
    @Throws(CryptoException::class)
    fun setCallbacks(callbacks: CoreCryptoCallbacks )
    
    @Throws(CryptoException::class)
    fun clientPublicKey(): List<UByte>
    
    @Throws(CryptoException::class)
    fun clientKeypackages(amountRequested: UInt ): List<List<UByte>>
    
    @Throws(CryptoException::class)
    fun createConversation(conversationId: List<UByte>, config: ConversationConfiguration ): MemberAddedMessages?
    
    fun conversationExists(conversationId: List<UByte> ): Boolean
    
    @Throws(CryptoException::class)
    fun processWelcomeMessage(welcomeMessage: List<UByte>, config: ConversationConfiguration ): List<UByte>
    
    @Throws(CryptoException::class)
    fun addClientsToConversation(conversationId: List<UByte>, clients: List<Invitee> ): MemberAddedMessages?
    
    @Throws(CryptoException::class)
    fun removeClientsFromConversation(conversationId: List<UByte>, clients: List<Invitee> ): List<UByte>?
    
    @Throws(CryptoException::class)
    fun leaveConversation(conversationId: List<UByte>, otherClients: List<List<UByte>> ): ConversationLeaveMessages
    
    @Throws(CryptoException::class)
    fun decryptMessage(conversationId: List<UByte>, payload: List<UByte> ): List<UByte>?
    
    @Throws(CryptoException::class)
    fun encryptMessage(conversationId: List<UByte>, message: List<UByte> ): List<UByte>
    
    @Throws(CryptoException::class)
    fun newAddProposal(conversationId: List<UByte>, keyPackage: List<UByte> ): List<UByte>
    
    @Throws(CryptoException::class)
    fun newUpdateProposal(conversationId: List<UByte> ): List<UByte>
    
    @Throws(CryptoException::class)
    fun newRemoveProposal(conversationId: List<UByte>, clientId: List<UByte> ): List<UByte>
    
}

class CoreCrypto(
    pointer: Pointer
) : FFIObject(pointer), CoreCryptoInterface {
    constructor(path: String, key: String, clientId: String ) :
        this(
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_3b48_CoreCrypto_new(FfiConverterString.lower(path), FfiConverterString.lower(key), FfiConverterString.lower(clientId) , _status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_CoreCrypto_3b48_CoreCrypto_object_free(this.pointer, status)
        }
    }

    
    @Throws(CryptoException::class)override fun setCallbacks(callbacks: CoreCryptoCallbacks ) =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_3b48_CoreCrypto_set_callbacks(it, FfiConverterTypeCoreCryptoCallbacks.lower(callbacks) ,  _status)
}
        }
    
    
    @Throws(CryptoException::class)override fun clientPublicKey(): List<UByte> =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_3b48_CoreCrypto_client_public_key(it,   _status)
}
        }.let {
            FfiConverterSequenceUByte.lift(it)
        }
    
    
    @Throws(CryptoException::class)override fun clientKeypackages(amountRequested: UInt ): List<List<UByte>> =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_3b48_CoreCrypto_client_keypackages(it, FfiConverterUInt.lower(amountRequested) ,  _status)
}
        }.let {
            FfiConverterSequenceSequenceUByte.lift(it)
        }
    
    
    @Throws(CryptoException::class)override fun createConversation(conversationId: List<UByte>, config: ConversationConfiguration ): MemberAddedMessages? =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_3b48_CoreCrypto_create_conversation(it, FfiConverterTypeConversationId.lower(conversationId), FfiConverterTypeConversationConfiguration.lower(config) ,  _status)
}
        }.let {
            FfiConverterOptionalTypeMemberAddedMessages.lift(it)
        }
    
    override fun conversationExists(conversationId: List<UByte> ): Boolean =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_3b48_CoreCrypto_conversation_exists(it, FfiConverterTypeConversationId.lower(conversationId) ,  _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    
    
    @Throws(CryptoException::class)override fun processWelcomeMessage(welcomeMessage: List<UByte>, config: ConversationConfiguration ): List<UByte> =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_3b48_CoreCrypto_process_welcome_message(it, FfiConverterSequenceUByte.lower(welcomeMessage), FfiConverterTypeConversationConfiguration.lower(config) ,  _status)
}
        }.let {
            FfiConverterTypeConversationId.lift(it)
        }
    
    
    @Throws(CryptoException::class)override fun addClientsToConversation(conversationId: List<UByte>, clients: List<Invitee> ): MemberAddedMessages? =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_3b48_CoreCrypto_add_clients_to_conversation(it, FfiConverterTypeConversationId.lower(conversationId), FfiConverterSequenceTypeInvitee.lower(clients) ,  _status)
}
        }.let {
            FfiConverterOptionalTypeMemberAddedMessages.lift(it)
        }
    
    
    @Throws(CryptoException::class)override fun removeClientsFromConversation(conversationId: List<UByte>, clients: List<Invitee> ): List<UByte>? =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_3b48_CoreCrypto_remove_clients_from_conversation(it, FfiConverterTypeConversationId.lower(conversationId), FfiConverterSequenceTypeInvitee.lower(clients) ,  _status)
}
        }.let {
            FfiConverterOptionalSequenceUByte.lift(it)
        }
    
    
    @Throws(CryptoException::class)override fun leaveConversation(conversationId: List<UByte>, otherClients: List<List<UByte>> ): ConversationLeaveMessages =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_3b48_CoreCrypto_leave_conversation(it, FfiConverterTypeConversationId.lower(conversationId), FfiConverterSequenceTypeClientId.lower(otherClients) ,  _status)
}
        }.let {
            FfiConverterTypeConversationLeaveMessages.lift(it)
        }
    
    
    @Throws(CryptoException::class)override fun decryptMessage(conversationId: List<UByte>, payload: List<UByte> ): List<UByte>? =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_3b48_CoreCrypto_decrypt_message(it, FfiConverterTypeConversationId.lower(conversationId), FfiConverterSequenceUByte.lower(payload) ,  _status)
}
        }.let {
            FfiConverterOptionalSequenceUByte.lift(it)
        }
    
    
    @Throws(CryptoException::class)override fun encryptMessage(conversationId: List<UByte>, message: List<UByte> ): List<UByte> =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_3b48_CoreCrypto_encrypt_message(it, FfiConverterTypeConversationId.lower(conversationId), FfiConverterSequenceUByte.lower(message) ,  _status)
}
        }.let {
            FfiConverterSequenceUByte.lift(it)
        }
    
    
    @Throws(CryptoException::class)override fun newAddProposal(conversationId: List<UByte>, keyPackage: List<UByte> ): List<UByte> =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_3b48_CoreCrypto_new_add_proposal(it, FfiConverterTypeConversationId.lower(conversationId), FfiConverterSequenceUByte.lower(keyPackage) ,  _status)
}
        }.let {
            FfiConverterSequenceUByte.lift(it)
        }
    
    
    @Throws(CryptoException::class)override fun newUpdateProposal(conversationId: List<UByte> ): List<UByte> =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_3b48_CoreCrypto_new_update_proposal(it, FfiConverterTypeConversationId.lower(conversationId) ,  _status)
}
        }.let {
            FfiConverterSequenceUByte.lift(it)
        }
    
    
    @Throws(CryptoException::class)override fun newRemoveProposal(conversationId: List<UByte>, clientId: List<UByte> ): List<UByte> =
        callWithPointer {
    rustCallWithError(CryptoException) { _status ->
    _UniFFILib.INSTANCE.CoreCrypto_3b48_CoreCrypto_new_remove_proposal(it, FfiConverterTypeConversationId.lower(conversationId), FfiConverterTypeClientId.lower(clientId) ,  _status)
}
        }.let {
            FfiConverterSequenceUByte.lift(it)
        }
    
    

    
    
}

internal object FfiConverterTypeCoreCrypto {
    fun lower(value: CoreCrypto): Pointer = value.callWithPointer { it }

    fun write(value: CoreCrypto, buf: RustBufferBuilder) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }

    fun lift(ptr: Pointer): CoreCrypto {
        return CoreCrypto(ptr)
    }

    fun read(buf: ByteBuffer): CoreCrypto {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }
}


data class MemberAddedMessages (
    var message: List<UByte>, 
    var welcome: List<UByte> 
)  {
    
    
}

internal object FfiConverterTypeMemberAddedMessages {
    fun lift(rbuf: RustBuffer.ByValue): MemberAddedMessages {
        return liftFromRustBuffer(rbuf) { buf -> read(buf) }
    }

    fun read(buf: ByteBuffer): MemberAddedMessages {
        return MemberAddedMessages(
            FfiConverterSequenceUByte.read(buf),
            FfiConverterSequenceUByte.read(buf),
        )
    }

    fun lower(value: MemberAddedMessages): RustBuffer.ByValue {
        return lowerIntoRustBuffer(value, {v, buf -> write(v, buf)})
    }

    fun write(value: MemberAddedMessages, buf: RustBufferBuilder) {
            FfiConverterSequenceUByte.write(value.message, buf)
        
            FfiConverterSequenceUByte.write(value.welcome, buf)
        
    }
}


data class ConversationLeaveMessages (
    var selfRemovalProposal: List<UByte>, 
    var otherClientsRemovalCommit: List<UByte>? 
)  {
    
    
}

internal object FfiConverterTypeConversationLeaveMessages {
    fun lift(rbuf: RustBuffer.ByValue): ConversationLeaveMessages {
        return liftFromRustBuffer(rbuf) { buf -> read(buf) }
    }

    fun read(buf: ByteBuffer): ConversationLeaveMessages {
        return ConversationLeaveMessages(
            FfiConverterSequenceUByte.read(buf),
            FfiConverterOptionalSequenceUByte.read(buf),
        )
    }

    fun lower(value: ConversationLeaveMessages): RustBuffer.ByValue {
        return lowerIntoRustBuffer(value, {v, buf -> write(v, buf)})
    }

    fun write(value: ConversationLeaveMessages, buf: RustBufferBuilder) {
            FfiConverterSequenceUByte.write(value.selfRemovalProposal, buf)
        
            FfiConverterOptionalSequenceUByte.write(value.otherClientsRemovalCommit, buf)
        
    }
}


data class Invitee (
    var id: List<UByte>, 
    var kp: List<UByte> 
)  {
    
    
}

internal object FfiConverterTypeInvitee {
    fun lift(rbuf: RustBuffer.ByValue): Invitee {
        return liftFromRustBuffer(rbuf) { buf -> read(buf) }
    }

    fun read(buf: ByteBuffer): Invitee {
        return Invitee(
            FfiConverterTypeClientId.read(buf),
            FfiConverterSequenceUByte.read(buf),
        )
    }

    fun lower(value: Invitee): RustBuffer.ByValue {
        return lowerIntoRustBuffer(value, {v, buf -> write(v, buf)})
    }

    fun write(value: Invitee, buf: RustBufferBuilder) {
            FfiConverterTypeClientId.write(value.id, buf)
        
            FfiConverterSequenceUByte.write(value.kp, buf)
        
    }
}


data class ConversationConfiguration (
    var extraMembers: List<Invitee>, 
    var admins: List<List<UByte>>, 
    var ciphersuite: CiphersuiteName?, 
    var keyRotationSpan: java.time.Duration? 
)  {
    
    
}

internal object FfiConverterTypeConversationConfiguration {
    fun lift(rbuf: RustBuffer.ByValue): ConversationConfiguration {
        return liftFromRustBuffer(rbuf) { buf -> read(buf) }
    }

    fun read(buf: ByteBuffer): ConversationConfiguration {
        return ConversationConfiguration(
            FfiConverterSequenceTypeInvitee.read(buf),
            FfiConverterSequenceTypeMemberId.read(buf),
            FfiConverterOptionalTypeCiphersuiteName.read(buf),
            FfiConverterOptionalDuration.read(buf),
        )
    }

    fun lower(value: ConversationConfiguration): RustBuffer.ByValue {
        return lowerIntoRustBuffer(value, {v, buf -> write(v, buf)})
    }

    fun write(value: ConversationConfiguration, buf: RustBufferBuilder) {
            FfiConverterSequenceTypeInvitee.write(value.extraMembers, buf)
        
            FfiConverterSequenceTypeMemberId.write(value.admins, buf)
        
            FfiConverterOptionalTypeCiphersuiteName.write(value.ciphersuite, buf)
        
            FfiConverterOptionalDuration.write(value.keyRotationSpan, buf)
        
    }
}

sealed class CryptoException(message: String): Exception(message)  {
        // Each variant is a nested class
        // Flat enums carries a string error message, so no special implementation is necessary.
        class ConversationNotFound(message: String) : CryptoException(message)
        class ClientNotFound(message: String) : CryptoException(message)
        class MalformedIdentifier(message: String) : CryptoException(message)
        class KeyStoreException(message: String) : CryptoException(message)
        class ClientSignatureNotFound(message: String) : CryptoException(message)
        class OutOfKeyPackage(message: String) : CryptoException(message)
        class LockPoisonException(message: String) : CryptoException(message)
        class ConversationConfigurationException(message: String) : CryptoException(message)
        class MlsException(message: String) : CryptoException(message)
        class UuidException(message: String) : CryptoException(message)
        class Utf8Exception(message: String) : CryptoException(message)
        class StringUtf8Exception(message: String) : CryptoException(message)
        class ParseIntException(message: String) : CryptoException(message)
        class IoException(message: String) : CryptoException(message)
        class Unauthorized(message: String) : CryptoException(message)
        class Other(message: String) : CryptoException(message)
        

    companion object ErrorHandler : CallStatusErrorHandler<CryptoException> {
        override fun lift(error_buf: RustBuffer.ByValue): CryptoException = FfiConverterTypeCryptoError.lift(error_buf)
    }
}

internal object FfiConverterTypeCryptoError {
    fun lift(error_buf: RustBuffer.ByValue): CryptoException {
        return liftFromRustBuffer(error_buf) { error_buf -> read(error_buf) }
    }

    fun read(error_buf: ByteBuffer): CryptoException {
        
            return when(error_buf.getInt()) {
            1 -> CryptoException.ConversationNotFound(FfiConverterString.read(error_buf))
            2 -> CryptoException.ClientNotFound(FfiConverterString.read(error_buf))
            3 -> CryptoException.MalformedIdentifier(FfiConverterString.read(error_buf))
            4 -> CryptoException.KeyStoreException(FfiConverterString.read(error_buf))
            5 -> CryptoException.ClientSignatureNotFound(FfiConverterString.read(error_buf))
            6 -> CryptoException.OutOfKeyPackage(FfiConverterString.read(error_buf))
            7 -> CryptoException.LockPoisonException(FfiConverterString.read(error_buf))
            8 -> CryptoException.ConversationConfigurationException(FfiConverterString.read(error_buf))
            9 -> CryptoException.MlsException(FfiConverterString.read(error_buf))
            10 -> CryptoException.UuidException(FfiConverterString.read(error_buf))
            11 -> CryptoException.Utf8Exception(FfiConverterString.read(error_buf))
            12 -> CryptoException.StringUtf8Exception(FfiConverterString.read(error_buf))
            13 -> CryptoException.ParseIntException(FfiConverterString.read(error_buf))
            14 -> CryptoException.IoException(FfiConverterString.read(error_buf))
            15 -> CryptoException.Unauthorized(FfiConverterString.read(error_buf))
            16 -> CryptoException.Other(FfiConverterString.read(error_buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    @Suppress("UNUSED_PARAMETER")
    fun lower(value: CryptoException): RustBuffer.ByValue {
        throw RuntimeException("Lowering Errors is not supported")
    }

    @Suppress("UNUSED_PARAMETER")
    fun write(value: CryptoException, buf: RustBufferBuilder) {
        throw RuntimeException("Writing Errors is not supported")
    }

}


// Declaration and FfiConverters for CoreCryptoCallbacks Callback Interface

public interface CoreCryptoCallbacks {
    fun authorize(conversationId: List<UByte>, clientId: String ): Boolean
    
}

// The ForeignCallback that is passed to Rust.
internal class ForeignCallbackTypeCoreCryptoCallbacks : ForeignCallback {
    @Suppress("TooGenericExceptionCaught")
    override fun invoke(handle: Handle, method: Int, args: RustBuffer.ByValue, outBuf: RustBufferByReference): Int {
        val cb = FfiConverterTypeCoreCryptoCallbacks.lift(handle) ?: throw InternalException("No callback in handlemap; this is a Uniffi bug")
        return when (method) {
            IDX_CALLBACK_FREE -> {
                FfiConverterTypeCoreCryptoCallbacks.drop(handle)
                // No return value.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                0
            }
            1 -> {
                val buffer = this.invokeAuthorize(cb, args)
                outBuf.setValue(buffer)
                // Value written to out buffer.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                1
            }
            
            // This should never happen, because an out of bounds method index won't
            // ever be used. Once we can catch errors, we should return an InternalException.
            // https://github.com/mozilla/uniffi-rs/issues/351
            else -> {
                // An unexpected error happened.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                -1
            }
        }
    }

    
    private fun invokeAuthorize(kotlinCallbackInterface: CoreCryptoCallbacks, args: RustBuffer.ByValue): RustBuffer.ByValue =
        try {
            val buf = args.asByteBuffer() ?: throw InternalException("No ByteBuffer in RustBuffer; this is a Uniffi bug")
            kotlinCallbackInterface.authorize(
                    FfiConverterSequenceUByte.read(buf), 
                    FfiConverterString.read(buf) 
                    )
            .let { rval ->
                    val rbuf = RustBufferBuilder()
                    FfiConverterBoolean.write(rval, rbuf)
                    rbuf.finalize()
                }
                // TODO catch errors and report them back to Rust.
                // https://github.com/mozilla/uniffi-rs/issues/351
        } finally {
            RustBuffer.free(args)
        }

    
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
internal object FfiConverterTypeCoreCryptoCallbacks: FfiConverterCallbackInterface<CoreCryptoCallbacks>(
    foreignCallback = ForeignCallbackTypeCoreCryptoCallbacks()
) {
    override fun register(lib: _UniFFILib) {
        rustCall() { status ->
            lib.ffi_CoreCrypto_3b48_CoreCryptoCallbacks_init_callback(this.foreignCallback, status)
        }
    }
}

internal typealias FfiConverterTypeClientId = FfiConverterSequenceUByte

internal typealias FfiConverterTypeConversationId = FfiConverterSequenceUByte

internal typealias FfiConverterTypeMemberId = FfiConverterSequenceUByte
internal object FfiConverterUByte {
    fun lift(v: Byte): UByte {
        return v.toUByte()
    }

    fun read(buf: ByteBuffer): UByte {
        return lift(buf.get())
    }

    fun lower(v: UByte): Byte {
        return v.toByte()
    }

    fun write(v: UByte, buf: RustBufferBuilder) {
        buf.putByte(v.toByte())
    }
}
internal object FfiConverterUInt {
    fun lift(v: Int): UInt {
        return v.toUInt()
    }

    fun read(buf: ByteBuffer): UInt {
        return lift(buf.getInt())
    }

    fun lower(v: UInt): Int {
        return v.toInt()
    }

    fun write(v: UInt, buf: RustBufferBuilder) {
        buf.putInt(v.toInt())
    }
}
internal object FfiConverterBoolean {
    fun lift(v: Byte): Boolean {
        return v.toInt() != 0
    }

    fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    fun lower(v: Boolean): Byte {
        return if (v) 1.toByte() else 0.toByte()
    }

    fun write(v: Boolean, buf: RustBufferBuilder) {
        buf.putByte(lower(v))
    }
}
internal object FfiConverterString {
    fun lift(rbuf: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(rbuf.len)
            rbuf.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(rbuf)
        }
    }

    fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun lower(value: String): RustBuffer.ByValue {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteArr.size)
        rbuf.asByteBuffer()!!.put(byteArr)
        return rbuf
    }

    fun write(value: String, buf: RustBufferBuilder) {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        buf.putInt(byteArr.size)
        buf.put(byteArr)
    }
}
internal object FfiConverterDuration {
    fun lift(rbuf: RustBuffer.ByValue): java.time.Duration {
        return liftFromRustBuffer(rbuf) { buf ->
            read(buf)
        }
    }

    fun read(buf: ByteBuffer): java.time.Duration {
        // Type mismatch (should be u64) but we check for overflow/underflow below
        val seconds = buf.getLong()
        // Type mismatch (should be u32) but we check for overflow/underflow below
        val nanoseconds = buf.getInt().toLong()
        if (seconds < 0) {
            throw java.time.DateTimeException("Duration exceeds minimum or maximum value supported by uniffi")
        }
        if (nanoseconds < 0) {
            throw java.time.DateTimeException("Duration nanoseconds exceed minimum or maximum supported by uniffi")
        }
        return java.time.Duration.ofSeconds(seconds, nanoseconds)
    }

    fun lower(v: java.time.Duration): RustBuffer.ByValue {
        return lowerIntoRustBuffer(v) { v, buf ->
            write(v, buf)
        }
    }

    fun write(v: java.time.Duration, buf: RustBufferBuilder) {
        if (v.seconds < 0) {
            // Rust does not support negative Durations
            throw IllegalArgumentException("Invalid duration, must be non-negative")
        }

        if (v.nano < 0) {
            // Java docs provide guarantee that nano will always be positive, so this should be impossible
            // See: https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html
            throw IllegalArgumentException("Invalid duration, nano value must be non-negative")
        }

        // Type mismatch (should be u64) but since Rust doesn't support negative durations we should be OK
        buf.putLong(v.seconds)
        // Type mismatch (should be u32) but since values will always be between 0 and 999,999,999 it should be OK
        buf.putInt(v.nano)
    }
}
// Helper code for CoreCrypto class is found in ObjectTemplate.kt
// Helper code for ConversationConfiguration record is found in RecordTemplate.kt
// Helper code for ConversationLeaveMessages record is found in RecordTemplate.kt
// Helper code for Invitee record is found in RecordTemplate.kt
// Helper code for MemberAddedMessages record is found in RecordTemplate.kt
// Helper code for CiphersuiteName enum is found in EnumTemplate.kt
// Helper code for CryptoException error is found in ErrorTemplate.kt
// Helper code for CoreCryptoCallbacks callback interface is found in CallbackInterfaceTemplate.kt


internal object FfiConverterOptionalDuration {
    fun lift(rbuf: RustBuffer.ByValue): java.time.Duration? {
        return liftFromRustBuffer(rbuf) { buf ->
            read(buf)
        }
    }

    fun read(buf: ByteBuffer): java.time.Duration? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterDuration.read(buf)
    }

    fun lower(v: java.time.Duration?): RustBuffer.ByValue {
        return lowerIntoRustBuffer(v) { v, buf ->
            write(v, buf)
        }
    }

    fun write(v: java.time.Duration?, buf: RustBufferBuilder) {
        if (v == null) {
            buf.putByte(0)
        } else {
            buf.putByte(1)
            FfiConverterDuration.write(v, buf)
        }
    }
}


internal object FfiConverterOptionalTypeMemberAddedMessages {
    fun lift(rbuf: RustBuffer.ByValue): MemberAddedMessages? {
        return liftFromRustBuffer(rbuf) { buf ->
            read(buf)
        }
    }

    fun read(buf: ByteBuffer): MemberAddedMessages? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeMemberAddedMessages.read(buf)
    }

    fun lower(v: MemberAddedMessages?): RustBuffer.ByValue {
        return lowerIntoRustBuffer(v) { v, buf ->
            write(v, buf)
        }
    }

    fun write(v: MemberAddedMessages?, buf: RustBufferBuilder) {
        if (v == null) {
            buf.putByte(0)
        } else {
            buf.putByte(1)
            FfiConverterTypeMemberAddedMessages.write(v, buf)
        }
    }
}


internal object FfiConverterOptionalTypeCiphersuiteName {
    fun lift(rbuf: RustBuffer.ByValue): CiphersuiteName? {
        return liftFromRustBuffer(rbuf) { buf ->
            read(buf)
        }
    }

    fun read(buf: ByteBuffer): CiphersuiteName? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeCiphersuiteName.read(buf)
    }

    fun lower(v: CiphersuiteName?): RustBuffer.ByValue {
        return lowerIntoRustBuffer(v) { v, buf ->
            write(v, buf)
        }
    }

    fun write(v: CiphersuiteName?, buf: RustBufferBuilder) {
        if (v == null) {
            buf.putByte(0)
        } else {
            buf.putByte(1)
            FfiConverterTypeCiphersuiteName.write(v, buf)
        }
    }
}


internal object FfiConverterOptionalSequenceUByte {
    fun lift(rbuf: RustBuffer.ByValue): List<UByte>? {
        return liftFromRustBuffer(rbuf) { buf ->
            read(buf)
        }
    }

    fun read(buf: ByteBuffer): List<UByte>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceUByte.read(buf)
    }

    fun lower(v: List<UByte>?): RustBuffer.ByValue {
        return lowerIntoRustBuffer(v) { v, buf ->
            write(v, buf)
        }
    }

    fun write(v: List<UByte>?, buf: RustBufferBuilder) {
        if (v == null) {
            buf.putByte(0)
        } else {
            buf.putByte(1)
            FfiConverterSequenceUByte.write(v, buf)
        }
    }
}


internal object FfiConverterSequenceUByte {
    internal fun lower(v: List<UByte>): RustBuffer.ByValue {
        return lowerIntoRustBuffer(v) { v, buf ->
            write(v, buf)
        }
    }

    internal fun write(v: List<UByte>, buf: RustBufferBuilder) {
        buf.putInt(v.size)
        v.forEach {
            FfiConverterUByte.write(it, buf)
        }
    }

    internal fun lift(rbuf: RustBuffer.ByValue): List<UByte> {
        return liftFromRustBuffer(rbuf) { buf ->
            read(buf)
        }
    }

    internal fun read(buf: ByteBuffer): List<UByte> {
        val len = buf.getInt()
        return List<UByte>(len) {
            FfiConverterUByte.read(buf)
        }
    }
}


internal object FfiConverterSequenceTypeInvitee {
    internal fun lower(v: List<Invitee>): RustBuffer.ByValue {
        return lowerIntoRustBuffer(v) { v, buf ->
            write(v, buf)
        }
    }

    internal fun write(v: List<Invitee>, buf: RustBufferBuilder) {
        buf.putInt(v.size)
        v.forEach {
            FfiConverterTypeInvitee.write(it, buf)
        }
    }

    internal fun lift(rbuf: RustBuffer.ByValue): List<Invitee> {
        return liftFromRustBuffer(rbuf) { buf ->
            read(buf)
        }
    }

    internal fun read(buf: ByteBuffer): List<Invitee> {
        val len = buf.getInt()
        return List<Invitee>(len) {
            FfiConverterTypeInvitee.read(buf)
        }
    }
}


internal object FfiConverterSequenceSequenceUByte {
    internal fun lower(v: List<List<UByte>>): RustBuffer.ByValue {
        return lowerIntoRustBuffer(v) { v, buf ->
            write(v, buf)
        }
    }

    internal fun write(v: List<List<UByte>>, buf: RustBufferBuilder) {
        buf.putInt(v.size)
        v.forEach {
            FfiConverterSequenceUByte.write(it, buf)
        }
    }

    internal fun lift(rbuf: RustBuffer.ByValue): List<List<UByte>> {
        return liftFromRustBuffer(rbuf) { buf ->
            read(buf)
        }
    }

    internal fun read(buf: ByteBuffer): List<List<UByte>> {
        val len = buf.getInt()
        return List<List<UByte>>(len) {
            FfiConverterSequenceUByte.read(buf)
        }
    }
}


internal object FfiConverterSequenceTypeClientId {
    internal fun lower(v: List<List<UByte>>): RustBuffer.ByValue {
        return lowerIntoRustBuffer(v) { v, buf ->
            write(v, buf)
        }
    }

    internal fun write(v: List<List<UByte>>, buf: RustBufferBuilder) {
        buf.putInt(v.size)
        v.forEach {
            FfiConverterTypeClientId.write(it, buf)
        }
    }

    internal fun lift(rbuf: RustBuffer.ByValue): List<List<UByte>> {
        return liftFromRustBuffer(rbuf) { buf ->
            read(buf)
        }
    }

    internal fun read(buf: ByteBuffer): List<List<UByte>> {
        val len = buf.getInt()
        return List<List<UByte>>(len) {
            FfiConverterTypeClientId.read(buf)
        }
    }
}


internal object FfiConverterSequenceTypeMemberId {
    internal fun lower(v: List<List<UByte>>): RustBuffer.ByValue {
        return lowerIntoRustBuffer(v) { v, buf ->
            write(v, buf)
        }
    }

    internal fun write(v: List<List<UByte>>, buf: RustBufferBuilder) {
        buf.putInt(v.size)
        v.forEach {
            FfiConverterTypeMemberId.write(it, buf)
        }
    }

    internal fun lift(rbuf: RustBuffer.ByValue): List<List<UByte>> {
        return liftFromRustBuffer(rbuf) { buf ->
            read(buf)
        }
    }

    internal fun read(buf: ByteBuffer): List<List<UByte>> {
        val len = buf.getInt()
        return List<List<UByte>>(len) {
            FfiConverterTypeMemberId.read(buf)
        }
    }
}
// Helper code for ClientId is found in CustomTypeTemplate.kt
// Helper code for ConversationId is found in CustomTypeTemplate.kt
// Helper code for MemberId is found in CustomTypeTemplate.kt

