// Wire
// Copyright (C) 2022 Wire Swiss GmbH

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see http://www.gnu.org/licenses/.

use crate::{
    connection::{DatabaseConnection, KeystoreDatabaseConnection, TransactionWrapper},
    entities::{Entity, EntityBase, EntityFindParams, EntityTransactionExt, MlsPendingMessage, StringEntityId},
    CryptoKeystoreResult, MissingKeyErrorKind,
};

impl Entity for MlsPendingMessage {
    fn id_raw(&self) -> &[u8] {
        self.foreign_id.as_slice()
    }

    fn merge_key(&self) -> Vec<u8> {
        // Use this as a merge key because the `id` is not used as a primary key
        // but  as a foreign key: it's the ID of the PersistedMlsPendingGroup.
        self.message.clone()
    }
}

#[cfg_attr(target_family = "wasm", async_trait::async_trait(?Send))]
#[cfg_attr(not(target_family = "wasm"), async_trait::async_trait)]
impl EntityBase for MlsPendingMessage {
    type ConnectionType = KeystoreDatabaseConnection;
    type AutoGeneratedFields = ();
    const COLLECTION_NAME: &'static str = "mls_pending_messages";

    fn to_missing_key_err_kind() -> MissingKeyErrorKind {
        MissingKeyErrorKind::MlsPendingMessages
    }

    fn to_transaction_entity(self) -> crate::transaction::Entity {
        crate::transaction::Entity::MlsPendingMessage(self)
    }

    async fn find_one(
        conn: &mut Self::ConnectionType,
        id: &StringEntityId,
    ) -> crate::CryptoKeystoreResult<Option<Self>> {
        use rusqlite::OptionalExtension as _;
        use std::io::Read as _;

        let transaction = conn.transaction()?;
        let rowid: Option<i64> = transaction
            .query_row(
                "SELECT rowid FROM mls_pending_messages WHERE id = ?",
                [&id.as_slice()],
                |r| r.get(0),
            )
            .optional()?;
        match rowid {
            Some(rowid) => {
                let mut blob =
                    transaction.blob_open(rusqlite::DatabaseName::Main, "mls_pending_messages", "id", rowid, true)?;
                let mut id = vec![];
                blob.read_to_end(&mut id)?;
                blob.close()?;

                let mut blob = transaction.blob_open(
                    rusqlite::DatabaseName::Main,
                    "mls_pending_messages",
                    "message",
                    rowid,
                    true,
                )?;
                let mut message = vec![];
                blob.read_to_end(&mut message)?;
                blob.close()?;

                Ok(Some(Self {
                    foreign_id: id,
                    message,
                }))
            }
            None => Ok(None),
        }
    }

    async fn find_all(
        conn: &mut Self::ConnectionType,
        params: EntityFindParams,
    ) -> crate::CryptoKeystoreResult<Vec<Self>> {
        let transaction = conn.transaction()?;
        let query: String = format!("SELECT rowid FROM mls_pending_messages {}", params.to_sql());

        let mut stmt = transaction.prepare_cached(&query)?;
        let mut rows = stmt.query_map([], |r| r.get(0))?;
        let entities = rows.try_fold(Vec::new(), |mut acc, rowid_result| {
            use std::io::Read as _;
            let rowid = rowid_result?;

            let mut blob =
                transaction.blob_open(rusqlite::DatabaseName::Main, "mls_pending_messages", "id", rowid, true)?;
            let mut id = vec![];
            blob.read_to_end(&mut id)?;
            blob.close()?;

            let mut blob = transaction.blob_open(
                rusqlite::DatabaseName::Main,
                "mls_pending_messages",
                "message",
                rowid,
                true,
            )?;
            let mut message = vec![];
            blob.read_to_end(&mut message)?;
            blob.close()?;

            acc.push(Self {
                foreign_id: id,
                message,
            });
            crate::CryptoKeystoreResult::Ok(acc)
        })?;

        Ok(entities)
    }

    async fn find_many(
        _conn: &mut Self::ConnectionType,
        _ids: &[StringEntityId],
    ) -> crate::CryptoKeystoreResult<Vec<Self>> {
        unreachable!()
    }

    async fn count(conn: &mut Self::ConnectionType) -> crate::CryptoKeystoreResult<usize> {
        Ok(conn.query_row("SELECT COUNT(*) FROM mls_pending_messages", [], |r| r.get(0))?)
    }
}

#[cfg_attr(target_family = "wasm", async_trait::async_trait(?Send))]
#[cfg_attr(not(target_family = "wasm"), async_trait::async_trait)]
impl EntityTransactionExt for MlsPendingMessage {
    async fn save(&self, transaction: &TransactionWrapper<'_>) -> CryptoKeystoreResult<()> {
        Self::ConnectionType::check_buffer_size(self.foreign_id.len())?;
        Self::ConnectionType::check_buffer_size(self.message.len())?;

        let zid = rusqlite::blob::ZeroBlob(self.foreign_id.len() as i32);
        let zmsg = rusqlite::blob::ZeroBlob(self.message.len() as i32);

        let id_bytes = &self.foreign_id;

        use rusqlite::ToSql as _;
        transaction.execute(
            "INSERT INTO mls_pending_messages (id, message) VALUES(?, ?)",
            [&zid.to_sql()?, &zmsg.to_sql()?],
        )?;
        let rowid = transaction.last_insert_rowid();

        let mut blob =
            transaction.blob_open(rusqlite::DatabaseName::Main, "mls_pending_messages", "id", rowid, false)?;
        use std::io::Write as _;
        blob.write_all(id_bytes)?;
        blob.close()?;

        let mut blob = transaction.blob_open(
            rusqlite::DatabaseName::Main,
            "mls_pending_messages",
            "message",
            rowid,
            false,
        )?;
        blob.write_all(&self.message)?;
        blob.close()?;

        Ok(())
    }

    async fn delete_fail_on_missing_id(
        transaction: &TransactionWrapper<'_>,
        id: StringEntityId<'_>,
    ) -> CryptoKeystoreResult<()> {
        let updated = transaction.execute("DELETE FROM mls_pending_messages WHERE id = ?", [id.as_slice()])?;

        if updated > 0 {
            Ok(())
        } else {
            Err(Self::to_missing_key_err_kind().into())
        }
    }
}
