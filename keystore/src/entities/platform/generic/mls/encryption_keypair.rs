use std::io::{Read, Write};

use crate::{
    CryptoKeystoreResult, MissingKeyErrorKind,
    connection::{DatabaseConnection, KeystoreDatabaseConnection, TransactionWrapper},
    entities::{
        Entity, EntityBase, EntityFindParams, EntityIdStringExt, EntityTransactionExt, StoredEncryptionKeyPair,
        StringEntityId,
    },
};

#[async_trait::async_trait]
impl Entity for StoredEncryptionKeyPair {
    fn id_raw(&self) -> &[u8] {
        self.pk.as_slice()
    }

    async fn find_all(
        conn: &mut Self::ConnectionType,
        params: EntityFindParams,
    ) -> crate::CryptoKeystoreResult<Vec<Self>> {
        let mut conn = conn.conn().await;
        let transaction = conn.transaction()?;
        let query: String = format!("SELECT rowid FROM mls_encryption_keypairs {}", params.to_sql());

        let mut stmt = transaction.prepare_cached(&query)?;
        let mut rows = stmt.query_map([], |r| r.get(0))?;
        let entities = rows.try_fold(Vec::new(), |mut acc, row_result| {
            use std::io::Read as _;
            let rowid = row_result?;

            let mut blob = transaction.blob_open(rusqlite::MAIN_DB, "mls_encryption_keypairs", "sk", rowid, true)?;

            let mut sk = vec![];
            blob.read_to_end(&mut sk)?;
            blob.close()?;

            let mut blob = transaction.blob_open(rusqlite::MAIN_DB, "mls_encryption_keypairs", "pk", rowid, true)?;

            let mut pk = vec![];
            blob.read_to_end(&mut pk)?;
            blob.close()?;

            acc.push(Self { sk, pk });

            crate::CryptoKeystoreResult::Ok(acc)
        })?;

        Ok(entities)
    }

    async fn find_one(
        conn: &mut Self::ConnectionType,
        id: &StringEntityId,
    ) -> crate::CryptoKeystoreResult<Option<Self>> {
        let mut conn = conn.conn().await;
        let transaction = conn.transaction()?;
        use rusqlite::OptionalExtension as _;
        let maybe_rowid = transaction
            .query_row(
                "SELECT rowid FROM mls_encryption_keypairs WHERE pk_sha256 = ?",
                [id.sha256()],
                |r| r.get::<_, i64>(0),
            )
            .optional()?;

        if let Some(rowid) = maybe_rowid {
            let mut blob = transaction.blob_open(rusqlite::MAIN_DB, "mls_encryption_keypairs", "pk", rowid, true)?;

            let mut pk = Vec::with_capacity(blob.len());
            blob.read_to_end(&mut pk)?;
            blob.close()?;

            let mut blob = transaction.blob_open(rusqlite::MAIN_DB, "mls_encryption_keypairs", "sk", rowid, true)?;

            let mut sk = Vec::with_capacity(blob.len());
            blob.read_to_end(&mut sk)?;
            blob.close()?;

            Ok(Some(Self { pk, sk }))
        } else {
            Ok(None)
        }
    }

    async fn count(conn: &mut Self::ConnectionType) -> crate::CryptoKeystoreResult<usize> {
        let conn = conn.conn().await;
        conn.query_row("SELECT COUNT(*) FROM mls_encryption_keypairs", [], |r| r.get(0))
            .map_err(Into::into)
    }
}

#[async_trait::async_trait]
impl EntityBase for StoredEncryptionKeyPair {
    type ConnectionType = KeystoreDatabaseConnection;
    type AutoGeneratedFields = ();
    const COLLECTION_NAME: &'static str = "mls_encryption_keypairs";

    fn to_missing_key_err_kind() -> MissingKeyErrorKind {
        MissingKeyErrorKind::StoredEncryptionKeyPair
    }

    fn to_transaction_entity(self) -> crate::transaction::dynamic_dispatch::Entity {
        crate::transaction::dynamic_dispatch::Entity::EncryptionKeyPair(self)
    }
}

#[async_trait::async_trait]
impl EntityTransactionExt for StoredEncryptionKeyPair {
    async fn save(&self, transaction: &TransactionWrapper<'_>) -> CryptoKeystoreResult<()> {
        use rusqlite::ToSql as _;

        Self::ConnectionType::check_buffer_size(self.sk.len())?;
        Self::ConnectionType::check_buffer_size(self.pk.len())?;

        let zb_pk = rusqlite::blob::ZeroBlob(self.pk.len() as i32);
        let zb_sk = rusqlite::blob::ZeroBlob(self.sk.len() as i32);

        // Use UPSERT (ON CONFLICT DO UPDATE)
        let sql = "
                INSERT INTO mls_encryption_keypairs (pk_sha256, pk, sk)
                VALUES (?, ?, ?)
                ON CONFLICT(pk_sha256) DO UPDATE SET pk = excluded.pk, sk = excluded.sk
                RETURNING rowid";

        let row_id: i64 = transaction.query_row(
            sql,
            [&self.id_sha256().to_sql()?, &zb_pk.to_sql()?, &zb_sk.to_sql()?],
            |r| r.get(0),
        )?;

        let mut blob = transaction.blob_open(rusqlite::MAIN_DB, "mls_encryption_keypairs", "pk", row_id, false)?;

        blob.write_all(&self.pk)?;
        blob.close()?;

        let mut blob = transaction.blob_open(rusqlite::MAIN_DB, "mls_encryption_keypairs", "sk", row_id, false)?;

        blob.write_all(&self.sk)?;
        blob.close()?;

        Ok(())
    }

    async fn delete_fail_on_missing_id(
        transaction: &TransactionWrapper<'_>,
        id: StringEntityId<'_>,
    ) -> CryptoKeystoreResult<()> {
        let updated = transaction.execute("DELETE FROM mls_encryption_keypairs WHERE pk_sha256 = ?", [id.sha256()])?;

        if updated > 0 {
            Ok(())
        } else {
            Err(Self::to_missing_key_err_kind().into())
        }
    }
}
