searchState.loadedDescShard("core_crypto_ffi", 0, "The message was rejected by the delivery service and there…\nFor creating a challenge.\nHolds URLs of all the standard ACME endpoint supported on …\nBasic credential i.e. a KeyPair\nto avoid recursive structs\nMetadata describing the conditions of the build of this …\nHandshake messages are always encrypted\nSee core_crypto::prelude::MlsConversationConfiguration\nDefines the log level for a CoreCrypto\nThis trait is used to provide a callback mechanism to hook …\nSupporting struct for CRL registration result\nsee core_crypto::prelude::MlsCustomConfiguration\nSee core_crypto::prelude::MlsConversationDecryptMessage\nDump of the PKI environemnt as PEM\nSee core_crypto::e2e_identity::E2eiEnrollment\nAn <code>EpochObserver</code> is notified whenever a conversation’s …\nContains the error value\nThe Credential’s certificate is expired\nA <code>HistorySecret</code> encodes sufficient client state that it …\nMessage rejected by the delivery service\nUsed by core crypto to send commits or application …\nResult of an authorization creation.\nResult of an order creation.\nAll clients are still Basic. If all client have expired …\nSome clients are either still Basic or their certificate …\nContains the success value\nThis happens when the DS cannot flag KeyPackages as …\nHandshake messages are never encrypted\nA client should have consumed all incoming messages before …\nThe Credential’s certificate is revoked (not implemented …\nThe message was accepted by the distribution service\nHelper for working with the new transasction interface.\nAll is fine\nAll clients have a valid E2EI certificate\nsee core_crypto::prelude::WelcomeBundle\nSee core_crypto::prelude::WireIdentity\nSee core_crypto::prelude::MlsWirePolicy\nA x509 certificate generally obtained through e2e identity …\nSee core_crypto::prelude::X509Identity\nSee …\nCoreCrypto FFI Details\nReturns build data for CoreCrypto\nSee Session::can_close\nWhether this build was in Debug mode (true) or Release …\nFeatures enabled for this build\nSee …\nAssociated ACME Challenge\nSee …\nSee …\nUnique client identifier e.g. …\nSee …\nSee …\nSee …\nSee …\nCommit delay hint (in milliseconds) to prevent clients …\nCommit delay hint (in milliseconds) to prevent clients …\nSee …\nSee …\nSee …\nSee core_crypto::mls::conversation::Conversation::epoch\nSee core_crypto::mls::conversation::Conversation::epoch\nSee core_crypto::prelude::Session::conversation_exists\nSee core_crypto::prelude::Session::conversation_exists\nFree function to construct a new <code>CoreCrypto</code> instance.\nInstantiate a history client.\nFree function to construct a new <code>CoreCrypto</code> instance.\nSee …\nSee …\nNew CRL Distribution of members of this group\nNew CRL Distribution of members of this group\nNew CRL Distribution of members of this group\nCRLs registered in the PKI env\nSee …\nContains raw JSON data of this challenge. This is parsed …\nSee …\nSee …\nSee …\nWhether this CRL modifies the old CRL (i.e. has a …\nSee …\nSee core_crypto::prelude::Session::e2ei_dump_pki_env\nSee …\nSee …\nSee core_crypto::prelude::Session::e2ei_is_enabled\nSee core_crypto::prelude::Session::e2ei_is_enabled\nSee core_crypto::prelude::Session::e2ei_is_pki_env_setup\nSee core_crypto::prelude::Session::e2ei_is_pki_env_setup\nSee …\nSee …\nSee …\nSee …\nSee …\nSee …\nSee …\nSee …\nSee …\nThis function will be called every time a conversation’s …\nWill be called inside a transaction in CoreCrypto\nOptional expiration timestamp\nSee …\nSee …\nSee core_crypto::prelude::E2eiEnrollment::finalize_request\nSee core_crypto::prelude::E2eiEnrollment::finalize_response\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSee …\nSee …\nSee core_crypto::prelude::Session::get_credential_in_use\nSee core_crypto::prelude::Session::get_credential_in_use\nSee …\nSee …\nSee …\nSee …\nSee …\nSee core_crypto::prelude::E2eiEnrollment::get_refresh_token\nSee …\nSee …\nGit branch\nOutput of <code>git describe</code>\n<code>true</code> when the source code differed from the commit at the …\nHash of current git commit\ntrue when the decrypted message resulted in an epoch …\ntrue when the decrypted message resulted in an epoch …\nIdentifier of the joined conversation\nDNS entry associated with those challenge\nIntermediate CAs that are loaded\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the return value from the internal function.\nIt is set to false if ingesting this MLS message has …\nIt is set to false if ingesting this MLS message has …\nSee …\nDuration in seconds after which we will automatically …\nACME challenge + ACME key thumbprint\nCore Crypto will call this method whenever it needs to log …\nSee …\nUpdates the key of the CoreCrypto database. To be used …\nSee …\nURL for creating a new account.\nSee …\nSee …\nSee …\nSee …\nSee …\nSee …\nURL for fetching a new nonce. Use this only for creating a …\nSee …\nSee …\nURL for creating a new order.\nSee …\nSee …\nOptimization level\nSee …\nSee …\nSee …\nSee …\nSee …\nSee core_crypto::proteus::ProteusCentral::fingerprint\nSee …\nSee core_crypto::proteus::ProteusCentral::fingerprint_local\nSee …\nSee …\nSee …\nSee …\nSee …\nImplement a proteus function, or return an error if the …\nSee core_crypto::proteus::ProteusCentral::try_new\nSee …\nSee …\nSee …\nSee …\nSee …\nSee …\nSee …\nSee core_crypto::proteus::ProteusCentral::session_exists\nSee …\nSee …\nSee …\nSee …\nSee core_crypto::prelude::Session::provide_transport\nSee core_crypto::prelude::Session::random_bytes\nSee core_crypto::prelude::Session::random_bytes.\nAdd an epoch observer to this client.\nSee …\nsee core_crypto::prelude::Session::reseed\nRevocation URL\nRoot CA in use (i.e. Trust Anchor)\nSee …\nSend a commit bundle to the corresponding endpoint.\nSend a message to the corresponding endpoint.\nSee …\nInitializes the logger\nInitializes the logger\nSet maximum log level forwarded to the logger\nStatus of the Credential at the moment this object is …\nNon-standard, Wire specific claim. Indicates the consumer …\nBuild target triple\nMLS thumbprint\nBuild Timestamp\nStarts a new transaction in Core Crypto. If the callback …\nSafely get the return value from the internal function.\nSee …\nURL of this challenge\nSee core_crypto::mls::conversation::ConversationGuard::wipe\nDefines if handshake messages are encrypted or not Note: …\nWhy was the message rejected by the delivery service?")