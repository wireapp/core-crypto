searchState.loadedDescShard("core_crypto", 0, "Core Crypto is a wrapper on top of OpenMLS aimed to …\nMetadata describing the conditions of the build of this …\nIncoming message is a commit for which we have not yet …\nIncoming message is for a future epoch. We will buffer it …\nMetadata describing the conditions of the build of this …\nCallbacks are not provided\nHappens when a client creates a commit, sends it to the DS …\nThis error is emitted when the requested client couldn’t …\nThe keystore has no knowledge of such client; this shouldn…\nThe consumer of this library has misused it\nThis error is emitted when the requested conversation …\nThis error is emitted when the requested conversation …\nError when trying to convert integer sizes - usually when …\nWrapper superstruct for both mls::MlsCentral and …\nClient callbacks in order to Core Crypto to verify user …\nTried to insert an already existing CredentialBundle\nA Credential was not found locally which is very likely an …\nCoreCrypto errors\nA simpler definition for Result types that the Error is a …\nWrapper for errors that can happen during a Cryptobox …\nCryptobox migration error wrapper\nTried to decrypt a message in the wrong epoch\nDomain name not found in the certificate\nThe provided domain name and the one found in the …\nAdding a certificate chain already in the group’s context\nA trust anchor with the provided domain name already …\nWe already decrypted this message once\nWhen looking for a X509 credential for a given ciphersuite …\nEnd to end identity error\nEmtpy trust anchor update\nContains the error value\nOpenMLS GroupInfo error\nError when trying to decode an hex-encoded string. Usually …\nThe keystore already has a stored identity. As such, we …\nMLS Client was not initialized the right way\nError when inspecting a Cryptobox store that doesn’t …\nWe have done something terribly wrong\nThe MLS group is in an invalid state for an unknown reason\nError when trying to coerce a <code>Vec&lt;u8&gt;</code> into a <code>[u8; N]</code>\nThe certificate chain is invalid or not complete\nThe encountered ClientId does not match Wire’s definition\nInvalid Context. This context has been finished and can no …\nA supplied <code>openmls::ciphersuite::hash_ref::HashReference</code> …\nClient presented an invalid identity\nDecrypted message uses an invalid KeyPackage (probably …\nStandard I/O Error\nJson error\nErrors that are sent by our Keystore\n!!!! Something went very wrong and one of our locks has …\nThis error is emitted when we find a malformed (i.e. not …\nMessage epoch is too old\nThe group lacks an ExternalSender extension whereas it …\nError when trying to fetch a certain key from a structured …\nAdd members error\nCommit to pending proposals error\nAn error that occurs in methods of a …\nOpenMls crypto error\nOpenMLS delete KeyPackage error\nEmptyInput error\nOpenMLS encrypt message error\nMLS-specific error wrapper - see …\nMLS Internal Errors\nA wrapper struct for an error string. This can be used …\nExport public group state error\nOpenMls Export Secret error\nExternal Commit error\nCreate message error\n<code>KeyPackageBundle</code> new error\nOpenMLS keypackage validation error\nThis type represents all possible errors that can occur …\nOpenMLS LeafNode validation error\nGeneric error type that indicates unrecoverable errors in …\nOpenMLS merge commit error\nOpenMLS Commit merge error\nParse message error\nGroup state error\nNew group error\nA MLS operation was requested but MLS hasn’t been …\nErrors that are sent by our MLS Provider\nRemove members error\nSelf update error\nErrors that are thrown by TLS serialization crate.\nOpenMLS update extensions error\nWelcome error\nThis error occurs when we cannot find any provisional …\nContains the success value\nThis happens when the DS cannot flag KeyPackages as …\nParent group cannot be found\nError when trying to coerce ints into Strings\nsee <code>pem::PemError</code>\nThis error is emitted when a pending commmit couldn’t be …\nThis error is emitted when a pending proposal couldn’t …\nPropose add members error\nPropose remove members error\nPropose self update error\nError when decoding CBOR and/or decrypting Proteus messages\nError when encoding CBOR and/or decrypting Proteus messages\nWrapper for Proteus-related errors\nProteus Error Wrapper\nVarious internal Proteus errors\nThe proteus client has been called but has not been …\nError when there’s a critical error within a proteus …\nCoreCrypto hasn’t been built with the <code>proteus</code> feature …\nError when trying to open a Cryptobox store that doesn’t …\nOpenMLS LeafNode validation error\nTried to decrypt a commit created by self which is likely …\nThe received commit is deemed stale and is from an older …\nIncoming message is from a prior epoch\nThe received proposal is deemed stale and is from an older …\nError when parsing <code>String</code>s that are not valid UTF-8\nThis error occurs when during the MLS external client …\nAuthorization error\nExternal Add Proposal Validation failed\nExternal Commit sender was not authorized to perform such\nYou tried to join with an external commit but did not …\nNot supported for the moment\nError when parsing <code>str</code>s that are not valid UTF-8\nIncoming message is from an epoch too far in the future to …\nError when trying to coerce a certain value to a certain …\nsee <code>x509_cert::der::Error</code>\nFunction responsible for authorizing an operation. Returns …\nWhether this build was in Debug mode (true) or Release …\nFeatures enabled for this build\nValidates if the given <code>client_id</code> belongs to one of the …\nThis module contains the primitives to enable …\nre-export rusty-jwt-tools API\nReturns the proteus error code\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGit branch\nOutput of <code>git describe</code>\n<code>true</code> when the source code differed from the commit at the …\nHash of current git commit\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMLS Abstraction\nCreates a new transaction. All operations that persist …\nOptimization level\nCommon imports that should be useful for most uses of the …\nProteus Abstraction\nReturns the proteus error code\nReturns the proteus identity’s public key fingerprint\nReturns the proteus identity’s public key fingerprint\nReturns the proteus identity’s public key fingerprint\nReturns the proteus last resort prekey id (u16::MAX = …\nProteus session accessor\nProteus session exists\nAllows to extract the MLS Client from the wrapper …\nBuild target triple\nBuild Timestamp\nFunction responsible for authorizing an operation for a …\nThe epoch of the buffered message\nThis struct provides transactional support for Core Crypto.\nAborts the transaction, meaning it discards all the …\nAdds new members to the group/conversation\nAllows to remove a pending commit. Use this when backend …\nIn case the external commit generated by …\nAllows to remove a pending (uncommitted) proposal. Use …\nsee MlsCentral::client_id\nsee MlsCentral::client_public_key\nReturns the count of valid, non-expired, unclaimed …\nThe commit we created has been accepted by the Delivery …\nCommits all pending proposals of the group\nReturns the ciphersuite of a given conversation\nReturns the epoch of a given conversation\nChecks if a given conversation id exists locally\nDeserializes a TLS-serialized message, then deciphers it\nPrunes local KeyPackages after making sure they also have …\nIndicates when to mark a conversation as not verified i.e. …\nSee MlsCentral::e2ei_dump_pki_env.\nAllows persisting an active enrollment (for example while …\nFetches the persisted enrollment and deletes it from the …\nSee MlsCentral::e2ei_is_enabled\nSee MlsCentral::e2ei_is_pki_env_setup. Unlike …\nParses the ACME server response from the endpoint fetching …\nGenerates an E2EI enrollment instance for a “regular” …\nCreates an enrollment instance with private key material …\nGenerates an E2EI enrollment instance for a E2EI client …\nRegisters a Root Trust Anchor CA for the use in E2EI …\nRegisters a CRL for the use in E2EI processing.\nRegisters an Intermediate CA for the use in E2EI …\nCreates a commit in a conversation for changing the …\nCreates a commit in all local conversations for changing …\nSee MlsCentral::e2ei_verify_group_state.\nEncrypts a raw payload then serializes it to the TLS wire …\nSee MlsCentral::export_secret_key\nCommits the transaction, meaning it takes all the enqueued …\nReturns the argument unchanged.\nSee MlsCentral::get_client_ids\nSee MlsCentral::get_credential_in_use.\nGet the data that has previously been set by …\nSee MlsCentral::get_device_identities.\nSee MlsCentral::get_external_sender\nReturns <code>amount_requested</code> OpenMLS …\nSee MlsCentral::get_user_identities.\nCalls <code>U::from(self)</code>.\nIssues an external commit and stores the group in a …\nMark a conversation as child of another one This will …\nThis merges the commit generated by …\nGenerates MLS KeyPairs/CredentialBundle with a temporary, …\nInitializes the MLS client if super::CoreCrypto has …\nUpdates the current temporary Client ID with the newly …\nClones all references that the MlsCryptoProvider comprises.\nCreates a new Add proposal\nCreate a new empty conversation\nCrafts a new external Add proposal. Enables a client …\nCreates a new Add proposal\nCreates a new Add proposal\nCreate a conversation from a TLS serialized MLS Welcome …\nCreate a conversation from a received MLS Welcome message\nMigrates an existing Cryptobox data store (whether a …\nDecrypts a proteus message envelope\nEncrypts proteus message for a given session ID\nEncrypts a proteus message for several sessions ID. This …\nReturns the proteus identity’s public key fingerprint\nReturns the proteus identity’s public key fingerprint\nReturns the proteus identity’s public key fingerprint\nInitializes the proteus client\nReturns the last resort prekey\nReturns the proteus last resort prekey id (u16::MAX = …\nCreates a new Proteus prekey and returns the …\nCreates a new Proteus prekey with an automatically …\nReloads the sessions from the key store\nProteus session accessor\nDeletes a proteus session from the keystore\nProteus session exists\nCreates a proteus session from a Proteus message envelope\nCreates a proteus session from a prekey\nSaves a proteus session in the keystore\nGenerates a random byte array of the specified size\nRemoves clients from the group/conversation.\nSet arbitrary data to be retrieved by …\nParses supplied key from Delivery Service in order to …\nSelf updates the KeyPackage and automatically commits. …\nDestroys a group locally\nSupporting struct for CRL registration result\nDump of the PKI environemnt as PEM\nWire end to end identity solution for fetching a x509 …\nCreates a request for finally fetching the x509 …\nVerifies that the previous challenge has been completed.\nParses the response from …\nGenerates a new client Dpop JWT token. It demonstrates …\nCRLs registered in the PKI env\nParses the response from …\nWhether this CRL modifies the old CRL (i.e. has a …\nUtility for clients to get the current state of E2EI when …\nEnd to end identity errors\nOptional expiration timestamp\nFinal step before fetching the certificate.\nParses the response from …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLets clients retrieve the OIDC refresh token to try to …\nIntermediate CAs that are loaded\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFor creating a new acme account. This returns a signed …\nParses the response from …\nCreates a new authorization request.\nParses the response from …\nCreates a new challenge request.\nParses the response from …\nCreates a new challenge request.\nParses the response from …\nCreates a new acme order for the handle (userId + display …\nParses the response from …\nRoot CA in use (i.e. Trust Anchor)\nBuilds an instance holding private key material. This …\nWe only expose byte arrays through the FFI so we do all …\nEnd to end identity errors\nWrapper over a Result of an end to end identity error\nContains the error value\nError creating client Dpop token or acme error\nClient misused this library\nInvalid OIDC RefreshToken supplied\nJson error\nAn error occurred while trying to persist the RefreshToken …\nThe required local MLS client was not initialized. It’s …\nIncoming support\nContains the success value\nEnrollment methods are called out of order\nWe already have an ACME Root Trust Anchor registered. …\nError parsing a URL\nError validating X509 parameters\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFor creating a challenge see RFC 8555 Section 7.5.1\nSee RFC 8555 Section 7.1.1\nResult of an authorization creation see RFC 8555 Section …\nResult of an order creation see RFC 8555 Section 7.4\nAuthorizations to create with …\nACME Challenge\nOpaque raw json value\nOpaque raw json value\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDNS entry associated with those challenge\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nACME challenge + ACME key thumbprint\nURL to call with …\nFor fetching a new nonce used in …\nURL to call with …\nNot yet used\nNon-standard, Wire specific claim. Indicates the consumer …\nURL to call for the acme server to complete the challenge\nThe entry point for the MLS CoreCrypto library. This …\nSets the consumer callbacks (i.e authorization callbacks …\nReturns the client’s id as a buffer\nReturns the client’s most recent public signature key as …\nCloses the connection with the local KeyStore\nMLS groups (aka conversation) are the actual entities …\nReturns the ciphersuite of a given conversation\nReturns the epoch of a given conversation\nChecks if a given conversation id exists locally\nDumps the PKI environment as PEM\nReturns true when end-to-end-identity is enabled for the …\nReturns whether the E2EI PKI environment is setup (i.e. …\nVerifies a Group state before joining it\nDerives a new key from the one in the group, allowing it …\nReturns the argument unchanged.\nExports the clients from a conversation\nGets the e2ei conversation state from a <code>GroupInfo</code>. Useful …\nFrom a given conversation, get the identity of the members …\nReturns the raw public key of the single external sender …\nFrom a given conversation, get the identity of the users …\nCalls <code>U::from(self)</code>.\nGenerates a random byte array of the specified size\nsee mls_crypto_provider::MlsCryptoProvider::reseed\nTries to initialize the MLS Central object. Takes a store …\nSame as the MlsCentral::try_new but instead, it uses an in …\nDestroys everything we have, in-memory and on disk.\nA unique identifier for a group/conversation. The …\nThis is a wrapper on top of the OpenMls’s MlsGroup, that …\nsee CentralContext::clear_pending_commit\nsee CentralContext::clear_pending_proposal\nsee CentralContext::commit_accepted\nHelps consumer by providing a deterministic delay in …\nCreates a new group/conversation\nMLS defines 3 kind of messages: Proposal, Commits and …\nsee CentralContext::decrypt_message\nsee CentralContext::encrypt_message It is durable because …\nSee MlsCentral::export_secret_key\nReturns the argument unchanged.\nSee MlsCentral::get_client_ids\nGroup/conversation id\nCalls <code>U::from(self)</code>.\nMarks this conversation as child of another. Prequisite: …\nReturns all members credentials from the group/conversation\nGet actual group members and subtract pending remove …\nReturns all members credentials with their signature …\nsee openmls::group::MlsGroup::propose_add_member\nsee openmls::group::MlsGroup::propose_self_update\nsee openmls::group::MlsGroup::propose_remove_member\nsee openmls::group::MlsGroup::propose_self_update\nType safe recursion of MlsConversationDecryptMessage\nRepresents the potential items a consumer might require …\nDecrypted text message\nsee MlsConversationDecryptMessage\nOnly set when the decrypted message is a commit. Contains …\nNew CRL distribution points that appeared by the …\nsee MlsConversationDecryptMessage\nDelay time in seconds to feed caller timer for committing\nsee MlsConversationDecryptMessage\nReturns the argument unchanged.\nReturns the argument unchanged.\nIs the epoch changed after decrypting this message\nsee MlsConversationDecryptMessage\nIdentity claims present in the sender credential Present …\nsee MlsConversationDecryptMessage\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the conversation still active after receiving this …\nsee MlsConversationDecryptMessage\nOnly when decrypted message is a commit, CoreCrypto will …\nsee MlsConversationDecryptMessage\nClientId of the sender of the message being decrypted. …\nsee MlsConversationDecryptMessage\nRequests that a client with a specified KeyPackage be …\nBasic keypair\nBasic credential i.e. a KeyPair\nIncoming message is a commit for which we have not yet …\nIncoming message is for a future epoch. We will buffer it …\nNot implemented\nCallbacks are not provided\nRepresents a x509 certificate chain supplied by the client …\nMLS ciphersuites.\nHandshake messages are always encrypted\nHappens when a client creates a commit, sends it to the DS …\nRepresents a MLS client which in our case is the …\nA Client identifier\nUsed by consumers to initializes a MLS client. Encompasses …\nThis error is emitted when the requested client couldn’t …\nThe keystore has no knowledge of such client; this shouldn…\nThe consumer of this library has misused it\nThis error is emitted when the requested conversation …\nThis error is emitted when the requested conversation …\nError when trying to convert integer sizes - usually when …\nCredential.\nTried to insert an already existing CredentialBundle\nA Credential was not found locally which is very likely an …\nCoreCrypto errors\nA simpler definition for Result types that the Error is a …\nWrapper for errors that can happen during a Cryptobox …\nCryptobox migration error wrapper\nTried to decrypt a message in the wrong epoch\nContains GroupInfo changes since previous epoch (not yet …\nIndicates the standalone status of a device Credential in …\nDomain name not found in the certificate\nThe provided domain name and the one found in the …\nAdding a certificate chain already in the group’s context\nA trust anchor with the provided domain name already …\nWe already decrypted this message once\nIndicates the state of a Conversation regarding end-to-end …\nWhen looking for a X509 credential for a given ciphersuite …\nEnd to end identity error\nEmtpy trust anchor update\nWrapped 32-byte entropy seed with bounds check\nContains the error value\nThe Credential’s certificate is expired\nPlain old and complete GroupInfo\nGroup epoch. Internally this is stored as a <code>u64</code>. The group …\nOpenMLS GroupInfo error\nRepresents the byte array in MlsGroupInfoBundle\nError when trying to decode an hex-encoded string. Usually …\nDefault number of KeyPackages a client generates the first …\nThe keystore already has a stored identity. As such, we …\nMLS Client was not initialized the right way\nError when inspecting a Cryptobox store that doesn’t …\nWe have done something terribly wrong\nThe MLS group is in an invalid state for an unknown reason\nError when trying to coerce a <code>Vec&lt;u8&gt;</code> into a <code>[u8; N]</code>\nThe certificate chain is invalid or not complete\nThe encountered ClientId does not match Wire’s definition\nInvalid Context. This context has been finished and can no …\nA supplied <code>openmls::ciphersuite::hash_ref::HashReference</code> …\nClient presented an invalid identity\nDecrypted message uses an invalid KeyPackage (probably …\nStandard I/O Error\nJson error\nGroupInfo encrypted in a JWE\nThe key package struct.\nThe key package struct.\nA reference to a key package. This value uniquely …\nErrors that are sent by our Keystore\nA leaf node.\n!!!! Something went very wrong and one of our locks has …\nDH KEM P256 | AES-GCM 128 | SHA2-256 | EcDSA P256\nDH KEM x25519 | AES-GCM 128 | SHA2-256 | Ed25519\nDH KEM x25519 | Chacha20Poly1305 | SHA2-256 | Ed25519\nDH KEM P384 | AES-GCM 256 | SHA2-384 | EcDSA P384\nDH KEM P521 | AES-GCM 256 | SHA2-512 | EcDSA P521\nDH KEM x448 | AES-GCM 256 | SHA2-512 | Ed448\nDH KEM x448 | Chacha20Poly1305 | SHA2-512 | Ed448\nThis error is emitted when we find a malformed (i.e. not …\nMessage epoch is too old\nThe group lacks an ExternalSender extension whereas it …\nError when trying to fetch a certain key from a structured …\nAdd members error\nConfiguration parameters for <code>MlsCentral</code>\nA wrapper for the OpenMLS Ciphersuite, so that we are able …\nReturned when a commit is created\nCommit to pending proposals error\nThe configuration parameters for a group/conversation\nReturned when initializing a conversation through a commit.\nReturned when a commit is created\nAn error that occurs in methods of a …\nLists all the supported Credential types. Could list in …\nOpenMls crypto error\nThe configuration parameters for a group/conversation …\nOpenMLS delete KeyPackage error\nEmptyInput error\nOpenMLS encrypt message error\nMLS-specific error wrapper - see …\nMLS Internal Errors\nA wrapper struct for an error string. This can be used …\nExport public group state error\nOpenMls Export Secret error\nExternal Commit error\nA <code>MlsGroup</code> represents an MLS group with a high-level API. …\nSpecifies the configuration parameters for a <code>MlsGroup</code>. …\nA GroupInfo with metadata\nGroupInfoEncryptionType\nCreate message error\n<code>KeyPackageBundle</code> new error\nOpenMLS keypackage validation error\nThis type represents all possible errors that can occur …\nOpenMLS LeafNode validation error\nGeneric error type that indicates unrecoverable errors in …\nOpenMLS merge commit error\nOpenMLS Commit merge error\nParse message error\nBefore use with the <code>MlsGroup</code> API, the message has to be …\nGroup state error\nNew group error\nA MLS operation was requested but MLS hasn’t been …\nInternal representation of proposal to ease further …\nReturned when a Proposal is created. Helps roll backing a …\nAbstraction over a openmls::prelude::hash_ref::ProposalRef …\nErrors that are sent by our MLS Provider\nRatchetTreeType\nRemove members error\nResult returned after rotating the Credential of the …\nSelf update error\nErrors that are thrown by TLS serialization crate.\nOpenMLS update extensions error\nWelcome error\nWrapper over WireFormatPolicy\nThis error occurs when we cannot find any provisional …\nContainer enum for leaf and parent nodes.\nAll clients are still Basic. If all client have expired …\nSome clients are either still Basic or their certificate …\nContains the success value\nThis happens when the DS cannot flag KeyPackages as …\nParent group cannot be found\nA parent node.\nError when trying to coerce ints into Strings\nsee <code>pem::PemError</code>\nThis error is emitted when a pending commmit couldn’t be …\nThis error is emitted when a pending proposal couldn’t …\nHandshake messages are never encrypted\nUnencrypted GroupInfo\nUnencrypted GroupInfo\nPropose add members error\nPropose remove members error\nPropose self update error\nError when decoding CBOR and/or decrypting Proteus messages\nError when encoding CBOR and/or decrypting Proteus messages\nWrapper for Proteus-related errors\nProteus Error Wrapper\nVarious internal Proteus errors\nThe proteus client has been called but has not been …\nError when there’s a critical error within a proteus …\nCoreCrypto hasn’t been built with the <code>proteus</code> feature …\nError when trying to open a Cryptobox store that doesn’t …\nOpenMLS LeafNode validation error\n32-byte raw entropy seed\nRequests that the member with LeafNodeRef removed be …\nThe Credential’s certificate is revoked\nTried to decrypt a commit created by self which is likely …\nThe received commit is deemed stale and is from an older …\nIncoming message is from a prior epoch\nThe received proposal is deemed stale and is from an older …\nError when parsing <code>String</code>s that are not valid UTF-8\nThis error occurs when during the MLS external client …\nAuthorization error\nExternal Add Proposal Validation failed\nExternal Commit sender was not authorized to perform such\nYou tried to join with an external commit but did not …\nNot supported for the moment\nSimilar mechanism to Add with the distinction that it …\nError when parsing <code>str</code>s that are not valid UTF-8\nAll is fine\nA type that represents a group info of which the signature …\nAll clients have a valid E2EI certificate\nContains everything client needs to know after decrypting …\nRepresents the identity claims identifying a client Those …\nIncoming message is from an epoch too far in the future to …\nError when trying to coerce a certain value to a certain …\nX509 certificate\nA x509 certificate generally obtained through e2e identity …\nsee <code>x509_cert::der::Error</code>\nRepresents the parts of WireIdentity that are specific to …\nReturns the AAD used in the framing.\nAdds members to the group.\nGet the <code>AeadType</code> for this <code>Ciphersuite</code>.\nReturns the key size of the used AEAD.\nReturns the length of the nonce of the AEAD.\nGenerates an <code>MlsGroupConfig</code> from this configuration\nReturns the group epoch as a <code>u64</code>.\nExtract the content of an <code>MlsMessageIn</code> after …\nReturns a builder for <code>MlsGroupConfig</code>\nCreate a key package builder.\nReturns the internal byte array\nX509 certificate identifying this client in the MLS group …\nx509 certificate chain First entry is the leaf certificate …\nCheck whether the this key package supports all the …\nReturns the group’s ciphersuite.\nGet the <code>Ciphersuite</code>.\nGet (unverified) ciphersuite of the verifiable group info.\nThe <code>OpenMls</code> Ciphersuite used in the group\nAll supported ciphersuites\nSets the <code>group_state</code> to <code>MlsGroupState::Operational</code>, thus …\nClear the pending proposals.\nIdentifier for the client to be used by MlsCentral\nUnique client identifier e.g. …\nCloses this provider, which in turns tears down the …\nCommit message adding members to the group\nThe commit message\nThe external commit message\nCreates a Commit message that covers the pending proposals …\nAn Update commit for each conversation\nCalculates the confirmation tag of the current group\nReturns the configuration.\nIdentifier of the conversation joined by external commit\nCreates an application message. Returns …\nReturns own credential. If the group is inactive, it …\nReturns the credential type.\nIndicates whether the credential is Basic or X509\nNew CRL distribution points that appeared by the …\nNew CRL distribution points that appeared by the …\nNew CRL distribution points that appeared by the …\nNew CRL distribution points that appeared by the …\nNew CRL distribution points that appeared by the …\nReturns the <code>CryptoConfig</code>.\nImplementation specific configuration\nDefault capabilities for every generated …\nDelete this key package and its private key from the key …\nre-export\nTears down this provider and <strong>obliterates every single </strong>…\nName as displayed in the messaging application e.g. …\nDNS domain for which this identity proof was generated …\nIndicates if the <code>payload</code> is encrypted or not\nReturns the epoch.\nReturns the epoch authenticator of the current epoch.\nLike Self::self_update but accepts an explicit node. …\nExport a group info object for this group.\nExports the Ratchet Tree.\nExports a secret from the current epoch. Returns …\nGet a reference to the extensions of this key package.\nEntropy pool seed for the internal PRNG\nReturns the <code>MlsGroupConfig</code> external senders extension\nDelivery service public signature key and credential\nExtract the content of an <code>MlsMessageIn</code> after …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a new CredentialBundle (Credential + KeyPair) for …\nGenerates a single new keypackage\nInitializes a raw MLS keypair without an associated client …\nReads the client_id from the leaf certificate\nReads the ‘Not Before’ claim from the leaf certificate\nExtract the unique ClientId from an identifier. Use with …\nReturns a resumption psk for a given epoch. If no …\nGet the group’s <code>Extensions</code>.\nReturns the group ID.\nGet (unverified) group ID of the verifiable group info.\n<code>GroupInfo</code> if the commit is merged\n<code>GroupInfo</code> if the commit is merged\n<code>GroupInfo</code> which becomes valid when the external commit is …\nuser handle e.g. <code>john_wire</code>\nGet the <code>HashType</code> for this <code>Ciphersuite</code>\nGet the length of the used hash algorithm.\nCompute the <code>KeyPackageRef</code> of this <code>KeyPackage</code>. The …\nGet the <code>HpkeAeadType</code> for this <code>Ciphersuite</code>.\nGet the <code>HpkeConfig</code> for this <code>Ciphersuite</code>.\nGet the public HPKE init key of this key package.\nGet the <code>HpkeKdfType</code> for this <code>Ciphersuite</code>.\nGet the <code>HpkeKemType</code> for this <code>Ciphersuite</code>.\nRetrieves the client’s client id. This is free-form and …\nMLS Group Id\nReturns the identity of a given credential.\nIdentity key to be used to instantiate the …\nInitializes the client. If the client’s cryptographic …\nFinalizes initialization using a 2-step process of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDuh\nReturns whether the own client is still a member of the …\nReturns whether this client is E2EI capable\nReturns whether we have a PKI env setup\nJoin an existing group through an External Commit. The …\nAll the now deprecated KeyPackages. Once deleted remotely, …\nDuration in seconds after which we will automatically …\nClone keystore (its an <code>Arc</code> internnaly)\nReturns the <code>MlsGroupConfig</code> leaf extensions configuration.\nGet the <code>LeafNode</code> reference.\nLeave the group.\nReturns the <code>MlsGroupConfig</code> lifetime configuration.\nLoads the state from persisted state.\nGet the length of the AEAD tag.\nReturns the <code>MlsGroupConfig</code> max past epochs.\nHow many application messages can be skipped. Use this …\nReturns the <code>Credential</code> of a member corresponding to the …\nReturns a list of <code>Member</code>s in the group.\nMerges the pending <code>StagedCommit</code> if there is one, and …\nMerge a StagedCommit into the group after inspection. As …\nNumber of openmls::prelude::KeyPackage to create when …\nCreates a new group with the creator as the only member …\nCreates and returns a new basic <code>Credential</code> for the given …\nCreates a new group from a <code>Welcome</code> message. Returns an …\nFresh KeyPackages with the new Credential\nClones the references of the PkiEnvironment and the …\nCreates a new group with a given group ID with the creator …\nInitialize a CryptoProvided with an already-configured …\nCreates and returns a new X509 <code>Credential</code> for the given …\nX509 certificate not after as Unix timestamp\nX509 certificate not before as Unix timestamp\nReturns the <code>MlsGroupConfig</code> number of resumption psks.\nWindow for which decryption secrets are kept within an …\nGet the identity of the client’s <code>Credential</code> owning this …\nReturns a reference to the own <code>LeafNode</code>.\nReturns the leaf index of the client in the tree owning …\nReturns the leaf node of the client in the tree owning …\nReturns the <code>MlsGroupConfig</code> padding size.\nThe GroupInfo\nReturns a reference to the <code>StagedCommit</code> of the most …\nReturns an <code>Iterator</code> over pending proposals.\nLeaf certificate private key\nParses incoming messages from the DS. Checks for syntactic …\nThe proposal message\nA unique identifier of the proposal to rollback it later …\nGenerate a proposal\nCreates proposals to add members to the group.\nCreates proposals to add an external PSK to the key …\nCreates a proposal to update the own leaf node.\nPropose to update the group context extensions. This …\nCreates proposals to add an external PSK to the key …\nCreates proposals to add an external PSK to the key …\nPropose the group to be reinitialized. When commited this …\nCreates proposals to remove members from the group. The …\nCreates proposals to remove members from the group. The …\nCreates proposals to remove members from the group. The …\nCreates proposals to add an external PSK to the key …\nCreates a proposal to update the own leaf node.\nCreates a proposal to update the own leaf node.\nPrune the provided KeyPackageRefs from the keystore\nIndicates if the <code>payload</code> contains a full, partial or …\nReInits the group. If there are any proposals in the …\nRemoves members from the group.\nRemoves a specific proposal from the store.\nRequests <code>count</code> keying material to be present and returns a …\nReseeds the internal CSPRNG entropy pool with a brand new …\nReturns the resumption PSK secret of the current epoch.\nPersists the state.\nUpdates the own leaf node.\nReturns the <code>MlsGroupConfig</code> sender ratchet configuration.\nX509 certificate serial number\nSets the AAD used in the framing.\nSets the configuration.\nSets the entropy seed\nMeh\nGet the <code>SignatureScheme</code> for this <code>Ciphersuite</code>.\nVerify that this key package is valid disregarding the …\nReturns <code>true</code> if the internal state has changed and needs …\nStatus of the Credential at the moment T when this object …\nLocation where the SQLite/IndexedDB database will be stored\nStores a standalone proposal in the internal ProposalStore\nDo whatever it takes not to clone the RatchetTree\nMLS thumbprint\nSerializes both wrapped objects into TLS and return them …\nSerializes both wrapped objects into TLS and return them …\nSerializes both wrapped objects into TLS and return them …\nLower through the FFI\nSerializes both wrapped objects into TLS and return them …\nReturns the <code>MlsGroupConfig</code> group extensions configuration.\nCreates a new instance of the configuration.\nInitialize a CryptoProvider with a backend following the …\nReturns a <code>CredentialWithKey</code> from the unverified payload\nAllows to retrieve the underlying key store directly\nUpdates the extensions of the group\nReplaces the PKI env currently in place\nReturns the <code>MlsGroupConfig</code> boolean flag that indicates …\nReturns the count of valid, non-expired, unclaimed …\nVerify that this key package is valid:\nA welcome message for new members to join the group\nA welcome message if there are pending Add proposals\nReturns the wire format.\nReturns the <code>MlsGroupConfig</code> wire format policy.\nDefines if handshake messages are encrypted or not\nIn case ‘credential_type’ is MlsCredentialType::X509 …\nThe epoch of the buffered message\nProteus counterpart of crate::mls::MlsCentral\nProteus Session wrapper, that contains the identifier and …\nProteus session IDs, it seems it’s basically a string\nDecrypts a message for this Proteus session\nEncrypts a message for this Proteus session\nProteus Public key hex-encoded fingerprint\nReturns the public key fingerprint of the local identity …\nHex-encoded fingerprint of the given prekey\nReturns the public key fingerprint of the remote identity …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the session identifier\nProteus identity keypair\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the Proteus last resort prekey ID (u16::MAX = …\nCreates a new session from a prekey\nInitializes the ProteusCentral")