use std::{net::SocketAddr, path::PathBuf};

use anyhow::Result;
use core_crypto::{HistorySecret, MlsCommitBundle, MlsTransport};
use core_crypto_ffi::{CommitBundle, HistorySecret as HistorySecretFfi};
use openmls::prelude::MlsMessageOut;
use spinoff::Spinner;
use tokio::sync::RwLock;
use which::which;

pub(crate) struct RunningProcess {
    spinner: Option<Spinner>,
    is_task: bool,
}

impl std::fmt::Debug for RunningProcess {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("RunningProcess")
            .field("is_task", &self.is_task)
            .finish()
    }
}

impl RunningProcess {
    pub(crate) fn new(msg: impl AsRef<str> + std::fmt::Display, is_task: bool) -> Self {
        let spinner = if std::env::var("CI").is_err() {
            Some(Spinner::new(
                spinoff::spinners::Aesthetic,
                msg.as_ref().to_owned(),
                if is_task {
                    spinoff::Color::Green
                } else {
                    spinoff::Color::Blue
                },
            ))
        } else {
            if is_task {
                log::info!("{msg}");
            } else {
                log::debug!("{msg}");
            }

            None
        };

        Self { spinner, is_task }
    }

    pub(crate) fn update(&mut self, msg: impl AsRef<str> + std::fmt::Display) {
        if let Some(spinner) = &mut self.spinner {
            spinner.update_text(msg.as_ref().to_owned());
        } else if self.is_task {
            log::info!("{msg}");
        } else {
            log::debug!("{msg}");
        }
    }

    pub(crate) fn success(self, msg: impl AsRef<str> + std::fmt::Display) {
        if let Some(mut spinner) = self.spinner {
            spinner.success(msg.as_ref());
        } else {
            log::info!("{msg}");
        }
    }
}

#[async_trait::async_trait]
pub trait MlsTransportTestExt: MlsTransport {
    async fn latest_commit_bundle(&self) -> MlsCommitBundle;
    async fn latest_welcome_message(&self) -> MlsMessageOut {
        self.latest_commit_bundle().await.welcome.unwrap().clone()
    }
}

#[derive(Debug, Default)]
pub struct MlsTransportSuccessProvider {
    latest_commit_bundle: RwLock<Option<MlsCommitBundle>>,
    latest_message: RwLock<Option<Vec<u8>>>,
}

#[async_trait::async_trait]
impl MlsTransport for MlsTransportSuccessProvider {
    async fn send_commit_bundle(
        &self,
        commit_bundle: MlsCommitBundle,
    ) -> core_crypto::Result<core_crypto::MlsTransportResponse> {
        self.latest_commit_bundle.write().await.replace(commit_bundle);
        Ok(core_crypto::MlsTransportResponse::Success)
    }

    async fn send_message(&self, mls_message: Vec<u8>) -> core_crypto::Result<core_crypto::MlsTransportResponse> {
        self.latest_message.write().await.replace(mls_message);
        Ok(core_crypto::MlsTransportResponse::Success)
    }

    async fn prepare_for_transport(
        &self,
        secret: &HistorySecret,
    ) -> core_crypto::Result<core_crypto::MlsTransportData> {
        Ok(format!("history_secret: {:?}", secret.client_id).into_bytes().into())
    }
}

#[async_trait::async_trait]
impl MlsTransportTestExt for MlsTransportSuccessProvider {
    async fn latest_commit_bundle(&self) -> MlsCommitBundle {
        self.latest_commit_bundle
            .read()
            .await
            .clone()
            .expect("latest_commit_bundle")
    }
}

#[async_trait::async_trait]
impl core_crypto_ffi::MlsTransport for MlsTransportSuccessProvider {
    async fn send_commit_bundle(&self, _commit_bundle: CommitBundle) -> core_crypto_ffi::MlsTransportResponse {
        core_crypto_ffi::MlsTransportResponse::Success
    }

    async fn send_message(&self, mls_message: Vec<u8>) -> core_crypto_ffi::MlsTransportResponse {
        self.latest_message.write().await.replace(mls_message);
        core_crypto_ffi::MlsTransportResponse::Success
    }

    async fn prepare_for_transport(&self, history_secret: HistorySecretFfi) -> core_crypto_ffi::MlsTransportData {
        core_crypto::MlsTransportData::from(format!("history_secret: {:?}", history_secret.client_id).into_bytes())
            .into()
    }
}

/// Copy wasm files from sources into deployment path
pub(crate) async fn cp_wasm_files(wasm_deploy_path: PathBuf) -> Result<()> {
    let cwd = std::env::current_dir()?;

    let spinner = RunningProcess::new("Copying data into WASM bundle...", false);

    std::fs::copy(
        cwd.join("crypto-ffi/bindings/js/test/wdio/index.html"),
        wasm_deploy_path.join("index.html"),
    )?;

    std::fs::copy(
        cwd.join("crypto-ffi/bindings/js/src/corecrypto.js"),
        wasm_deploy_path.join("corecrypto.js"),
    )?;

    std::fs::copy(
        cwd.join("crypto-ffi/bindings/js/src/corecrypto.d.ts"),
        wasm_deploy_path.join("corecrypto.d.ts"),
    )?;

    std::fs::create_dir(wasm_deploy_path.join("autogenerated"))?;
    std::fs::copy(
        cwd.join("crypto-ffi/bindings/js/src/autogenerated/core-crypto-ffi_bg.wasm"),
        wasm_deploy_path.join("autogenerated/core-crypto-ffi_bg.wasm"),
    )?;

    spinner.success("WASM bundle [OK]");
    Ok(())
}

pub(crate) async fn bind_http_server(wasm_deploy_path: PathBuf) -> (SocketAddr, impl Future<Output = ()> + 'static) {
    use warp::Filter as _;
    let warp_filter_cc = warp::path("core-crypto").and(warp::fs::dir(wasm_deploy_path));

    let listener = tokio::net::TcpListener::bind("127.0.0.1:0").await.unwrap();
    let addr = listener.local_addr().unwrap();
    (addr, warp::serve(warp_filter_cc).incoming(listener).run())
}

pub(crate) async fn start_webdriver_chrome(addr: &std::net::SocketAddr) -> Result<tokio::process::Child> {
    let chromedriver_path = std::env::var_os("CHROMEDRIVER_PATH")
        .map(PathBuf::from)
        .or_else(|| which("chromedriver").ok())
        .expect("chromedriver must be in PATH or CHROMEDRIVER_PATH must be set");
    Ok(tokio::process::Command::new(chromedriver_path)
        .arg(format!("--port={}", addr.port()))
        .stdout(std::process::Stdio::null())
        .stderr(std::process::Stdio::null())
        .spawn()?)
}

pub(crate) async fn setup_browser(
    client: &std::net::SocketAddr,
    server: &std::net::SocketAddr,
    folder: &str,
) -> Result<fantoccini::Client> {
    let spinner = RunningProcess::new("Starting Fantoccini remote browser...", false);
    let mut caps_json = serde_json::json!({
        "goog:chromeOptions": {
            "args": [
                "headless=shell",
                "disable-dev-shm-usage",
                "no-sandbox"
            ]
        }
    });

    if let Ok(chrome_path) = std::env::var("CHROME_PATH") {
        caps_json["goog:chromeOptions"]["binary"] = chrome_path.into();
    }

    let serde_json::Value::Object(caps) = caps_json else {
        unreachable!("`serde_json::json!()` did not produce an object when provided an object. Something is broken.")
    };

    let browser = fantoccini::ClientBuilder::native()
        .capabilities(caps)
        .connect(&format!("http://{client}"))
        .await?;
    browser.goto(&format!("http://{server}/{folder}/index.html")).await?;

    spinner.success("Browser [OK]");
    Ok(browser)
}
