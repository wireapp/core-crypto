[env]
ANDROID_NDK_PREFER_VERSION = "25.2"
LIBRARY_EXTENSION = { source = "${CARGO_MAKE_RUST_TARGET_OS}", default_value = "so", mapping = { "linux" = "so", "macos" = "dylib", "windows" = "dll", "openbsd" = "so" } }

[tasks.clean]
command = "cargo"
args = ["clean"]

[tasks.test]
command = "cargo"
args = ["test"]
dependencies = ["clean"]

[tasks.check]
command = "cargo"
args = ["check"]

[tasks.release-build]
command = "cargo"
args = ["build", "--release"]

##################################### DOCS ####################################

[tasks.docs-rust-generic]
command = "cargo"
args = ["doc", "--no-deps"]

[tasks.docs-kotlin-install-deps]
env = { "DOKKA_VERSION" = "1.7.20" }
script_runner = "@duckscript"
script = '''
    println -c bright_blue "Installing Dokka..."

    target_folder = set ../target/_kotlin_docs_tmp/
    dokka_version_file = set "${target_folder}.DOKKA_VERSION"
    exists = mkdir ${target_folder}
    dokka_version_file_exists = is_path_exists ${dokka_version_file}
    if ${exists} and ${dokka_version_file_exists}
        current_version = readfile ${dokka_version_file}
        if eq ${current_version} ${DOKKA_VERSION}
            println -c bright_blue "Dokka ${DOKKA_VERSION} already present, exiting"
            exit
        end
        println -c bright_blue "Dokka older version detected, reinstalling"
    end

    println -c bright_blue "Downloading Dokka CLI & dependencies..."

    wget -O "${target_folder}dokka-cli-${DOKKA_VERSION}.jar" "https://repo1.maven.org/maven2/org/jetbrains/dokka/dokka-cli/${DOKKA_VERSION}/dokka-cli-${DOKKA_VERSION}.jar"
    wget -O "${target_folder}dokka-base-${DOKKA_VERSION}.jar" "https://repo1.maven.org/maven2/org/jetbrains/dokka/dokka-base/${DOKKA_VERSION}/dokka-base-${DOKKA_VERSION}.jar"
    wget -O "${target_folder}dokka-analysis-${DOKKA_VERSION}.jar" "https://repo1.maven.org/maven2/org/jetbrains/dokka/dokka-analysis/${DOKKA_VERSION}/dokka-analysis-${DOKKA_VERSION}.jar"
    wget -O "${target_folder}dokka-analysis-compiler-${DOKKA_VERSION}.jar" "https://repo1.maven.org/maven2/org/jetbrains/dokka/kotlin-analysis-compiler/${DOKKA_VERSION}/kotlin-analysis-compiler-${DOKKA_VERSION}.jar"
    wget -O "${target_folder}dokka-analysis-intellij-${DOKKA_VERSION}.jar" "https://repo1.maven.org/maven2/org/jetbrains/dokka/kotlin-analysis-intellij/${DOKKA_VERSION}/kotlin-analysis-intellij-${DOKKA_VERSION}.jar"
    # Change those in case the dep jars change when DOKKA_VERSION changes
    wget -O "${target_folder}kotlinx-coroutines-core-1.6.4.jar" "https://repo1.maven.org/maven2/org/jetbrains/kotlinx/kotlinx-coroutines-core/1.6.4/kotlinx-coroutines-core-1.6.4.jar"
    wget -O "${target_folder}kotlinx-html-jvm-0.8.1.jar" "https://maven.pkg.jetbrains.space/public/p/kotlinx-html/maven/org/jetbrains/kotlinx/kotlinx-html-jvm/0.8.1/kotlinx-html-jvm-0.8.1.jar"
    wget -O "${target_folder}freemarker-2.3.31.jar" "https://repo1.maven.org/maven2/org/freemarker/freemarker/2.3.31/freemarker-2.3.31.jar"

    # Touch version so that we can check it in later builds
    writefile ${dokka_version_file} "${DOKKA_VERSION}"
    println -c bright_blue "Downloading Dokka CLI & dependencies...done. [.DOKKA_VERSION file = ${DOKKA_VERSION}]"
'''

[tasks.docs-kotlin]
dependencies = ["docs-kotlin-install-deps"]
command = "java"
args = [
    "-jar", "../target/_kotlin_docs_tmp/dokka-cli-${DOKKA_VERSION}.jar",
    "-moduleName", "CoreCrypto",
    "-pluginsClasspath",
    "../target/_kotlin_docs_tmp/dokka-base-${DOKKA_VERSION}.jar;../target/_kotlin_docs_tmp/dokka-analysis-${DOKKA_VERSION}.jar;../target/_kotlin_docs_tmp/dokka-analysis-intellij-${DOKKA_VERSION}.jar;../target/_kotlin_docs_tmp/dokka-analysis-compiler-${DOKKA_VERSION}.jar;../target/_kotlin_docs_tmp/kotlinx-coroutines-core-1.6.4.jar;../target/_kotlin_docs_tmp/kotlinx-html-jvm-0.8.1.jar;../target/_kotlin_docs_tmp/freemarker-2.3.31.jar",
    "-sourceSet", "-src ./bindings/jvm/src/main/kotlin",
    "-outputDir", "../target/doc/core_crypto_ffi/bindings/kotlin",
]

[tasks.docs-rust-wasm]
command = "cargo"
args = ["doc", "--no-deps", "--target=wasm32-unknown-unknown"]

[tasks.npm-deps]
command = "npm"
args = ["install"]

[tasks.docs-ts]
dependencies = ["npm-deps"]
command = "npx"
args = [
    "-y", "typedoc",
    "--basePath", "./bindings/js",
    "--entryPoints", "./bindings/js/CoreCrypto.ts",
    "--tsconfig", "./bindings/js/tsconfig.json",
    "--out", "../target/doc/core_crypto_ffi/bindings/typescript"
]

#[tasks.docs-swift]
# TODO:

##################################### WASM ####################################

[tasks.wasm-build]
command = "wasm-pack"
# env = { "WASM_BINDGEN_WEAKREF" = 1, "WASM_BINDGEN_EXTERNREF" = 1 }
args = [
    "build",
    "--out-dir", "bindings/js/wasm",
    "--out-name", "core-crypto-ffi",
    "--mode", "normal", "${@}"
]

# Quiets warning related to wasm-opt. Used to generate bindings and check Typescript wrapper
[tasks.wasm-build-dev]
script = "cargo make wasm-build --dev"

[tasks.wasm]
dependencies = ["wasm-build"]
command = "npm"
args = ["run", "build"]

##################################### FFI #####################################

[tasks.compile-ffi-swift]
dependencies = ["release-build"]
command = "cargo"
args = [
    "run",
    "--features", "uniffi/cli",
    "--bin", "uniffi-bindgen",
    "generate",
    "--language", "swift",
    "--out-dir", "./bindings/swift/WireCoreCrypto/WireCoreCrypto",
    "--library", "../target/release/libcore_crypto_ffi.${LIBRARY_EXTENSION}"
]

[tasks.ffi-swift]
dependencies = ["compile-ffi-swift"]
script_runner = "@duckscript"
script = "mv ./bindings/swift/WireCoreCrypto/WireCoreCrypto/core_crypto_ffi.swift ./bindings/swift/WireCoreCrypto/WireCoreCrypto/CoreCrypto.swift"


[tasks.compile-ffi-kotlin]
dependencies = ["release-build"]
command = "cargo"
args = [
    "run",
    "--features", "uniffi/cli",
    "--bin", "uniffi-bindgen",
    "generate",
    "--language", "kotlin",
    "--out-dir", "./bindings/jvm/src/main/kotlin/",
    "--library", "../target/release/libcore_crypto_ffi.${LIBRARY_EXTENSION}"
]

[tasks.ffi-kotlin]
dependencies = ["compile-ffi-kotlin"]
script_runner = "@duckscript"
script = "mv ./bindings/jvm/src/main/kotlin/com/wire/crypto/core_crypto_ffi.kt ./bindings/jvm/src/main/kotlin/com/wire/crypto/CoreCrypto.kt"

[tasks.ffi]
dependencies = ["ffi-swift", "ffi-kotlin"]

##################################### iOS #####################################

[tasks.ios-env]
plugin = "detect-release"

[tasks.ios-device]
dependencies = ["ffi-swift"]
condition = { platforms = ["mac"] }
command = "cargo"
args = ["rustc", "--target", "aarch64-apple-ios", "--crate-type=cdylib", "--crate-type=staticlib", "--release", "--", "-C", "strip=symbols"]

[tasks.ios-simulator-x86]
dependencies = ["ffi-swift"]
condition = { platforms = ["mac"] }
command = "cargo"
args = [
    "rustc",
    "--target", "x86_64-apple-ios",
    "--crate-type=cdylib",
    "--crate-type=staticlib",
    "--release",
    "--",
    "-C", "strip=symbols"
]

[tasks.ios-simulator-arm]
dependencies = ["ffi-swift"]
# override CFLAGS to fix ring compilation
env = { "CRATE_CC_NO_DEFAULTS" = 1, "TARGET_CFLAGS" = { script = ["echo \"--target=arm64-apple-ios14.0.0-simulator -mios-simulator-version-min=14.0 -isysroot `xcrun --show-sdk-path --sdk iphonesimulator`\""] } }
condition = { platforms = ["mac"] }
command = "cargo"
args = [
    "rustc",
    "--target", "aarch64-apple-ios-sim",
    "--crate-type=cdylib",
    "--crate-type=staticlib",
    "--release",
    "--",
    "-C", "strip=symbols"
]

[tasks.ios]
condition = { platforms = ["mac"] }
dependencies = ["ios-device", "ios-simulator-x86", "ios-simulator-arm"]

[tasks.ios-create-xcframework]
condition = { platforms = ["mac"] }
script = '''
    cd bindings/swift

    ./build-xcframework.sh
'''
dependencies = ["ios"]

################################### Android ###################################

[tasks.android-env]
plugin = "android-env"

[tasks.android-armv7]
command = "cargo"
args = [
    "rustc",
    "--target", "armv7-linux-androideabi",
    "--crate-type=cdylib",
    "--crate-type=staticlib",
    "--release",
    "--",
    "-C", "strip=symbols"
]
dependencies = ["ffi-kotlin", "android-env"]

[tasks.android-armv8]
command = "cargo"
args = [
    "rustc",
    "--target", "aarch64-linux-android",
    "--crate-type=cdylib",
    "--crate-type=staticlib",
    "--release",
    "--",
    "-C", "strip=symbols"
]
dependencies = ["ffi-kotlin", "android-env"]

[tasks.android-x86]
command = "cargo"
args = [
    "rustc",
    "--target", "x86_64-linux-android",
    "--crate-type=cdylib",
    "--crate-type=staticlib",
    "--release",
    "--",
    "-C", "strip=symbols"
]
dependencies = ["ffi-kotlin", "android-env"]

[tasks.android-i686]
command = "cargo"
args = [
    "rustc",
    "--target", "i686-linux-android",
    "--crate-type=cdylib",
    "--crate-type=staticlib",
    "--release",
    "--",
    "-C", "strip=symbols"
]
dependencies = ["ffi-kotlin", "android-env"]

[tasks.android]
dependencies = ["android-armv7", "android-armv8", "android-x86", "android-i686"]

[tasks.setup-sample-project]
dependencies = ["android"]
script_runner = "@duckscript"
script = '''
handle = map
map_put ${handle} "i686-linux-android" "x86"
map_put ${handle} "x86_64-linux-android" "x86_64"
map_put ${handle} "aarch64-linux-android" "arm64-v8a"
map_put ${handle} "armv7-linux-androideabi" "armeabi-v7a"
keys = map_keys ${handle}
libname = set "libcore_crypto_ffi.${LIBRARY_EXTENSION}"
for rust_target in ${keys}
    android_target = map_get ${handle} ${rust_target}
    println -c bright_blue "cp rust-${rust_target}/${libname} -> android-jniLibs/${android_target}/${libname}"
    from = canonicalize "../target/${rust_target}/debug/${libname}"
    to = canonicalize "../sample-projects/android/CoreCryptoTestApp/app/src/main/jniLibs/${android_target}/${libname}"
    mkdir dirname ${to}
    cp ${from} ${to}
end

release ${handle}

println -c bright_blue "cp ./bindings/jvm/src/main/kotlin/com/wire/crypto/CoreCrypto.kt -> ../sample-projects/android/CoreCryptoTestApp/app/src/main/java/com/wire/core/CoreCrypto.kt"
from = canonicalize "./bindings/jvm/src/main/kotlin/com/wire/crypto/CoreCrypto.kt"
to = canonicalize "../sample-projects/android/CoreCryptoTestApp/app/src/main/java/com/wire/crypto/CoreCrypto.kt"
cp ${from} ${to}
'''

####################################  JVM  ####################################

[tasks.jvm-x86-darwin]
command = "cargo"
args = [
    "rustc",
    "--target", "x86_64-apple-darwin",
    "--crate-type=cdylib",
    "--crate-type=staticlib",
    "--release",
    "--",
    "-C", "strip=symbols"
]
dependencies = ["ffi-kotlin"]
condition = { platforms = ["mac"] }

[tasks.jvm-aarch64-darwin]
command = "cargo"
args = [
    "rustc",
    "--target", "aarch64-apple-darwin",
    "--crate-type=cdylib",
    "--crate-type=staticlib",
    "--release",
    "--",
    "-C", "strip=symbols"
]
dependencies = ["ffi-kotlin"]
condition = { platforms = ["mac"] }

[tasks.jvm-x86-linux]
command = "cargo"
args = [
    "rustc",
    "--target", "x86_64-unknown-linux-gnu",
    "--crate-type=cdylib",
    "--crate-type=staticlib",
    "--release",
    "--",
    "-C", "strip=symbols"
]
dependencies = ["ffi-kotlin"]
condition = { platforms = ["linux"] }

[tasks.jvm-darwin]
dependencies = ["jvm-aarch64-darwin", "jvm-x86-darwin"]

[tasks.jvm-linux]
dependencies = ["jvm-x86-linux"]

[tasks.jvm]
dependencies = ["jvm-darwin", "jvm-linux"]

#################################### Mobile ###################################
[tasks.mobile]
dependencies = ["android", "ios"]

####################################  all  ####################################
[tasks.all]
dependencies = ["mobile", "wasm"]

################################### Plugins ###################################
[plugins.impl.detect-release]
script = '''
index = array_contains ${task.args} "--release"
if index
    set_env IS_RELEASE_BUILD "release"
    println -c bright_blue "Release mode detected!"
end

release_path = set IS_RELEASE_BUILD or "debug"

# index_target = array_contains ${task.args} "--target"
# if index_target
#     target = array_get ${task.args} ${${index_target} + 1}
#     set_env CORECRYPTO_TARGET_FOLDER "../target/${target}/${release_path}"
# else
#     set_env CORECRYPTO_TARGET_FOLDER "../target/${release_path}"
# end
'''

[plugins.impl.android-env]
script = '''
exit_on_error true

fn update_android_env
    platform = os_family
    if eq ${platform} "windows"
        platform_dir = set "windows-x86_64"
    elseif eq ${platform} "linux"
        platform_dir = set "linux-x86_64"
    elseif eq ${platform} "mac"
        platform_dir = set "darwin-x86_64"
    else
        trigger_error "Unsupported host platform"
    end

    base_ndk_path = set "${1}/toolchains/llvm/prebuilt/${platform_dir}"
    android_ndk_path = set "${base_ndk_path}/bin"
    new_path = set "${PATH}:${android_ndk_path}"
    print -c bright_blue "Updating PATH to include ${android_ndk_path}\n"
    set_env PATH "${new_path}"

    set_env ANDROID_NDK_HOME "${base_ndk_path}"
    set_env NDK_HOME "${base_ndk_path}"

    set_env CARGO_TARGET_ARMV7_LINUX_ANDROIDEABI_ANDROID_NDK "${base_ndk_path}"
    set_env CARGO_TARGET_AARCH64_LINUX_ANDROID_ANDROID_NDK "${base_ndk_path}"
    set_env CARGO_TARGET_X86_64_LINUX_ANDROID_ANDROID_NDK "${base_ndk_path}"
    set_env CARGO_TARGET_I686_LINUX_ANDROID_ANDROID_NDK "${base_ndk_path}"
end

fn autodetect_android_env
    if not is_empty ${ANDROID_NDK_HOME}
        return ${ANDROID_NDK_HOME}
    elseif not is_empty ${NDK_HOME}
        return ${NDK_HOME}
    else
        platform = os_family
        sdk_folder = set "Sdk"

        if eq ${platform} "windows"
            platform_dir = get_home_dir
            platform_dir = set "${platform_dir}/AppData/Local"
        elseif eq ${platform} "linux"
            platform_dir = get_home_dir
        elseif eq ${platform} "mac"
            platform_dir = get_home_dir
            platform_dir = set "${platform_dir}/Library"
            sdk_folder = set "sdk"
        else
            trigger_error "Unsupported host platform"
        end

        preferred_hwnd = split ${ANDROID_NDK_PREFER_VERSION} .
        prefer_minor_version = array_pop ${preferred_hwnd}
        prefer_major_version = array_pop ${preferred_hwnd}
        print -c bright_blue "NDK Preferred version is ${prefer_major_version}.${prefer_minor_version}.xxxx\n"
        print -c bright_blue "Platform home dir is ${platform_dir}\n"
        release ${preferred_hwnd}

        ndk_versions_hwnd = glob_array "${platform_dir}/Android/${sdk_folder}/ndk/*"
        for path in ${ndk_versions_hwnd}
            print -c bright_blue "Found NDK path: ${path}\n"
            ndk_latest_version_path = set ${path}

            split_path_hwnd = split ${path} "/"
            ndk_version = array_pop ${split_path_hwnd}
            release ${split_path_hwnd}
            ndk_version_components_hwnd = split ${ndk_version} "."
            ndk_build_version = array_pop ${ndk_version_components_hwnd}
            ndk_minor_version = array_pop ${ndk_version_components_hwnd}
            ndk_major_version = array_pop ${ndk_version_components_hwnd}
            release ${ndk_version_components_hwnd}

            major_version_matches = eq ${prefer_major_version} ${ndk_major_version}
            minor_version_matches = eq ${prefer_minor_version} ${ndk_minor_version}

            if ${major_version_matches} and ${minor_version_matches}
                print -c bright_blue "Found preferred NDK version [${ANDROID_NDK_PREFER_VERSION}] => ${ndk_major_version}.${ndk_minor_version}.${ndk_build_version}. Exiting autodetect!\n"
                goto :autodetect_end
            end
        end

        :autodetect_end noop
        print -c bright_blue "Autodetected NDK: host:${platform} @ v${ndk_version} [${ndk_latest_version_path}]\n"
        return ${ndk_latest_version_path}
    end
end

if starts_with ${task.name} "android"
    ndk_home_dir = autodetect_android_env
    print -c bright_blue "NDK Home Dir: ${ndk_home_dir}\n"
    if is_empty ${ndk_home_dir}
        trigger_error "$ANDROID_NDK_HOME/$NDK_HOME haven't been set and/or NDK couldn't be found in the Android Studio directories.\nPlease set it correctly to target your NDK installation"
    else
        update_android_env ${ndk_home_dir}
    end
end
'''
