// Wire
// Copyright (C) 2022 Wire Swiss GmbH

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see http://www.gnu.org/licenses/.

use crate::{
    connection::KeystoreDatabaseConnection,
    entities::{E2eiAcmeCA, EntityBase, UniqueEntity},
    MissingKeyErrorKind,
};

#[async_trait::async_trait]
impl UniqueEntity for E2eiAcmeCA {
    fn new(content: Vec<u8>) -> Self {
        Self { content }
    }
    fn content(&self) -> &[u8] {
        &self.content
    }
}

#[async_trait::async_trait]
impl EntityBase for E2eiAcmeCA {
    type ConnectionType = KeystoreDatabaseConnection;
    type AutoGeneratedFields = ();

    const COLLECTION_NAME: &'static str = "e2ei_acme_ca";

    fn to_missing_key_err_kind() -> MissingKeyErrorKind {
        MissingKeyErrorKind::E2eiAcmeCA
    }

    fn to_transaction_entity(self) -> crate::transaction::dynamic_dispatch::Entity {
        crate::transaction::dynamic_dispatch::Entity::E2eiAcmeCA(self)
    }
}
