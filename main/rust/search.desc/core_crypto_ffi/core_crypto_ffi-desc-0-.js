searchState.loadedDescShard("core_crypto_ffi", 0, "FFI bindings for core-crypto.\nThe message was rejected by the delivery service and there…\nFor creating a challenge.\nHolds URLs of all the standard ACME endpoint supported on …\nBasic credential i.e. a KeyPair\nto avoid recursive structs\nMetadata describing the conditions of the build of this …\nMLS ciphersuites.\nHandshake messages are always encrypted\nA Client identifier\nInformation returned when a commit is created.\nThe byte vector included in this error variant is the raw …\nThe configuration parameters for a group/conversation\nA unique identifier for a single conversation.\nA <code>CoreCryptoCommand</code> has an <code>execute</code> method which accepts a …\nThe <code>CoreCryptoContext</code> holds the primary <code>CoreCrypto</code> APIs.\nThe primary error type for CoreCrypto\nCoreCrypto wraps around MLS and Proteus implementations …\nDefines the log level for a CoreCrypto\nThis trait is used to provide a callback mechanism to hook …\nA result which produces a <code>CoreCryptoError</code> by default.\nType of Credential\nSupporting struct for CRL registration result\nsee core_crypto::MlsCustomConfiguration\nThe database acting as a core crypto keystore.\nThe key used to encrypt the database.\nA decrypted message and various associated metadata\nIndicates the standalone status of a device Credential in …\nIndicates the state of a Conversation regarding end-to-end …\nWire end to end identity solution for fetching a x509 …\nAn <code>EpochObserver</code> is notified whenever a conversation’s …\nContains the error value\nThe Credential’s certificate is expired\nA <code>GroupInfo</code> with some metadata\nA <code>HistorySecret</code> encodes sufficient client state that it …\nDH KEM P256 | AES-GCM 128 | SHA2-256 | EcDSA P256\nDH KEM x25519 | AES-GCM 128 | SHA2-256 | Ed25519\nDH KEM x25519 | Chacha20Poly1305 | SHA2-256 | Ed25519\nDH KEM P384 | AES-GCM 256 | SHA2-384 | EcDSA P384\nDH KEM P521 | AES-GCM 256 | SHA2-512 | EcDSA P521\nDH KEM x448 | AES-GCM 256 | SHA2-512 | Ed448\nDH KEM x448 | Chacha20Poly1305 | SHA2-512 | Ed448\nMLS produces these kinds of error\nUsed by core crypto to send commits or application …\nAn entity / data which has been packaged by the …\nMLS transport may or may not succeeed; this response …\nResult of an authorization creation.\nResult of an order creation.\nAll clients are still Basic. If all client have expired …\nSome clients are either still Basic or their certificate …\nContains the success value\nThis happens when the DS cannot flag KeyPackages as …\nHandshake messages are never encrypted\nEncapsulates a prekey id and a cbor-serialized prekey\nProteus produces these kinds of error\nA client should have consumed all incoming messages before …\nThe Credential’s certificate is revoked (not implemented …\nThe message was accepted by the distribution service\nHelper for working with the new transasction interface.\nAll is fine\nAll clients have a valid E2EI certificate\nsee core_crypto::WelcomeBundle\nRepresents the identity claims identifying a client Those …\nSee core_crypto::MlsWirePolicy\nA x509 certificate generally obtained through e2e identity …\nRepresents the parts of WireIdentity that are specific to …\nSee …\nAuthorizations to create with <code>new_authz_request</code>\nOnly set when the decrypted message is a commit.\nReturns build data for CoreCrypto\nWhether this build was in Debug mode (true) or Release …\nFeatures enabled for this build\nX509 certificate identifying this client in the MLS group …\nSee core_crypto::E2eiEnrollment::certificate_request\nAssociated ACME Challenge\nSee …\nSee …\nThe ciphersuite used in the group\nGet an instance of the default ciphersuite.\nConstruct a ciphersuite enum instance from its …\nClient id of the associated history client\nUnique client identifier e.g. …\nSee …\nSee …\nSee …\nSee …\nThe commit message\nCommit delay in seconds.\nCommit delay in seconds.\nSee …\nSee …\nSee …\nSee core_crypto::mls::conversation::Conversation::epoch\nSee core_crypto::mls::conversation::Conversation::epoch\nSee core_crypto::Session::conversation_exists\nSee core_crypto::Session::conversation_exists\nCopy the id into a new byte array.\nGet the raw bytes from this type, transferring data from …\nFree function to construct a new <code>CoreCryptoFfi</code> instance.\nInstantiate a history client.\nFree function to construct a new <code>CoreCryptoFfi</code> instance.\nSee …\nSee …\nIndicates whether the credential is Basic or X509\nNew CRL Distribution of members of this group\nNew CRL distribution points that appeared by the …\nNew CRL distribution points that appeared by the …\nImplementation specific configuration\nOpaque secret data sufficient to reconstruct a history …\nSee …\nContains raw JSON data of this challenge. This is parsed …\nOpaque raw json value\nSee …\nSee …\nWhether this CRL modifies the old CRL (i.e. has a …\nSee …\nName as displayed in the messaging application e.g. …\nDNS domain for which this identity proof was generated …\nSee …\nSee …\nSee …\nSee core_crypto::Session::e2ei_is_enabled\nSee core_crypto::Session::e2ei_is_enabled\nSee core_crypto::Session::e2ei_is_pki_env_setup\nSee core_crypto::Session::e2ei_is_pki_env_setup\nSee …\nSee …\nSee …\nSee …\nSee …\nSee …\nSee …\nSee …\nSee …\nSee …\nAn encrypted message to fan out to all other conversation …\nHow the group info is encrypetd\nThis function will be called every time a conversation’s …\nConvert a proteus error into the relevant error code\nWill be called inside a transaction in CoreCrypto\nOptional expiration timestamp\nSee …\nSee …\nDelivery service public signature key and credential\nSee core_crypto::E2eiEnrollment::finalize_request\nSee core_crypto::E2eiEnrollment::finalize_response\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a <code>core_crypto_keystore::DatabaseKey</code> into the local …\nConvert a numeric error code into the relevant proteus …\nSee …\nSee …\nSee …\nSee …\nSee …\nSee …\nSee …\nSee …\nSee …\nGit branch\nOutput of <code>git describe</code>\n<code>true</code> when the source code differed from the commit at the …\nHash of current git commit\n<code>GroupInfo</code> if the commit is merged\nuser handle e.g. <code>john_wire</code>\ntrue when the decrypted message resulted in an epoch …\ntrue when the decrypted message resulted in an epoch …\nPrekey id (automatically incremented)\nIdentifier of the joined conversation\nDNS entry associated with those challenge\nIdentity claims present in the sender credential\nIdentity claims present in the sender credential\nCreate an in-memory Database whose data will be lost when …\nCreate an in-memory Database whose data will be lost when …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the return value from the internal function.\nFalse if processing this message caused the client to be …\nFalse if processing this message caused the client to be …\nSee …\nSee …\nDuration after which we will automatically force a …\nACME challenge + ACME key thumbprint\nCore Crypto will call this method whenever it needs to log …\nSee …\nDecrypted plaintext\nDecrypted plaintext\nUpdates the key of the CoreCrypto database. To be used …\nSee …\nInstantiate a new <code>TransactionHelper</code> from its function.\nInstantiate a client id from a byte array.\nConstruct a new instance, transferring data from the …\nInstantiate CC\nConstruct a new instance from a byte vector.\nURL for creating a new account.\nSee …\nSee …\nSee …\nSee …\nSee …\nSee …\nURL for fetching a new nonce. Use this only for creating a …\nSee …\nSee …\nURL for creating a new order.\nSee …\nSee …\nX509 certificate not after\nX509 certificate not before\nOpen or create a Database.\nOpen or create a Database.\nOptimization level\nThe group info\nCBOR serialization of prekey\nPrepare a history secret before being sent\nSee …\nSee …\nDecrypt a message whether or not the proteus session …\nSee …\nSee …\nSee core_crypto::proteus::ProteusCentral::fingerprint\nSee …\nSee core_crypto::proteus::ProteusCentral::fingerprint_local\nSee …\nSee …\nSee …\nSee …\nSee …\nImplement a proteus function, or return an error if the …\nSee core_crypto::proteus::ProteusCentral::try_new\nSee …\nSee …\nSee …\nCreates a new Proteus prekey with the given id and returns …\nCreates a new Proteus prekey with an automatically …\nSee …\nSee …\nSee core_crypto::proteus::ProteusCentral::session_exists\nSee …\nSee …\nSee …\nSee …\nSee core_crypto::Session::provide_transport\nSee core_crypto::Session::random_bytes\nSee core_crypto::Session::random_bytes.\nWhat kind of ratchet tree is used\nAdd an epoch observer to this client.\nAdd a history observer to this client.\nSee …\nsee core_crypto::Session::reseed\nRevocation URL\nSee …\nSend a commit bundle to the corresponding endpoint.\nSend a message to the corresponding endpoint.\nClientId of the sender of the message being decrypted. …\nClientId of the sender of the message being decrypted. …\nX509 certificate serial number\nSee …\nInitializes the logger\nSet maximum log level forwarded to the logger\nStatus of the Credential at the moment this object is …\nNon-standard, Wire specific claim. Indicates the consumer …\nBuild target triple\nMLS thumbprint\nBuild Timestamp\nStarts a new transaction in Core Crypto. If the callback …\nSafely get the return value from the internal function.\nUpdates the key of the CoreCrypto database.\nSee …\nURL of this challenge\nThe version of <code>core-crypto</code>.\nA welcome message if there are pending Add proposals\nSee core_crypto::mls::conversation::ConversationGuard::wipe\nDefines if handshake messages are encrypted or not Note: …\nIn case ‘credential_type’ is CredentialType::X509 this …\nWhy was this message rejected")