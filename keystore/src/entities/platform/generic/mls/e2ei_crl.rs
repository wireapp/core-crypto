// Wire
// Copyright (C) 2022 Wire Swiss GmbH

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see http://www.gnu.org/licenses/.

use crate::{
    connection::{DatabaseConnection, KeystoreDatabaseConnection, TransactionWrapper},
    entities::{E2eiCrl, Entity, EntityBase, EntityFindParams, EntityTransactionExt, StringEntityId},
    CryptoKeystoreResult, MissingKeyErrorKind,
};

#[async_trait::async_trait]
impl Entity for E2eiCrl {
    fn id_raw(&self) -> &[u8] {
        self.distribution_point.as_bytes()
    }

    async fn find_all(
        conn: &mut Self::ConnectionType,
        params: EntityFindParams,
    ) -> crate::CryptoKeystoreResult<Vec<Self>> {
        let transaction = conn.transaction()?;
        let query: String = format!("SELECT rowid, distribution_point FROM e2ei_crls {}", params.to_sql());

        let mut stmt = transaction.prepare_cached(&query)?;
        let mut rows = stmt.query_map([], |r| Ok((r.get(0)?, r.get(1)?)))?;
        let entities = rows.try_fold(Vec::new(), |mut acc, row_res| {
            use std::io::Read as _;
            let (rowid, distribution_point) = row_res?;

            let mut blob = transaction.blob_open(rusqlite::DatabaseName::Main, "e2ei_crls", "content", rowid, false)?;

            let mut content = vec![];
            blob.read_to_end(&mut content)?;
            blob.close()?;

            acc.push(Self {
                distribution_point,
                content,
            });

            crate::CryptoKeystoreResult::Ok(acc)
        })?;

        Ok(entities)
    }

    async fn find_one(
        conn: &mut Self::ConnectionType,
        id: &StringEntityId,
    ) -> crate::CryptoKeystoreResult<Option<Self>> {
        let transaction = conn.transaction()?;
        use rusqlite::OptionalExtension as _;
        let distribution_point: String = id.try_into()?;
        let mut row_id = transaction
            .query_row(
                "SELECT rowid FROM e2ei_crls WHERE distribution_point = ?",
                [distribution_point.as_str()],
                |r| r.get::<_, i64>(0),
            )
            .optional()?;

        if let Some(rowid) = row_id.take() {
            let mut blob = transaction.blob_open(rusqlite::DatabaseName::Main, "e2ei_crls", "content", rowid, true)?;
            use std::io::Read as _;
            let mut buf = Vec::with_capacity(blob.len());
            blob.read_to_end(&mut buf)?;
            blob.close()?;

            transaction.commit()?;

            Ok(Some(Self {
                distribution_point,
                content: buf,
            }))
        } else {
            Ok(None)
        }
    }

    async fn count(conn: &mut Self::ConnectionType) -> crate::CryptoKeystoreResult<usize> {
        Ok(conn.query_row("SELECT COUNT(*) FROM e2ei_crls", [], |r| r.get(0))?)
    }
}

#[async_trait::async_trait]
impl EntityBase for E2eiCrl {
    type ConnectionType = KeystoreDatabaseConnection;
    type AutoGeneratedFields = ();
    const COLLECTION_NAME: &'static str = "e2ei_crls";

    fn to_missing_key_err_kind() -> MissingKeyErrorKind {
        MissingKeyErrorKind::E2eiCrl
    }

    fn to_transaction_entity(self) -> crate::transaction::dynamic_dispatch::Entity {
        crate::transaction::dynamic_dispatch::Entity::E2eiCrl(self)
    }
}

#[async_trait::async_trait]
impl EntityTransactionExt for E2eiCrl {
    async fn save(&self, transaction: &TransactionWrapper<'_>) -> CryptoKeystoreResult<()> {
        use rusqlite::ToSql as _;

        Self::ConnectionType::check_buffer_size(self.content.len())?;

        let zb = rusqlite::blob::ZeroBlob(self.content.len() as i32);

        // Use UPSERT (ON CONFLICT DO UPDATE)
        let sql = "
        INSERT INTO e2ei_crls (distribution_point, content)
        VALUES (?, ?)
        ON CONFLICT(distribution_point) DO UPDATE SET content = excluded.content
        RETURNING rowid";

        // Execute the UPSERT and get the row_id of the affected row
        let row_id: i64 =
            transaction.query_row(sql, [self.distribution_point.to_sql()?, zb.to_sql()?], |r| r.get(0))?;

        // Open a blob to write the content data
        let mut blob = transaction.blob_open(rusqlite::DatabaseName::Main, "e2ei_crls", "content", row_id, false)?;

        use std::io::Write as _;
        blob.write_all(&self.content)?;
        blob.close()?;

        Ok(())
    }

    async fn delete_fail_on_missing_id(
        transaction: &TransactionWrapper<'_>,
        id: StringEntityId<'_>,
    ) -> CryptoKeystoreResult<()> {
        let updated = transaction.execute("DELETE FROM e2ei_crls WHERE distribution_point = ?", [id.try_as_str()?])?;

        if updated > 0 {
            Ok(())
        } else {
            Err(Self::to_missing_key_err_kind().into())
        }
    }
}
